VerifyinFORMAT: 1A
HOST: http://cmsapi.cisco.io/api/v1

# Cisco Meeting Server API

The Cisco Meeting Server software can be hosted on specific servers based on Cisco Unified
Computing Server (UCS) technology as well as on the Acano X-Series hardware, or on a
specification-based VM server. Cisco Meeting Server is referred to as the Meeting Server
throughout this document.

This document covers release 2.3 of the Application Program Interface for the Cisco Meeting server. For version specific API changes, refer to the Release Notes for Cisco Meeting Server.

In addition to this reference  you can find documentation for Cisco Meeting Server here: https://www.cisco.com/c/en/us/support/conferencing/meeting-server/tsd-products-support-series-home.html. 

* support for recording meetings
* additional DTMF support
* change in behavior of the "allEqual" screen layout for SIP endpoints, (see the defaultLayout parameter for `/coSpaces` and `/callLegProfiles` objects, and defaultLayout, chosenLayout and layout parameters for the `/calls` object).

## Support for recording meetings
New API objects to enable the recording of meetings hosted on the Acano server.
 
They are: 

    * `/recorders`
    * `/recorders/<recorder id>`

* New recording parameter for `/calls` and `/calls/<call id>`
* New recordingControlAllowed parameter for `/callLegProfiles` and `/callLegProfiles/<call leg profile id>`
* New recordingMode parameter for `/callProfiles` and `/callProfiles/<call profile id>`
* New startRecording and stopRecording parameters for `/dtmfProfiles` and `/dtmfProfiles/<dtmf profile id>`
* Two new error codes to aid diagnostics:
    * callRecordingCannotBeModified
    * recorderDoesNotExist

### Additional parameters giving meeting participants greater control over audio and presenting content
* New parameters for `/calls` and `/calls/<call id>`, `/callLegProfiles` and `callLegProfiles/<call leg profile id>` as follows:
    * recording
    * allowAllMuteSelf
    * allowAllPresentationContribution
    * joinAudioMuteAllNewAudio

### Additional support for DTMF
* New dtmfSequence parameter for `/calls/<call id>/callLegs` and `/callsLegs/<call leg id>`
* New parameters for `/dtmfProfiles` and `/dtmfProfiles/<dtmf profile id>` as follows:
    * startRecording
    * stopRecording
    * allowAllMuteSelf
    * cancelAllMuteSelf
    * allowAllPresentationContribution
    * cancelAllPresentationContribution
    * muteAllNewAudio
    * unmuteAllNewAudio
    * defaultMuteAllNewAudio
    * muteAllNewAndAllExceptSelfAudio
    * unmuteAllNewAndAllExceptSelfAudio

## General Structure of Methods

The Meeting Server‘s Application Programming Interface (API) is designed as a hierarchy of
objects, like the trunk and roots of a tree. 
For example, each configured coSpace exists as a
node in this tree, and all of the users who are members of that coSpace exist as nodes
“beneath” the coSpace object’s node. The API objects are accessed using a suitable REST
client, see Section 3.3.

---
**Note:**Although the Cisco Meeting App and other Cisco Meeting Server guides refer to "spaces" rather than "coSpaces", the API still uses /coSpace objects.

---

The Meeting Server has the potential to host a large number of active calls and coSpaces. To reduce the overhead of retrieving the entire collection of objects in a single response, responses
typically return the first “N” matching entries and a count of the total number of objects of that type. To find an individual object’s active status, or to modify or delete it, use filters on the initial retrieval in order to identify the object in question. 

### Object Hierarchy
The hierarchy of objects addressable via the API is:
`/accessQuery`
`/callBrandingProfiles`
`/callBrandingProfiles/<call branding profile id>`

`/callBridges`
`/callBridges/<call bridge id>`

`/calls`
`/calls/<call id>`
`/calls/<call id>/callLegs`
`/calls/<call id>/diagnostics`
`/calls/<call id>/participants`

`/callProfiles`
`/callProfiles/<call profile id>`

`/callLegs`
`/callLegs/<callLeg id>`
`/callLegs/<callLeg id>/callLegProfileTrace`

`/callLegProfiles`
`/callLegProfiles/<call leg profile id>`
`/callLegProfiles/<call leg profile id>/usage`

`/coSpaces`
`/coSpaces/<coSpace id>`
`/coSpaces/<coSpace id>/accessMethods`
`/coSpaces/<coSpace id>/accessMethods/<access method id>`
`/coSpaces/<coSpace id>/coSpaceUsers`
`/coSpaces/<coSpace id>/coSpaceUsers/<coSpaceUser id>`
`/coSpaces/<coSpace id>/diagnostics`
`/coSpaces/<coSpace id>/messages`

`/dialTransforms`
`/dialTransforms/<dial transform id>`

`/directorySearchLocations`
`/directorySearchLocations/<directory search location id>`

`/dtmfProfiles`
`/dtmfProfiles/<dtmf profile id>`

`/forwardingDialPlanRules`
`/forwardingDialPlanRules/<forwarding dial plan rule id>`

`/inboundDialPlanRules`
`/inboundDialPlanRules/<inbound dial plan rule id>`

`/ivrs`
`/ivrs/<ivr id>`
`/ivrBrandingProfiles`
`/ivrBrandingProfiles/<ivr branding profile id>`

`/ldapMappings`
`/ldapMapping/<ldap mapping id>`
`/ldapServers`
`/ldapServers/<ldap server id>`
`/ldapSources`
`/ldapSources/<ldap source id>`
`/ldapSyncs`
`/ldapSyncs/<ldap sync id>`

`/outboundDialPlanRules`
`/outboundDialPlanRules/<outbound dial plan rule id>`
`/participants`
`/participants/<participantId>`
`/participants/<participantId>/callLegs`

`/recorders`
`/recorders/<recorder id>`
`/system/alarms`
`/system/cdrReceiver (deprecated in R1.8)`
`/system/cdrReceivers`
`/system/cdrReceivers/<CDR receiver id>`
`/system/configuration/cluster`
`/system/configuration/xmpp`
`/system/database`
`/system/diagnostics`
`/system/diagnostics/<diagnostics id>`
`/system/diagnostics/<diagnostics id>/contents`
`/system/profiles`
`/system/status`

`/tenantGroups`
`/tenantGroups/<tenant group id>`

`/tenants`
`/tenants/<tenant id>`

`/turnServers`
`/turnServers/<turn server id>`
`/turnServers/<turn server id>/status`

`/users`
`/users/<user id>`
`/users/<user id>/usercoSpaces`
`/userProfiles`
`/userProfiles/<user profile id>`

`/webBridges`
`/webBridges/<web bridge id>`
`/webBridges/<web bridge id>/updateCustomization`

In each case, the top level plural term sits above potentially many individual object nodes; these individual object nodes are identified by an <ID> which is a GUID, typically. For example, if there are 100 coSpaces configured on an Acano server, conceptually there would be 100 nodes directly beneath `/coSpaces` in the hierarchy.

## Accessing the API
The API uses HTTPS as a transport mechanism.

### Configuration Settings
To use the API, you need to connect via HTTPS via the same TCP ports as you would use to access the Web Admin Interface – typically port 443; that is, they use the same interface.

You also need to configure a username and password: you must provide these credentials in order to use the API. From R1.7, you set them using the MMP command `user add <username> (admin|crypto|audit|appadmin|api)`. This command prompts for the user’s password; see the MMP Command Reference for details.

### Authentication
The API user supplies a shared secret username and password to the Acano server configured with the same username and password. The username and password are set in the MMP command line.

While the authentication credentials are sent in essentially plain text within the HTTP traffic, by using HTTPS the traffic itself cannot be read by an external party.

### Tools to Use
Suitable tools to access and update the API include:
* Firefox Poster
* Chrome Postman
* Chrome Advanced Rest Client

Appendix B provides an example of using the Firefox Poster tool.

## API Methods
There are four methods:
* [GET]() is used for retrieval of existing information
* [POST]() is used to create new objects in the hierarchy
* [PUT]() is used to modify an existing object
* [DELETE]() is used to destroy an object in the tree

These methods are described in more detail below.

### URL format
For the purposes of addressing or creating individual objects, the URL format mirrors the conceptual hierarchy of objects, with some additional preceding tags in order to identify that the request is for the API. By way of example, to retrieve information on API object `/calls/dbfca0dd-dbe1-43bb-b101-beb9a7ef35f4` it would be necessary to issue:
`GET /api/v1/calls/dbfca0dd-dbe1-43bb-b101-beb9a7ef35f4 HTTP/1.1`

Specifically, at the top level, including `/api` means that the on-board HTTP server process can distinguish this HTTP method from a normal browser method, and including `v1` means the API handler knows that the request is being made by an object that understands version 1 of the API.

If an API method is successful, it yields a “200 OK” response from the Acano server. If an error occurs, the Acano server responses with a 4xx or 5xx HTTP status code.

A 503 (“Service Unavailable”) status code is returned for API calls unable to be serviced due to a temporary “busy” condition on the Acano server – this can be used as an indication to the requestor that it would be useful to re-attempt the same method later.

Equally, a request supplying a <coSpace id> which does not correspond to a valid coSpace object yields “404 Not Found”.

For 4xx and 5xx error cases, extended error information may be returned as “text/xml” body data, for example:
`<failureDetails><coSpaceDoesNotExist/></failureDetails>`

More generally, such a response consists of a “failureDetails” section and a list of errors; in the above case a method was attempted using a coSpace ID that did not correspond to an active coSpace. The possible failure reasons are described in Section 4.5.

### GET Methods
As mentioned above, GET methods allow retrieval of information about existing API accessible objects, and are used at two levels: Collections level and Individual object level.

#### Collections level
If the GET method is performed at the Collections level (the pluralized noun: “calls”, “coSpaces” etc.) then some number of matching child nodes will be retrieved. By design this is not guaranteed to be the entire list, but the total number of objects of that type present in the Acano server can be learnt via this mechanism.

In order to retrieve just specific items, most GET methods at the Collections level allow the use of a filter expression. The idea here is that the interface of a management tool would initially present the API user with the summed count of coSpaces (for example), basic details on the first “N” coSpaces (e.g. their names) and a filter box which the human user can use to search for the specific coSpace(s) of interest.

With no other additional parameters, a GET method at the Collections level will return items from the start of the Acano server's notional complete list. By comparing the number of items returned with the "total" value, it is straightforward to determine whether all elements have been returned (if the number of elements returned is equal to the "total" value).

#### Using limit and offset at the Collections level
It is possible to restrict the number of elements returned to a limit chosen by the requestor, by including a "limit=<limitValue>" in the API request. This guarantees that no more than the specified "limitValue" number of elements will be returned - the Acano server will have its own limit in these cases too, and therefore the number of elements returned will be the lower of any supplied "limitValue" and the Acano server's own limit.

In order to retrieve elements other than the first "n" on the Acano server's notional list, it is also possible to supply an "offset=<offsetValue>" in the API request. This causes the Acano server to return elements which start at the specified position in its list, skipping the first "offsetValue" number of elements. If "offsetValue" is greater than the number of objects of that type, then no elements will be returned.

---
**Note:** The offset value should not be viewed as a general mechanism for retrieving a large complete list - sequential retrievals of one "page" of data followed by a second "page" will not necessarily be operating on the same complete list if any objects have been deleted or added in the interval between these methods.

---

The expectation is that, for each request and response, the requestor will keep track of the offset and limit values used, and combine this knowledge with the number of elements returned in the response and the "total" indicated by the Acano server. If the "offsetValue" supplied by the requestor plus the number of elements returned is less than the "total" value indicated in the response, the requestor then knows that there are more values present. The following table shows some examples:

<table>
    <tr>
        <th>Requestor offset</th>
        <th>Requestor limit</th>
        <th>XML Response</th>
        <th>Meaning</th>
    </tr>
    <tr>
        <td>not supplied</td>
        <td>not supplied</td>
        <td></td>
        <td>All coSpaces (0 – 6) present in response</td>
    </tr>
    <tr>
        <td>not supplied</td>
        <td>1</td>
        <td></td>
        <td>First coSpace present in response</td>
    </tr>
    <tr>
        <td>4</td>
        <td>10</td>
        <td></td>
        <td>coSpaces 4 - 6 present in response</td>
    </tr>
    <tr>
        <td>20</td>
        <td>10</td>
        <td></td>
        <td>coSpaces 20 - 27 present in response. (The Acano server limited its response to 8 entries despite the requestor allowing up to 10.)</td>
    </tr>
</table>

#### Individual object level
If the GET method is performed at the Individual object level, full information about just that one object will be returned. For example, after the unique ID of a coSpace has been learnt via a (potentially filtered) GET of the `/coSpaces` node, a subsequent GET of the `/coSpaces/<coSpace id>` node would return expanded information about just that one coSpace, for example how many members it has, and when it was last activated.

#### HTTP specifics
GET methods contain the complete node location and any parameters specific to the retrieval being performed in the URI supplied by the API user. For example, to retrieve basic information on the first “N” coSpaces, the URI would be:

`/api/v1/coSpaces`

whereas to list just those whose name includes “sales”, the GET would be performed on:
`/api/v1/coSpaces?filter=sales`

If a GET method has been successful and yields a “200 OK” response, the Acano server returns the retrieved information as “text/xml” body data.

#### How GET methods are detailed in this document
For each GET method at the Collections level the following information is provided:
* The node it operates on
* A table of form parameters, such as filter, offset and limit mentioned above, some of which may be optional. Mandatory parameters are marked with an asterisk (*)
* A table showing the returned information

Both tables show the format of the parameter (e.g. `ID` or `string`) or the possible values (e.g. `true`|`false`)

For each GET method at the Individual level the following information is provided:
* The node it operates on
* A table showing the returned information

The form parameters are those for the Collections level, unless otherwise indicated.

### POST Methods
POST methods create new objects; for example, to create a new configured coSpace or dial plan rule. Using a POST method to create a new call leg associated with a coSpace is the way to make a new outbound SIP connection.

#### HTTP specifics
Most POST methods require some parameters to be supplied: for example, creation of a coSpace requires the new coSpace’s name to be specified, and a new call leg can only be created if the remote party’s address is known. Such parameters must be supplied by the initiator of the POST method via the standard HTTP “x-www-form- urlencoded” format, as used by “\<form\>” elements in an HTML document.

If a POST method has been successful in adding a new object to the hierarchy, that object’s id, and its position within the hierarchy are returned in the “Location” field of the response.

#### How POST methods are detailed in this document
For each POST method the following information is provided:
* The node it operates on
* A table of form parameters, some of which may be optional. Mandatory parameters are marked with an asterisk (*)
* The format of each parameter (e.g. `ID` or `string`) or the possible values (e.g. `true`|`false`). If appropriate the default value of a parameter (the value used if you do not specify a parameter) is shown in **bold** (e.g. `true`|`false`).

### PUT Methods
PUT methods modify existing objects; for example, changing the name of a coSpace, muting a specific call leg or changing the layout.

In general, when using PUT in an object:
* omit a parameter to leave its value unchanged
* use a parameter with a new value to change to this value. Supply an empty value to unset a value. For example, to remove a tenant association from a coSpace, modify that coSpace with a parameter set including “tenant=”.

#### HTTP specifics
Parameters for a request must be supplied in “x-www-form-urlencoded” format.

#### How PUT methods are detailed in this document
Each PUT method is in the same section as the POST method for the same object e.g. creating and modifying a coSpace are dealt with together. Form parameters for modifying an object (PUT) are only noted if they differ from the POST method; for example, for callLegs.

### DELETE Methods
A DELETE method removes an individual object from the hierarchy; for example, disconnecting a call leg or disassociating a user from a coSpace so that the user is no longer a member.

Therefore the DELETE method is typically performed at the Individual level e.g. `DELETE on /api/v1/coSpace/<id>/accessMethods/<id>`

The object’s ID is known either from a previous retrieval (GET) method at the Collections level or from the “Location” field in the response to a previous creation (PUT) method. (coSpace can be deleted at the Collections level.)

If the object is removed successfully, the Acano server sends a “200 OK” response.

Because of the relative simplicity of this method, it is not detailed elsewhere in this document – with the exception of deleting chat messages.

### Failure Reasons
The following "failureDetails" codes can be returned by the API for any of the above methods, in the form in response to a user error:
`<failureDetails><tenantDoesNotExist /></failureDetails>`

<table>
    <tr>
        <th>Reason code</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>accessMethodDoesNotExist</td>
        <td>You tried to modify or remove an accessMethod using an ID that did not correspond to a valid access method</td>
    </tr>
    <tr>
        <td>callBrandingProfileDoesNotExist</td>
        <td>You tried to modify or remove a call branding profile using an ID that did not correspond to a valid call branding profile</td>
    </tr>
    <tr>
        <td>callBridgeDoesNotExist</td>
        <td>You tried to modify or remove a configured clustered Call Bridge using an ID that did not correspond to a valid clustered Call Bridge</td>
    </tr>
    <tr>
        <td>callDoesNotExist</td>
        <td>You tried to perform a method on a call object using an ID that did not correspond to a currently active call</td>
    </tr>
    <tr>
        <td>callRecordingCannotBeModified</td>
        <td>You tried to start/stop recording a call that cannot be modified. Present from R1.9</td>
    </tr>
    <tr>
        <td>callLegCannotBeDeleted</td>
        <td>You tried to delete a call leg that can't be deleted. Present from R1.8</td>
    </tr>
    <tr>
        <td>callLegDoesNotExist</td>
        <td>You tried to perform a method on a call leg object using an ID that did not correspond to a currently active call leg</td>
    </tr>
    <tr>
        <td>callLegProfileDoesNotExist</td>
        <td>You tried to modify or remove a callLegProfile using an ID that did not correspond to a valid call leg profile</td>
    </tr>
    <tr>
        <td>callProfileDoesNotExist</td>
        <td>You tried to modify or remove a callProfile using an ID that is not valid</td>
    </tr>
    <tr>
        <td>cdrReceiverDoesNotExist</td>
        <td>You tried to modify or remove a CDR receiver using an ID that did not correspond to a valid CDR receiver. Present from R1.8</td>
    </tr>
    <tr>
        <td>coSpaceDoesNotExist</td>
        <td>You tried to modify or remove a coSpace using an ID that did not correspond to a valid coSpace on the system</td>
    </tr>
    <tr>
        <td>coSpaceUserDoesNotExist</td>
        <td>You tried to modify or remove a coSpace user using an ID that did not correspond to a valid coSpace user</td>
    </tr>
    <tr>
        <td>databaseNotReady</td>
        <td>You tried a method (e.g. initiation of an LDAP sync method) before the database was ready</td>
    </tr>
    <tr>
        <td>directorySearchLocationDoesNotExist</td>
        <td>You tried to reference, modify or remove a directory search location using an ID that did not correspond to a valid directory search location. Present from R1.8</td>
    </tr>
    <tr>
        <td>dtmfProfileDoesNotExist</td>
        <td>You tried to reference, modify or remove a DTMF profile using an ID that did not correspond to a valid DTMF profile</td>
    </tr>
    <tr>
        <td>duplicateCallBridgeName</td>
        <td>You tried to create or modify a clustered Call Bridge to use a name that would clash with an existing configured clustered Call Bridge</td>
    </tr>
    <tr>
        <td>duplicateCoSpaceId</td>
        <td>You tried to create or modify a coSpace call ID to use a call ID that clashed with one used by another coSpace</td>
    </tr>
    <tr>
        <td>duplicateCoSpaceUri</td>
        <td>You tried to create or modify a coSpace to use a URI that clashed with one that corresponds to another coSpace. (Two coSpaces can't share the same URI, because the Acano server must be able to uniquely resolve an incoming call to a coSpace URI)</td>
    </tr>
    <tr>
        <td>duplicateCoSpaceSecret</td>
        <td>You tried to modify a coSpace, or create or modify a coSpace access method, using a secret that clashed with one that is already used by that coSpace or one of its access methods</td>
    </tr>
    <tr>
        <td>forwardingDialPlanRuleDoesNotExist</td>
        <td>You tried to modify or remove an forwarding dial plan rule using an ID that did not correspond to a valid forwarding dial plan rule</td>
    </tr>
    <tr>
        <td>inboundDialPlanRuleDoesNotExist</td>
        <td>You tried to modify or remove an inbound dial plan rule using an ID that did not correspond to a valid inbound dial plan rule</td>
    </tr>
    <tr>
        <td>inboundDialPlanRuleUriConflict</td>
        <td>You tried to make modifications to an inbound dial plan rule which would have caused a URI conflict. For example, this can happen if you try to add a rule which matches multiple tenants and more than one tenant has a coSpace with the same URI</td>
    </tr>
    <tr>
        <td>invalidOperation</td>
        <td>You tried an operation which isn't supported; for example, you attempted to POST to /api/v1/system/profiles or issue a DELETE for a configured user generated from an LDAP sync</td>
    </tr>
    <tr>
        <td>invalidVersion</td>
        <td>You attempted an operation with an invalid API version. Present from R1.8</td>
    </tr>
    <tr>
        <td>ivrBrandingProfileDoesNotExist</td>
        <td>You tried to modify or remove an IVR branding profile object using an ID that did not correspond to a valid IVR branding profile on the system</td>
    </tr>
    <tr>
        <td>ivrDoesNotExist</td>
        <td>You tried to modify or remove an IVR object using an ID that did not correspond to a valid IVR on the system</td>
    </tr>
    <tr>
        <td>ivrUriConflict</td>
        <td>You tried to make modifications to an IVR object which would have caused a URI conflict</td>
    </tr>
    <tr>
        <td>ldapMappingDoesNotExist</td>
        <td>You tried to modify or remove an LDAP mapping using an ID that did not correspond to a valid LDAP mapping</td>
    </tr>
    <tr>
        <td>ldapServerDoesNotExist</td>
        <td>You tried to modify or remove an LDAP server using an ID that did not correspond to a valid LDAP server</td>
    </tr>
    <tr>
        <td>ldapSourceDoesNotExist</td>
        <td>You tried to modify or remove an LDAP source using an ID that did not correspond to a valid LDAP source</td>
    </tr>
    <tr>
        <td>ldapSyncCannotBeCancelled</td>
        <td>You tried to cancel an LDAP synchronization that has either started or completed – only LDAP synchronization methods that have not started yet can be cancelled</td>
    </tr>
    <tr>
        <td>ldapSyncDoesNotExist</td>
        <td>You tried to query or cancel an LDAP synchronization with an ID that did not correspond to a valid LDAP synchronization</td>
    </tr>
    <tr>
        <td>messageDoesNotExist</td>
        <td>You tried to remove a coSpace message using an ID that did not correspond to a valid coSpace message</td>
    </tr>
    <tr>
        <td>outboundDialPlanRuleDoesNotExist</td>
        <td>You tried to modify or remove an outbound dial plan rule using an ID that did not correspond to a valid outbound dial plan rule</td>
    </tr>
    <tr>
        <td>parameterError</td>
        <td>One or more parameters in a request were found to be invalid. Supporting parameter and error values give more detail about the failure</td>
    </tr>
    <tr>
        <td>participantLimitReached</td>
        <td>You tried to add a new participant beyond the maximum number allowed for the call</td>
    </tr>
    <tr>
        <td>recorderDoesNotExist</td>
        <td>You tried to modify or remove a recorder using an ID that did not correspond to a valid recorder. Present from R1.9</td>
    </tr>
    <tr>
        <td>tenantDoesNotExist</td>
        <td>You tried to modify or remove a tenant using an ID that did not correspond to a valid tenant</td>
    </tr>
    <tr>
        <td>tenantGroupCoSpaceIdConflict</td>
        <td>Your request to remove or use a tenant group would have resulted in a coSpace ID conflict. Present from R1.8</td>
    </tr>
    <tr>
        <td>tenantGroupDoesNotExist</td>
        <td>You tried to modify, remove or use a tenant group that does not exist. Present from R1.8</td>
    </tr>
    <tr>
        <td>tenantParticipantLimitReached</td>
        <td>You tried to add a new participant beyond the maximum number allowed for the owning tenant</td>
    </tr>
    <tr>
        <td>tooManyCdrReceivers</td>
        <td>You tried to add a new CDR receiver when the maximum number were already present. R1.8 supports up to 2 CDR receivers</td>
    </tr>
    <tr>
        <td>tooManyLdapSyncs</td>
        <td>A method to create a new LDAP synchronization method failed. Try again later</td>
    </tr>
    <tr>
        <td>unrecognizedObject</td>
        <td>There are elements in the URI you are accessing that are not recognized; e.g, you tried to perform a GET on /api/v1/system/profile rather than (the correct) /api/v1/system/profiles</td>
    </tr>
    <tr>
        <td>userDoesNotExist</td>
        <td>You tried to modify or remove a user using an ID that did not correspond to a valid user</td>
    </tr>
    <tr>
        <td>userProfileDoesNotExist</td>
        <td>You tried to modify a user profile using an ID that did not correspond to a valid user profile</td>
    </tr>
</table>

## Example Requests and Responses for Specific Methods [/sample]

### Retrieval of Current Active Calls [GET /api/v1/calls]

As described in Section 4.1, retrieval methods using GET involve no body content posted by the retriever. If the request is valid, the Acano server returns XML response data.

+ Request
    + Headers

            Authorization: Basic Ym9iOmJ1aWxkZXI=

+ Response 200 (text/xml)
    + Headers

            Connection: close
    
    + Body
    
            <?xml version="1.0"?>
            <calls total="1">
            <call id="527089d6-6581-4331-8417-971c05c9e274">
            <name>Sales coSpace</name>
            <coSpace>2dcf2b7a-3410-4066-b638-46273698d469</coSpace>
            </call>
            </calls>


### Creating a New Call Leg SIP dial out to 10.1.144.129 [POST /api/v1/callLegs]

+ Request
    + Headers

            Authorization: Basic Ym9iOmJ1aWxkZXI=
            Content-Type: application/x-www-form-urlencoded

    + Body

            remoteParty=10.1.144.129

+ Response 200
    + Headers

            Location: /api/v1/callLegs/5a3b907a-7641-42fb-ae8c- b3424a3e923f
            Connection: close

# Group coSpace Related Methods

---
**Note:** From release 1.9, coSpace has been renamed as space. Although the Cisco Meeting App and other Cisco Meeting Server guides refer to
"spaces" rather than "coSpaces", the API still uses /coSpace objects. The Web Admin
interface has been changed to refer to "spaces".

---

This chapter details the API methods related to management of coSpaces. The chapter covers:
* retrieving coSpaces
* creating and modifying a coSpace
* retrieving detailed information about a single coSpace
* retrieving the members of a coSpace
* adding and modifying a coSpace member
* posting to the message board of a coSpace
* deleting messages from a coSpace message board
* retrieving coSpace access methods
* creating and modifying coSpace access methods
* calling out from a coSpace
* bulk creating, updating, and deleting coSpaces
* coSpace diagnostics

## Retrieving coSpaces [GET /coSpaces/{?offset,limit,filter,tenantFilter,callLegProfileFilter}]
GET method on the `/coSpaces` node

The response includes the total count of the number of coSpaces present which match the filter if provided, irrespective of the number returned within the response. (With no filter, this value is the total number of configured coSpaces).

TODO: Response is structured as a top-level \<coSpaces total=”N”\> tag with potentially multiple \<coSpace\> elements within it.

<coSpace> elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>coSpace id</td>
        <td>ID</td>
        <td>The “ID” value returned in the opening tag is a unique identifier for the coSpace, and can be used for future modify / delete / query methods on that coSpace</td>
    </tr>
    <tr>
        <td>name</td>
        <td>name</td>
        <td>The numeric ID that a user would enter at the IVR (or via a web client) to connect to this coSpace</td>
    </tr>
    <tr>
        <td>uri</td>
        <td>String</td>
        <td>The URI that a SIP system would use to dial in to this coSpace</td>
    </tr>
    <tr>
        <td>secondaryUri</td>
        <td>String</td>
        <td>The secondary URI for this coSpace – this provide the same functionality as the “uri” parameter, but allows more than one URI to be configured for a coSpace</td>
    </tr>
    <tr>
        <td>callId</td>
        <td>Number</td>
        <td>The numeric ID that a user would enter at the IVR (or via a web client) to connect to this coSpace</td>
    </tr>
    <tr>
        <td>tenant</td>
        <td>ID</td>
        <td>If provided, associates the specified call leg profile with this tenant</td>
    </tr>
    <tr>
        <td>autoGenerated</td>
        <td>bool</td>
        <td>Whether this coSpace has been added automatically or manually. true - this coSpace has been added automatically as part of an LDAP sync operation. therefore it is not possible, to remove it except by modifying the parameters of the sync operation -- false - this coSpace has been added either via an API method or by using Cisco Meeting App; it can be modified or removed via the API</td>
    </tr>
</table>

+ Parameters
    + offset (number, optional)
        An "offset" and "limit" can be supplied to retrieve coSpaces other than the first “page" in the notional list (see Section 4.1.2).
    + limit (number, optional)
        An "offset" and "limit" can be supplied to retrieve coSpaces other than the first “page" in the notional list (see Section 4.1.2).
    + filter (string, optional)
        Supply “filter=`<string`>” in the URI to return just those coSpaces that match the filter
    + tenantFilter (ID, optional) - Supply tenantFilter=<tenant id> to return just those coSpaces associated with that tenant
    + callLegProfileFilter (ID, optional)
        Supply callLegProfileFilter=`<call leg profile id>` to return just those coSpaces using that call leg profile

+ Request
    + Headers

            Authorization: Basic Ym9iOmJ1aWxkZXI=

+ Response 200 (text/xml)
    + Headers

            Connection: close
    
    + Body
    
            <?xml version="1.0"?>
            <coSpaces total="1">
            <coSpace id="527089d6-6581-4331-8417-971c05c9e274">
            <name>Sales coSpace</name>
            </coSpace>
            </coSpaces>

## Creating and Modifying a coSpace [POST /coSpace]
* Creating: POST method to the `/coSpaces` node. If the coSpace was created successfully, a “200 OK” response is received, and the “Location” header contains the ID for the new coSpace
* Modifying: PUT method on a `/coSpaces/<coSpaceId>` node

---
**Note:** You can also use this PUT to modify the values of a coSpace created in an Acano Client. For example, the coSpace will have been created with the cdrTag of the user who created it but you can change that value with an API call. (This is unlike the cdrTag of an automatically generated coSpace, which cannot be updated with an API call).

---

<table>
  <tr>
    <th>Parameters</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>name</td>
    <td>String</td>
    <td>The human-readable name that will be shown on clients’ UI for this coSpace</td>
  </tr>
  <tr>
    <td>uri</td>
    <td>URI user part</td>
    <td>The URI that a SIP system would use to dial in to this coSpace</td>
  </tr>
  <tr>
    <td>secondaryUri</td>
    <td>URI user part</td>
    <td>The secondary URI for this coSpace – this provide the same functionality as the “uri” parameter, but allows more than one URI to be configured for a coSpace</td>
  </tr>
  <tr>
    <td>callId</td>
    <td>String</td>
    <td>The numeric ID that a user would enter at the IVR (or via a web client) to connect to this coSpace</td>
  </tr>
  <tr>
    <td>cdrTag</td>
    <td>String</td>
    <td>Up to 100 characters of free form text to identify this coSpace in a CDR; when a "callStart" CDR is generated for a call associated with this coSpace, this tag will be written (as "cdrTag") to the callStart CDR. See the Cisco Meeting Server CDR Reference for details. The cdrTag can be modified in a PUT method.</td>
  </tr>
  <tr>
    <td>passcode</td>
    <td>String</td>
    <td>The security code for this coSpace</td>
  </tr>
  <tr>
    <td>defaultLayout</td>
    <td>allEqual| speakerOnly| telepresence| stacked|allEqualQuarters|allEqualNinths|allEqualSixteenths| allEqualTwentyFifths|onePlusFive|onePlusSeven|onePlusNine| automatic|onePlusN</td>
    <td>The default layout to be used for new call legs in this coSpace. See Default layout options for the difference in naming between the API and the Web Admin interface</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>If provided, associates the specified tenant with this coSpace</td>
  </tr>
  <tr>
    <td>callLegProfile</td>
    <td>ID</td>
    <td>If provided, associates the specified call leg profile with this coSpace</td>
  </tr>
  <tr>
    <td>callProfile</td>
    <td>ID</td>
    <td>If provided, associates the specified call profile with this coSpace</td>
  </tr>
  <tr>
    <td>callBrandingProfile</td>
    <td>ID</td>
    <td>If provided, associates the specified call branding profile with this coSpace</td>
  </tr>
  <tr>
    <td>requireCallId</td>
    <td>true|false</td>
    <td>If this value is supplied as true, and no callId is currently specified for the coSpace, a new auto-generated call Id will be assigned</td>
  </tr>
  <tr>
    <td>secret</td>
    <td>String</td>
    <td>If provided, sets the security string for this coSpace. If absent, a security string is chosen automatically if the coSpace has a callId value. This is the security value associated with the coSpace that needs to be supplied with the callId for guest access to the coSpace.</td>
  </tr>
  <tr>
    <td>regenerateSecret</td>
    <td>true|false</td>
    <td>If provided as true - a new security value is generated for this coSpace and the former value is no longer valid (for instance, any hyperlinks including it will cease to work)If provided as false - do not generate a new secret value for this coSpace; this has no effectThis parameter is only valid for the modify (PUT) case.</td>
  </tr>
  <tr>
    <td>nonMemberAccess</td>
    <td>true|false</td>
    <td>Controls whether non-members of the coSpace are able to have access to the coSpace. If not provided, behaviour defaults to true. (From version 2.0).</td>
  </tr>
  <tr>
    <td>ownerJid</td>
    <td>String</td>
    <td>Indicates the coSpace is owned by the user with the specified JID. (From version 2.0).</td>
  </tr>
  <tr>
    <td>streamUrl</td>
    <td>URL</td>
    <td>Indicates where the coSpace is streamed to, if streaming is initiated. (From version 2.1).</td>
  </tr>
  <tr>
    <td>ownerAdGuid</td>
    <td>ID</td>
    <td>If provided, the coSpace will be owned by the user with the given AD GUID. (From version 2.1).</td>
  </tr>
  <tr>
    <td>meetingScheduler</td>
    <td>String</td>
    <td>Name of person (not necessarily a user) who scheduled the creation of this coSpace, which if set is propagated to any call objects as the “ownerName” field. (From version 2.2).</td>
  </tr>
</table>

>>Note: You can also use this PUT to modify the values of a coSpace created in a Cisco Meeting App. For example, the coSpace will have been created with the cdrTag of the user who created it but you can change that value with an API call. (This is unlike the cdrTag of an automatically generated coSpace, which cannot be updated with an API call.)

#### Default layout options
The naming of the defaultLayout options varies between the API and the Web Admin Interface **Configuration > coSpaces** page. The “mapping" is shown in the table below.

<table>
    <tr>
        <th>API</th>
        <th>Web Admin Interface</th>
    </tr>
    <tr>
        <td>allEqual</td>
        <td>all equal</td>
    </tr>
    <tr>
        <td>speakerOnly</td>
        <td>full screen</td>
    </tr>
    <tr>
        <td>telepresence</td>
        <td>overlay (the loudest speaker is in a large pane and a number of the previous speakers are in small panes which overlay the bottom of the loudest speaker’s pane).
        </td>
    </tr>
    <tr>
        <td>stacked</td>
        <td>stack (the loudest speaker is in a large pane and a number of the previous speakers are in small panes below the loudest speaker’s pane).
        </td>
    </tr>
</table>

### Secondary coSpace URIs
Per coSpace, there is an optional secondaryUri parameter as shown above. This allows flexibility; for example, numeric dialing in addition to a name.
* When creating or modifying a coSpace (see the previous section) you can supply a secondaryUri parameter in addition to the form parameters in the table above e.g. uri
* The secondary URI will be checked for validity and uniqueness in the same way as the uri, and if valid, establishes a new URI by which the coSpace can be reached
* When retrieving information on an individual coSpace (see below) the secondaryUri value will be returned, if it is defined for this coSpace
* The secondaryUri can be created automatically during an LDAP sync if the new LDAP mapping parameter is used. See coSpaceSecondaryUriMapping

### Auto-generation of coSpace callID
A new auto-generated Call Id is assigned if "requireCallId=true" is set via a create (POST) or modify (PUT) method on the coSpace, and no callId is currently specified for the coSpace.

+ Request (application/x-www-form-urlencoded)
    + Attributes
        + name: `PLACEHOLDER` (string) - The human-readable name that will be shown on clients’ UI for this coSpace
        + uri: `PLACEHOLDER` (URI user part) - The URI that a SIP system would use to dial in to this coSpace
        + secondaryUri (URI user part, optional)- The secondary URI for this coSpace – this provide the same functionality as the “uri” parameter, but allows more than one URI to be configured for a coSpace
        + callId (ID, optional) - The numeric ID that a user would enter at the IVR (or via a web client) to connect to this coSpace
        + cdrTag (string, optional) - Up to 100 characters of free form text to identify this coSpace in a CDR; when a "callStart" CDR is generated for a call associated with this coSpace, this tag will be written (as "cdrTag") to the callStart CDR. See the Acano solution CDR Reference for details. The cdrTag can be modified in a PUT method
        + passcode (string, optional) - The security code for this coSpace
        + tenant (ID, optional) - If provided, associates the specified tenant with this coSpace
        + callLegProfile (ID, optional) - If provided, associates the specified call leg profile with this coSpace
        + callProfile (ID, optional) - If provided, associates the specified call profile with this coSpace
        + callBrandingProfile (ID, optional) - If provided, associates the specified call branding profile with this coSpace
        + requireCallId: `true` (boolean) - If this value is supplied as true, and no callId is currently specified for the coSpace, a new auto-generated call Id will be assigned
        + secret (string, optional) - If provided, sets the security string for this coSpace. If absent, a security string is chosen automatically if the coSpace has a callId value. This is the security value associated with the coSpace that needs to be supplied with the callId for guest access to the coSpace. Present from R1.7 onwards
        + regenerateSecret: `false` (boolean) - If provided as true - a new security value is generated for this coSpace and the former value is no longer valid (for instance, any hyperlinks including it will cease to work) If provided as false - do not generate a new secret value for this coSpace; this has no effect. This parameter is only valid for the modify (PUT) case. Present from R1.7 onwards
        + defaultLayout (defaultLayout) - The default layout to be used for new call legs in this coSpace. See Default layout options for the difference in naming between the API and the Web Admin interface
        + nonMemberAccess: `true` (boolean) - Controls whether non-members of the coSpace are able to have access to the coSpace. If not provided, behaviour defaults to true. (From version 2.0).
        + ownerJid (string) - Indicates the coSpace is owned by the user with the specified JID. (From version 2.0).
        + streamUrl (URL) - Indicates where the coSpace is streamed to, if streaming is initiated. (From version 2.1).
        + ownerAdGuid (ID) - If provided, the coSpace will be owned by the user with the given AD GUID. (From version 2.1).
        + meetingScheduler (string) - Name of person (not necessarily a user) who scheduled the creation of this coSpace, which if set is propagated to any call objects as the “ownerName” field. (From version 2.2).

    + Body

            name=MyNewCoSpace

+ Response 200 (text/xml)
    + Body

            <?xml version="1.0"?>
            <coSpaces total="1">
            <coSpaceId="527089d6-6581-4331-8417-971c05c9e274">
            <name>MyNewCoSpace</name>
            </coSpace>
            </coSpaces>

## Retrieving Detailed Information about a Single coSpace [GET /coSpaces/{coSpaceId}]
GET method performed on a `/coSpaces/<coSpaceId>` node. If the coSpace ID supplied is valid, a “200 OK” response is received, containing a single `<coSpaceId=<ID>` object with data as described above for the creating and modifying case.

In addition to the data in common with the create and modify methods, retrieved information about a single coSpace will also include:
* a count of the number of additional access methods for that coSpace, if any have been configured, as a numeric `numAccessMethods` value
* the `autoGenerated` value, which shows whether the coSpace was added automatically as part of an LDAP sync operation

The following information is not included:
* `requireCallID`

>>Note: From 2.1, a “meetingEntryDetail” node is added to allow retrieval of entry details for a specific coSpace meeting. Perform a GET on `/coSpaces/<coSpace id>/meeting EntryDetail`.
Response values are "uri" and "callId".

+ Parameters
    + coSpaceId

+ Response 200
    + Body

            <?xml version="1.0"?>
            <coSpace id="527089d6-6581-4331-8417-971c05c9e274">
            <name>MyNewCoSpace</name>
            </coSpace>

### Retrieving entry details for a specific coSpace [GET /coSpaces/<coSpaceid>/meetingEntryDetail]

From version 2.1, a `meetingEntryDetail` node is added to allow retrieval of entry details for a specific coSpace meeting. Perform a GET on /coSpaces/<coSpace id>/meeting EntryDetail. Response values are uri and callId.

+ Response 200
    + Headers

            TODO:URI and callId

## coSpace Member Methods [/coSpaces/{coSpaceId}/coSpaceUsers/{?filter,offset,limit,callLegProfileFilter}]
## Retrieving the members of a coSpace [GET]
GET method on a `/coSpaces/<coSpaceId>/coSpaceUsers` node.

The response includes the total count of coSpace users configured for the queried coSpace which match the filter, irrespective of the number returned within the response. (With no filter, this value is the total number of users associated with the coSpace).

Response is structured as a top-level `<coSpaceUsers total=”N”>` tag with potentially multiple `<coSpaceUser>` elements within it.
* `<coSpaceUser>` elements follow the general form on the left.
* `<coSpaceUser>` elements have their own ID and also contain an ID for the user.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>coSpaceUser id</td>
        <td>ID</td>
        <td>The “ID” value returned in the opening tag is a unique identifier for the coSpace, and can be used for future modify / delete / query methods on that coSpace</td>
    </tr>
    <tr>
        <td>userJid</td>
        <td>String</td>
        <td>The XMPP ID of the user</td>
    </tr>
    <tr>
        <td>userId</td>
        <td>ID</td>
        <td>Identifies the user with no relationship to any coSpace association, and may or may not be the same as the ID of the “coSpaceUser” object.</td>
    </tr>
    <tr>
        <td>autoGenerated</td>
        <td>bool</td>
        <td>Whether this coSpace has been added automatically or manually.<ul><li> true - this coSpace has been added automatically as part of an LDAP sync operation. therefore it is not possible, to remove it except by modifying the parameters of the sync operation</li><li>false - this coSpace has been added either via an API method or by using an Acano client; it can be modified or removed via the API</li></ul></td>
    </tr>
     <tr>
    <th>callLegProfile</th>
    <th>ID</th>
    <th>If provided, associates the specified call leg profile with this coSpace user</th>
  </tr>
  <tr>
    <td>canDestroy</td>
    <td>true|false</td>
    <td>Whether this user is allowed to delete the coSpace.</td>
  </tr>
  <tr>
    <td>canAddRemoveMember</td>
    <td>true|false</td>
    <td>Whether this user is allowed to add or remove other members of the coSpace.</td>
  </tr>
  <tr>
    <td>canChangeName</td>
    <td>true|false</td>
    <td>Whether this user is allowed to change the name of the coSpace.</td>
  </tr>
  <tr>
    <td>canChangeUri</td>
    <td>true|false</td>
    <td>Whether this user is allowed to change the URI of the coSpace</td>
  </tr>
  <tr>
    <td>canChangeCallId</td>
    <td>true|false&gt;</td>
    <td>Whether this user is allowed to change the Call ID of the coSpace</td>
  </tr>
  <tr>
    <td>canChangePasscode</td>
    <td>true|false</td>
    <td>Whether this user is allowed to change the passcode of the coSpace</td>
  </tr>
  <tr>
    <td>canPostMessage</td>
    <td>true|false</td>
    <td>Whether this user is allowed to write messages in the coSpace</td>
  </tr>
  <tr>
    <td>canRemoveSelf</td>
    <td>true|false</td>
    <td>Whether this user is allowed to remove himself from the coSpace</td>
  </tr>
  <tr>
    <td>canDeleteAllMessages</td>
    <td>true|false</td>
    <td>Whether this user is allowed to delete all messages from the coSpace message board</td>
  </tr>
  <tr>
    <td>canChangeNonMemberAccessAllowed</td>
    <td>true|false</td>
    <td>Whether this user is allowed to change the “non-member access allowed setting” of the coSpace. From version 2.3.</td>
  </tr>
</table>


+ Parameters
    + coSpaceId (ID)
    + filter (string, optional)
        Supply filter=`<string`> in the URI to return just those coSpace users that match the filter
    + offset (number, optional)
        An "offset" and "limit" can be supplied to retrieve coSpaces other than the first "page" in the notional list (see Section 4.1.2).
    + limit (number, optional)
        An "offset" and "limit" can be supplied to retrieve coSpaces other than the first "page" in the notional list (see Section 4.1.2).
    + callLegProfileFilter (ID, optional)
        Supply callLegProfileFilter=<ID> to return just members using that call leg profile

+ Response 200
    + Body

            <?xml version="1.0"?>
            <coSpaceUser id="527089d6-6581-4331-8417-971c05c9e274">
            <userJid>darth@empire.net</userJid>
            <userId>"de41b1e5-7a56-4894-a5c1-493df2086799"</userId>
            <autoGenerated>"true"</autoGenerated>
            </coSpaceUser>

## Adding and modifying a coSpace member [POST]
* Adding: POST method to a `/coSpaces/<coSpaceId>/coSpaceUsers` node
* Modifying: PUT method performed on a `/coSpaces/<coSpaceId>/coSpaceUsers/<coSpaceUser ID>` node. 
The parameters that you can modify are listed above, with the exception of `userJid`

If the member was added successfully, a “200 OK” response is received, and the “Location” header in the response contains the new user ID.

#### coSpace Permissions
Members with `canAddRemoveMember` set to true can add other users as members of the coSpace from an Acano client (depending on client type and version). New members have identical permissions to the member who added them, except in one case: when the original member also has canRemoveSelf set to false.

Members who cannot remove themselves from the coSpace (as controlled by `canRemoveSelf`) should not be able to create a second member in order to delete their own membership. Therefore any member created from an Acano client by another member in this situation will have `canAddRemoveMember` set to false and `canRemoveSelf` set to true (see the table below). All other permissions are copied from the original member.

<table>
    <tr>
        <th colspan="2">Original user permission</th>
        <th colspan="2">Created user permissions</th>
        <th>Notes</th>
    </tr>
    <tr>
        <th>canAddRemoveMember</th>
        <th>canRemoveSelf</th>
        <th>canAddRemoveMember</th>
        <th>canRemoveSelf</th>
        <th></th>
    </tr>
    <tr>
        <td>False</td>
        <td>NA</td>
        <td>NA</td>
        <td>NA</td>
        <td>They can’t add another user</td>
    </tr>
    <tr>
        <td>True</td>
        <td>True</td>
        <td>True</td>
        <td>True</td>
        <td>All permissions copied</td>
    </tr>
    <tr>
        <td>True</td>
        <td>False</td>
        <td>False</td>
        <td>True</td>
        <td>All other permissions copied</td>
    </tr>
</table>

Using the API provides more flexibility: it is possible to create coSpaces with members who cannot remove themselves, but who can be removed by another member. Members can always be removed via the API.

Auto-generated members (created by an LDAP sync) have auto-generated permissions because it makes no sense to allow them to make changes that will be overwritten by the next LDAP sync. Therefore, for these users the following parameters are always set to false: `canDestroy`, `canChangeName`, `canChangeUri`, `canChangeCallId` and `canRemoveSelf`. 
The other “can” parameters are set to true. Note that changing any of these settings for an auto-generated member via the API will only have a temporary effect and will be overwritten at the next LDAP sync: you could discover whether a member is auto-generated – see the next section.

Finally, if a user creates a coSpace from the Cisco Meeting App, then `canDeleteAllMessages`is set to false for all members, and all other permissions are set to true by default for all members.

<table>
  <tr>
    <th>Permission</th>
    <th colspan="3">coSpace created by:</th>
  </tr>
  <tr>
    <td></td>
    <td>Cisco Meeting App</td>
    <td>LDAP sync</td>
    <td>API</td>
  </tr>
  <tr>
    <td>canDestroy</td>
    <td>true</td>
    <td>false</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canAddRemoveMember</td>
    <td>true</td>
    <td>true</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canChangeName</td>
    <td>true</td>
    <td>false</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canChangeUri</td>
    <td>true</td>
    <td>false</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canChangeCallId</td>
    <td>true</td>
    <td>false</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canChangePasscode</td>
    <td>true</td>
    <td>true</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canPostMessage</td>
    <td>true</td>
    <td>true</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canRemoveSelf</td>
    <td>true</td>
    <td>false</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canDeleteAllMessages</td>
    <td>false</td>
    <td>true</td>
    <td>false</td>
  </tr>
  <tr>
    <td>canChangeNonMemberAccessAllowed</td>
    <td>true</td>
    <td>false</td>
    <td>true</td>
  </tr>
</table>

+ Parameters
    + coSpaceId (ID)

+ Attributes (coSpaceMember)

+ Response 200
    + Headers

            Location: ID
            
## Retrieving Information on a coSpace member [GET /coSpaces/{coSpaceId}/coSpaceUsers/{coSpaceUserId}]
GET method performed on a `/coSpaces/<coSpaceId>/coSpaceUsers/<coSpaceUser ID>` node. If the retrieval is valid, a “200 OK” response is received, with containing a single `<coSpaceUser id=<ID>>` object with data as described above for the creating and modifying case. In addition
* the `autoGenerated` value shows whether the coSpace member was added to the coSpace automatically as part of an LDAP sync operation
* the `canDeleteAllMessages` shows whether this member is allowed to delete chat in the coSpace

+ Parameters
    + coSpaceId (ID)
    + coSpaceUserId (ID)

+ Response 200
    + Body

            <?xml version="1.0"?>
            <coSpaceUser id="527089d6-6581-4331-8417-971c05c9e274">
            <userJid>darth@empire.net</userJid>
            <userId>"de41b1e5-7a56-4894-a5c1-493df2086799"</userId>
            <autoGenerated>"true"</autoGenerated>
            </coSpaceUser>

## coSpace Chat/Message Board Methods [/coSpaces/{coSpaceId}/messages{?minAge,maxAge}]
## Posting to the message board of a coSpace [POST]
POST method performed on the `/coSpaces/<coSpaceId>/messages` node.

If successful, the message is posted to the message board and an ID for the message is returned in the `Location` field of the response header.

<table>
  <tr>
    <th>Parameters </th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>message * </td>
    <td>String</td>
    <td>The message string to be posted to the message board</td>
  </tr>
  <tr>
    <td>from </td>
    <td>String</td>
    <td>A “from” name to be shown to message board viewers as the originator of the message</td>
  </tr>
</table>

+ Parameters
    + coSpaceId (ID)

+ Attributes (message)

+ Response 200
    + Headers

            Location:ID

## Deleting messages from a coSpace message board [DELETE]
DELETE method on a `/coSpaces/<coSpace ID>/messages` node with the form parameters below which select messages by age. With no additional parameters, all messages for that coSpace will be deleted.

<table>
  <tr>
    <th>Parameters</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>minAge</td>
    <td>Number</td>
    <td>If supplied (in the URL) deletes only messages whose age is at least the specified value (in seconds)</td>
  </tr>
  <tr>
    <td>maxAge</td>
    <td>Number</td>
    <td>If supplied specifies (in the URL) an upper limit (in seconds) on the age of messages to be deleted</td>
  </tr>
</table>

+ Parameters
    + minAge (number, optional)
    + maxAge (number, optional)

+ Response 200

## Multiple coSpace Access Methods [/coSpaces/{coSpaceId}/accessMethods/{?filter,offset,limit,callLegProfileFilter}]
There are two related tables of objects:
* Access method per-coSpace, `/coSpaces/<cospace ID>/accessMethods [/<accessMethod ID>]`
* Call leg profile, `/callLegProfiles/<callLegProfile ID>`

### Access method per coSpace
Access methods define `URI` / `passcode` / `callID` combinations that can be used to access a coSpace

Optionally, Access methods can have an associated Call Leg Profile; any call leg joining via such an Access method has that Call leg profile applied to it. If the Access method has no Call leg profile but the coSpace does, then so does coSpace’s call

---
**Note:** When you send an email invitation from Cisco Meeting App to one or more people to join a coSpace or active call, only one set of `URI` / `passcode` / `callID` information is included. If the scope field for an access method is set to public then this information is used. If no access methods have a public scope then the call information from the coSpace’s own configuration is included.

---
### Call leg profile
A call leg profile can be associated with a coSpace object, making it the default call leg profile for all call legs in that coSpace (for instance, those that connect via its configured URI and secondaryUri). (The effect of the coSpace call leg profile can still be overridden by more specific overrides imposed via call leg profiles configured for additional coSpace access methods. See the Call Leg Profile section.

## Retrieving coSpace access methods [GET]

Response is a collection of `<accessMethod id=<access method id>>` objects contained within an `<accessMethods>` object

`<accessMethod>` elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>accessMethod id</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>uri</td>
        <td>String</td>
        <td>The URI to be used for dialing in via this access method</td>
    </tr>
    <tr>
        <td>callId</td>
        <td>ID</td>
        <td>The "call ID" to be used for connecting via this access method (using the IVR or Web Bridge login)</td>
    </tr>
    <tr>
        <td>passcode</td>
        <td>String</td>
        <td>A passcode required for this access method</td>
    </tr>
    <tr>
        <td>callLegProfile</td>
        <td>ID</td>
        <td>The ID of a call leg profile to apply to calls in via this access method</td>
    </tr>
</table>

+ Parameters
    + coSpaceId (ID)
    + filter (string, optional) - Supply filter=`<string`> in the URI to return just those coSpace access methods that match the filter
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve coSpaces other than the first "page" in the notional list (see Section 4.1.2)
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve coSpaces other than the first "page" in the notional list (see Section 4.1.2)
    + callLegProfileFilter (ID, optional) - Supply callLegProfileFilter=`<ID`> to return just accessMethods for coSpaces using that call leg profile

+ Response 200
    + Body

            <?xml version="1.0"?>
            <coSpaceUser id="527089d6-6581-4331-8417-971c05c9e274">
            <userJid>darth@empire.net</userJid>
            <userId>"de41b1e5-7a56-4894-a5c1-493df2086799"</userId>
            <autoGenerated>"true"</autoGenerated>
            </coSpaceUser>

## Creating and modifying coSpace access methods [POST]
* Creating: POST method to the `/coSpaces/<coSpace Id>/accessMethods` node
* Modifying: PUT method on a `/coSpaces/<coSpace Id>/accessMethods/<accessMethod id>` node

<table>
  <tr>
    <th>Parameters</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>uri</td>
    <td>URI user part</td>
    <td>The URI to be used for dialing in via this access method</td>
  </tr>
  <tr>
    <td>callId</td>
    <td>ID</td>
    <td>The "call ID" to be used for connecting via this access method (using the IVR or Web Bridge login)</td>
  </tr>
  <tr>
    <td>passcode</td>
    <td>String</td>
    <td>A passcode required for this access method</td>
  </tr>
  <tr>
    <td>callLegProfile</td>
    <td>ID</td>
    <td>The ID of a call leg profile to apply to calls in via this access method</td>
  </tr>
  <tr>
    <td>secret</td>
    <td>String</td>
    <td>If provided, sets the security string for this coSpace access method. If absent, a security string is chosen automatically if the coSpace access method has a callId value. This is the security value associated with the coSpace access method that needs to be supplied with the callId for guest access to the coSpace via this access method.</td>
  </tr>
  <tr>
    <td>regenerateSecret</td>
    <td>true|false</td>
    <td>If provided as true - a new security value is generated for this coSpace access method and the former value is no longer valid (for instance, any hyperlinks including it will cease to work)If provided as false - do not generate a new secret value for this coSpace access method; this has no effectThis parameter is only valid for the modify (PUT) case</td>
  </tr>
  <tr>
    <td> scope</td>
    <td> public|private</td>
    <td>The visibility of this coSpace access method to users of Cisco Meeting App who are members of the coSpaceIf provided as public - details of this coSpace access method can be made available to members of the coSpaceIf provided as private - details of this coSpace access method will not be made available to members of the coSpaceNote: if you set the scope to public then the Cisco Meeting App can no longer edit the coSpace details. In addition, the uri shown under the name is that from the access method.</td>
  </tr>
</table>

If the coSpace access method is created successfully, a “200 OK” response will be received, and the `Location` header in the response will contain the new coSpace access method ID.



+ Attributes (accessMethod)

+ Response 200
    + Headers

            Location:ID

## Retrieving information on an individual coSpace access method [GET /coSpaces/{coSpaceId}/accessMethods/{accessMethodId}]
GET method on a `/coSpaces/<coSpace id>/accessMethods/<access method id>` node.
If the access method ID supplied is valid, a "200 OK" response and a single `<accessMethodId=access method id>` object will be returned with data in the previous section.

+ Parameters
    + coSpaceId (ID)
    + accessMethodId (ID)

+ Response 200
    + Body

            <accessMethodId=access method id>

## Bulk creating, updating and deleting coSpaces [/coSpaceBulkParameterSets{?startIndex,endIndex}]
## Retrieving the parameter sets for creating coSpaces in bulk [GET]
GET method on `/coSpaceBulkParameterSets` node.

Response is structured as a top-level <coSpaceBulkParameterSets total=”N”> tag with potentially multiple <coSpaceBulkParameterSet> elements within it. 
<coSpaceBulkParameterSet> elements follow the general form on the left.

+ Parameters
    + startIndex (Number) - Index that coSpace mappings start from (inclusive)
    + endIndex (Number) - Index that coSpace mappings end at (inclusive)
        
+ Response 200
    + Body

            <TODO>

## Creating coSpace Bulk Parameter sets [POST]
* Creating: POST method to the `/coSpaceBulkParameterSets` node. Creates a new parameter set, see table below. Returns location of new parameter set `/cospaceBulkParameterSets/<set Id>`
* Modifying: PUT method to the `/coSpaceBulkParameterSets` node. Updates the parameters within this parameter set, but needs to be synchronized for it to take effect.

<table>
  <tr>
    <th>Parameter</th>
    <th>Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>startIndex</td>
    <td>Number</td>
    <td>Index that coSpace mappings start from (inclusive)</td>
  </tr>
  <tr>
    <td>endIndex</td>
    <td>Number</td>
    <td>Index that coSpace mappings end at (inclusive)</td>
  </tr>
  <tr>
    <td>coSpaceUriMapping</td>
    <td>String</td>
    <td>If specified, this is the mapping that describes what URIs will be used for the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set, coSpace will not have a dialable URI. Syntax: uri-mapping = [uri-component] [“$index$”] [uri-component]Where: uri-component = *( uri-character / escaped-character ) uri-character = *( unescaped-character EXCLUDING ‘@’ ) unescaped-character = any character EXCLUDING ‘$’ and ‘\’escaped-character = “\\” / “\$” ; producing ‘\’ and ‘$’ respectively.These need to be unique so if an index is not used there will be clashes, unless the field is just left completely blank .</td>
  </tr>
  <tr>
    <td>coSpaceNameMapping</td>
    <td>String</td>
    <td>If specified, this is the mapping that describes what names will be used for the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet.Syntax: name-mapping = [name-component] [“$index$”] [name-component] Where: name-component = *( unescaped-character / escaped-character ) unescaped-character = any character EXCLUDING ‘$’ and ‘\’ escaped-character = “\\” / “\$” ; producing ‘\’ and ‘$’ respectively.These are not required to be unique.</td>
  </tr>
  <tr>
    <td>coSpaceCallIdMapping</td>
    <td>String</td>
    <td>If specified, this is the mapping that describes what call IDs will be used for the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set then the coSpace will not have a callId.Syntax: id-mapping = [id-component] [“$index$”] [id-component] Where: id-component = *( unescaped-character / escaped-character )unescaped-character = any character EXCLUDING ‘$’ and ‘\’escaped-character = “\\” / “\$” ; producing ‘\’ and ‘$’ respectivelyThese need to be unique so if index is not used there will be clashes, unless the field is just left completely blank.Secrets will be autogenerated if CallIdMapping is set.</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>If specified this is the tenant to be associated with the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set then the coSpace will not be associated with a tenant.</td>
  </tr>
  <tr>
    <td>callProfile</td>
    <td>ID</td>
    <td>If specified this is the call profile to be associated with the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set then the coSpace will not be associated with a call profile.</td>
  </tr>
  <tr>
    <td>callBrandingProfile</td>
    <td>ID</td>
    <td>If specified this is the call branding profile to be associated with the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set then the coSpace will not be associated with a call branding profile.</td>
  </tr>
  <tr>
    <td>nonMemberAccess</td>
    <td>true|false</td>
    <td>Whether non-members will be able to access the bulk created coSpaces. If this parameter is not supplied in a create (POST) operation, it defaults to "true" and non members can access the coSpace.</td>
  </tr>
</table>
    
+ Attributes (coSpaceBulkParameterSets)

+ Response 200
    + Headers

            Location:ID
    + Body

            <location ID>

## Retrieving information on an individual coSpace Bulk Parameter sets [GET /coSpaceBulkParameterSets/{setId}]
GET method on `/coSpaceBulkParameterSets/<set Id>` node.

<table>
  <tr>
    <th>Parameter</th>
    <th>Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td> </td>
    <td> </td>
    <td>Response is structured as a top-level &lt;coSpaceBulkParameterSets total=”N”&gt; tag with potentially multiple &lt;coSpaceBulkParameterSet&gt; elements within it.Each &lt;coSpaceBulkParameterSet&gt; element may include the following elements.</td>
  </tr>
  <tr>
    <td>startIndex</td>
    <td>Number</td>
    <td>Index that coSpace mappings start from (inclusive)</td>
  </tr>
  <tr>
    <td>endIndex</td>
    <td>Number</td>
    <td>Index that coSpace mappings end at (inclusive)</td>
  </tr>
  <tr>
    <td>coSpaceUriMapping</td>
    <td>String</td>
    <td>If specified, this is the mapping that describes what URIs will be used for the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set, coSpace will not have a dialable URI. Syntax: uri-mapping = [uri-component] [“$index$”] [uri-component]Where: uri-component = *( uri-character / escaped-character ) uri-character = *( unescaped-character EXCLUDING ‘@’ ) unescaped-character = any character EXCLUDING ‘$’ and ‘\’escaped-character = “\\” / “\$” ; producing ‘\’ and ‘$’ respectively.These need to be unique so if an index is not used there will be clashes, unless the field is just left completely blank .</td>
  </tr>
  <tr>
    <td>coSpaceNameMapping</td>
    <td>String</td>
    <td>If specified, this is the mapping that describes what names will be used for the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet.Syntax: name-mapping = [name-component] [“$index$”] [name-component] Where: name-component = *( unescaped-character / escaped-character ) unescaped-character = any character EXCLUDING ‘$’ and ‘\’ escaped-character = “\\” / “\$” ; producing ‘\’ and ‘$’ respectively.These are not required to be unique.</td>
  </tr>
  <tr>
    <td>coSpaceCallIdMapping</td>
    <td>String</td>
    <td>If specified, this is the mapping that describes what call IDs will be used for the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set then the coSpace will not have a callId Syntax: id-mapping = [id-component] [“$index$”] [id-component] Where: id-component = *( unescaped-character / escaped-character )unescaped-character = any character EXCLUDING ‘$’ and ‘\’escaped-character = “\\” / “\$” ; producing ‘\’ and ‘$’ respectivelyThese need to be unique so if index is not used there will be clashes, unless the field is just left completely blank.Secrets will be autogenerated if CallIdMapping is set.</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>If specified this is the tenant to be associated with the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set then the coSpace will not be associated with a tenant.</td>
  </tr>
  <tr>
    <td>callProfile</td>
    <td>ID</td>
    <td>If specified this is the call profile to be associated with the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set then the coSpace will not be associated with a call profile.</td>
  </tr>
  <tr>
    <td>callBrandingProfile</td>
    <td>ID</td>
    <td>If specified this is the call branding profile to be associated with the coSpaces created with a /coSpaceBulkSync using this coSpaceBulkParameterSet. If not set then the coSpace will not be associated with a call branding profile.</td>
  </tr>
  <tr>
    <td>nonMemberAccess</td>
    <td>true|false</td>
    <td>Whether non-members will be able to access the bulk created coSpaces. If this parameter is not supplied in a create (POST) operation, it defaults to "true" and non members can access the coSpace.</td>
  </tr>
</table>

+ Parameters
    + setId (ID)

+ Response 200
    + Body

            <location ID>

## Queueing the bulk sync operations [POST /coSpaceBulkSyncs/{bulk_sync_guid}]
* Creating: POST method to the `/coSpaceBulkSyncs` node. Queues the bulk sync operations for execution as soon as possible. Returns location `/cospaceBulkSync/<bulk_sync_guid>`
* Modifying: PUT method to the `/coSpaceBulkSyncs` node not supported.

---
>**Note:** Bulk Sync will iterate between startIndex and endIndex (inclusive at both end) and expand and insert the mapping parts.
---

<table>
  <tr>
    <th>Parameter</th>
    <th>Type/Value</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>coSpaceBulkParameterSet</td>
    <td>ID</td>
    <td>Parameter set GUID that is going to be synchronised</td>
  </tr>
  <tr>
    <td>removeAll</td>
    <td>true|false</td>
    <td>If supplied, determines whether the sync will remove all entries that were created using the parameter set. Used only if you need to remove all spaces that were created previously. If set to true then no spaces will be created. If set to false, or omitted, then all spaces previously created using this parameter set will be removed and new spaces based on the new mappings will be created.If this parameter is not supplied in a create (POST) operation, it defaults to "false"</td>
  </tr>
</table>

+ Parameters
    + bulk_sync_guid (ID)

+ Attributes (coSpaceBulkParameterSets)

+ Response 200
    + Body

            <location ID>

## Retrieving the bulk sync operations [GET /coSpaceBulkSyncs/{coSpaceBulkParameterSet}]

GET method on `/coSpaceBulkSyncs` node.
Response is structured as a top-level <coSpaceBulkSyncs total=”N”> tag with potentially multiple <coSpaceBulkSync> elements within it.<coSpaceBulkSync> elements follow the general form on the left.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  
  <tr>
    <td>coSpaceBulkParameterSet</td>
    <td>ID</td>
    <td>Parameter set that was used for this bulk sync</td>
  </tr>
  <tr>
    <td>status</td>
    <td>pending| running| complete| failedCoSpaceUriConflict|failedCallIdConflict| failedIndexRangeInvalid| failedIndexRangeTooGreat|failedNoSuchParameterSet| failed</td>
    <td>Status of the sync operation:pending - the sync operation is in a queue waiting to executerunning - the sync operation is currently runningcomplete - the sync operation has successfully completedfailedCoSpaceUriConflict - the sync failed because it would involve creating a URI that conflicts with one that already existsfailedCallIdConflict - the sync failed because it would involve creating a call ID that conflicts with one that already existsfailedIndexRangeInvalid - the sync failed because the "startIndex" was greater than the "endIndex"failedIndexRangeTooGreat - the sync failed because the difference between "endIndex" and "startIndex" was too largefailedNoSuchParameterSet - the "coSpaceBulkParameterSet" refered to in the sync command did not existfailed - the sync operation failed</td>
  </tr>
  <tr>
    <td>removeAll</td>
    <td>true|false</td>
    <td>If supplied, determines whether the sync will remove all entries that were created using the parameter set. Used only to remove all spaces that were created previously. If set to true then no spaces will be created. If set to false, or omitted, then all spaces previously created using this parameter set will be removed and new spaces based on the new mappings will be created.If this parameter is not supplied in a create (POST) operation, it defaults to "false"</td>
  </tr>
</table>

+ Parameters
    + coSpaceBulkParameterSet (ID)

+ Response 200
    + Body

            <?xml version="1.0"?>
            <coSpaceUser id="527089d6-6581-4331-8417-971c05c9e274">
            <userJid>darth@empire.net</userJid>
            <userId>"de41b1e5-7a56-4894-a5c1-493df2086799"</userId>
            <autoGenerated>"true"</autoGenerated>
            </coSpaceUser>

## Retrieving a specific bulk sync operation [GET /coSpaceBulkSyncs/{coSpacebulksyncid}]
GET method on `/coSpaceBulkSyncs/<coSpacebulksyncid>` node.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td> </td>
    <td> </td>
    <td>Response is structured as a top-level &lt;coSpaceBulkSyncs total=”N”&gt; tag with potentially multiple &lt;coSpaceBulkSync&gt; elements within it.&lt;coSpaceBulkSync&gt; elements follow the general form on the left.</td>
  </tr>
  <tr>
    <td>coSpaceBulkParameterSet</td>
    <td>ID</td>
    <td>Parameter set that was used for this bulk sync</td>
  </tr>
  <tr>
    <td>status</td>
    <td>pending| running| complete| failedCoSpaceUriConflict|failedCallIdConflict| failedIndexRangeInvalid| failedIndexRangeTooGreat|failedNoSuchParameterSet| failed</td>
    <td>Status of the sync operation:pending - the sync operation is in a queue waiting to executerunning - the sync operation is currently runningcomplete - the sync operation has successfully completedfailedCoSpaceUriConflict - the sync failed because it would involve creating a URI that conflicts with one that already existsfailedCallIdConflict - the sync failed because it would involve creating a call ID that conflicts with one that already existsfailedIndexRangeInvalid - the sync failed because the "startIndex" was greater than the "endIndex"failedIndexRangeTooGreat - the sync failed because the difference between "endIndex" and "startIndex" was too largefailedNoSuchParameterSet - the "coSpaceBulkParameterSet" refered to in the sync command did not existfailed - the sync operation failed</td>
  </tr>
  <tr>
    <td>removeAll</td>
    <td>true|false</td>
    <td>If supplied, determines whether the sync will remove all entries that were created using the parameter set. Used only to remove all spaces that were created previously. If set to true then no spaces will be created. If set to false, or omitted, then all spaces previously created using this parameter set will be removed and new spaces based on the new mappings will be created.If this parameter is not supplied in a create (POST) operation, it defaults to "false"</td>
  </tr>
</table>

+ Parameters
    + coSpacebulksyncid (ID)

+ Response 200
    + Body

            <?xml version="1.0"?>
            <coSpaceUser id="527089d6-6581-4331-8417-971c05c9e274">
            <userJid>darth@empire.net</userJid>
            <userId>"de41b1e5-7a56-4894-a5c1-493df2086799"</userId>
            <autoGenerated>"true"</autoGenerated>
            </coSpaceUser>

## coSpace Diagnostics Methods [/coSpaces/{coSpaceId}/diagnostics]
A POST to `/coSpaces/<coSpace id>/diagnostics` triggers the generation of call diagnostics for the specified coSpace.


## Generate call diagnostics [POST]
+ Parameters
    + coSpaceId (ID)
+ Response 200

# Group Calling Out from a coSpace
Adding a remote party to a coSpace requires that this coSpace has an active call from which connections can be made. Essentially this makes an initial call out from a
coSpace a combination of two other API methods:

1. Creation of a new call
2. Adding a new outgoing call leg to a call

These methods are described in later sections. 

# Group Dial Plan Methods
This chapter details the API methods related to configuring dial plans for outbound calls, inbound calls and call forwarding. The chapter covers:
* retrieving outbound dial plan rules
* creating and modifying outbound dial plan rules
* retrieving information on an individual outbound dial plan rule
* retrieving dial plan rules for incoming calls
* creating and modifying dial plan rules for incoming calls
* retrieving information on the dial plan rule for an individual incoming call
* retrieving dial plan rules for forwarding incoming calls
* creating and modifying dial plan rules for forwarding incoming calls
* retrieving information on the dial plan rule to forward an individual incoming call

## Outgoing Dial Plan API Methods [/outboundDialPlanRules/{?filter,offset,limit,tenantFilter}]
### Access to the outgoing dial plan
Typically, the configuration of which trunks or proxies to use for outbound calls is based on the domain of the (SIP) destination being called, which is specified in the outgoing dial plan. The outgoing dial plan sits in the API object tree under the `/outboundDialPlanRules` node, use the POST method to create the outgoing dial plan or set it up via the Web Admin Interface (see note below).

If you are deploying Call Bridge clustering, use the API parameter `scope` to choose whether to apply each outbound dial plan rule to every Call Bridge in the cluster, or just to a particular Call Bridge so the Call Bridge can be trunked to its local Call Control solution (if appropriate).


---
**Note:** The API parameter `callRouting` specifies the mechanism for traversal of outgoing SIP/Lync calls, use this parameter to set up firewall traversal for SIP and Lync devices. This is still a beta feature.

---

---
**Note:** On the Web Admin Interface, the table of outbound rules is configured through the Configuration > Dial plan page. All rules added via the Web Admin Interface are global and applied to every Call Bridge in the cluster. You cannot use the Web Admin interface to specify the call routing for outbound SIP/Lync calls using a specific Call Bridge or Call Bridge group.

---

## Retrieving outbound dial plan rules [GET]
Response is a collection of `<outboundDialPlanRule id=<ID>>` objects contained within an `<outboundDialPlanRules>` object

`<outboundDialPlanRule>` elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>outboundDialPlanRule id</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>domain</td>
        <td>String</td>
        <td>The domain to match in order to apply the dial plan rule; either a complete value (e.g. "example.com") or a “wildcarded” one (e.g. "*.com")</td>
    </tr>
    <tr>
        <td>priority</td>
        <td>Number</td>
        <td>A numeric value which determines the order in which dial plan rules (including rules with wild-carded domains) will be applied. Rules with higher priority values are applied first</td>
    </tr>
    <tr>
        <td>tenant</td>
        <td>ID</td>
        <td>If a tenant is specified, this rule will only be used to make outbound call legs from calls associated with that tenant; otherwise, this rule may be used from any call. This parameter is present from R1.8 onwards.</td>
    </tr>
</table>

+ Parameters
    + filter (optional) - Supply filter=`<string`> in the URI to return just those outbound dial plan rules that match the filter
    + offset (optional) - An "offset" and "limit" can be supplied to retrieve coSpaces other than the first "page" in the notional list (see Section 4.1.2)
    + limit (optional) - An "offset" and "limit" can be supplied to retrieve coSpaces other than the first "page" in the notional list (see Section 4.1.2)
    + tenantFilter (ID, optional) - If supplied, this filter only returns those outbound dial plan rules associated with the specified tenant. This parameter is present from version 1.8 onwards

+ Response 200
    + Body

            TODO:

## Creating and modifying outbound dial plan rules [POST]
* Creating: POST method to the `/outboundDialPlanRules` node. If the outgoing dial plan rule is created successfully, a “200 OK” response will be received, and the `Location` header in the response will contain the new outgoing dial plan rule ID
* Modifying: PUT method on an `/outboundDialPlanRules/<outbound dial plan rule ID>` node

<table>
  <tr>
    <th>Parameters</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>domain *</td>
    <td>String</td>
    <td>The domain to match in order to apply the dial plan rule; either a complete value (e.g. "example.com") or a “wildcarded” one (e.g. "*.com")</td>
  </tr>
  <tr>
    <td>priority</td>
    <td>Number</td>
    <td>A numeric value which determines the order in which dial plan rules (including rules with wildcarded domains) will be applied. Rules with higher priority values are applied first. If a rule is matched, but the call cannot be made, then other lower priority rules may be tried depending on the failureAction parameter for the rule.</td>
  </tr>
  <tr>
    <td>localContactDomain</td>
    <td>String</td>
    <td>Used when forming an explicit contact domain to be used: if you leave this field blank then the localContactDomain is derived from the local IP address.If you are using Lync, we suggest that you set localContactDomain. If you are not using Lync, we recommend that localContactDomain is not set to avoid unexpected issues with the SIP call flow.</td>
  </tr>
  <tr>
    <td>localFromDomain</td>
    <td>String</td>
    <td>Used when forming the calling party for outgoing calls using this dial plan rule</td>
  </tr>
  <tr>
    <td>sipProxy</td>
    <td>String</td>
    <td>The address (IP address or hostname) of the proxy device through which to make the call. If not set, it is a direct call.</td>
  </tr>
  <tr>
    <td>trunkType</td>
    <td>sip|lync|avaya</td>
    <td>Used to set up rules to route calls out to third party SIP control devices such as CiscoExpressway, Avaya Manager or Lync servers. If set to lync or avaya then outgoing calls that use this rule will be made as Lync or Avaya calls with some specialized behavior. sip means that calls using this rule will be standard SIP calls.A common use of the Meeting Server is with an Avaya PBX; these calls will be audio-only. However, the Meeting Server does not impose this restriction on interoperability with Avaya products (some of which support video also): therefore a call of type of ‘avaya’ does not imply that the call is audio-only.</td>
  </tr>
  <tr>
    <td>failureAction</td>
    <td>stop|continue</td>
    <td>Whether or not to try the next outbound dial plan rule if the current one did not result in a connected call. If a rule has a failureAction of stop, then no further rules are used.</td>
  </tr>
  <tr>
    <td>sipControlEncryption </td>
    <td>auto|encrypted|unencrypted</td>
    <td>Whether to enforce use of encrypted control traffic on calls made via this rule:encrypted: allow only encrypted SIP control traffic (TLS connections)unencrypted: use only unencrypted traffic (TCP or UDP)auto: attempt to use encrypted control connections first, but allow fall back to unencrypted control traffic in the event of failure.Note: Ensure all "Lync" outbound dialing rules are explicitly set to Encrypted mode to prevent the Call Bridge attempting to use unencrypted TCP for these connections in the event of the TLS connection attempt failing.</td>
  </tr>
  <tr>
    <td>scope</td>
    <td>global|callBridge|callBridgeGroup</td>
    <td>The entities for which this outbound dial plan rule is valid:global - all Call Bridges are able to use this outbound dial plan rule to reach a matching domain.callBridge - this outbound dial plan rule is only valid for a single nominated Call Bridge – whose ID is given in callBridge parameter.callBridgeGroup - this outbound dial plan rule is only valid for a single nominated Call Bridge Group – whose ID is given in the callBridgeGroup parameter. (From version 2.2).If this parameter is not supplied in a create (POST) operation it defaults to “global”.</td>
  </tr>
  <tr>
    <td>callBridge</td>
    <td>ID</td>
    <td>If the rule has a scope of callBridge (see above), this is the id of the Call Bridge for which the rule is valid</td>
  </tr>
  <tr>
    <td>callBridgeGroup</td>
    <td>ID</td>
    <td>If the rule has a scope of callBridgeGroup (see above), this is the id of the Call Bridge Group for which the rule is valid (from version 2.2).</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>If a tenant is specified, this rule will only be used to make outbound call legs from calls associated with that tenant; otherwise, this rule may be used from any call. </td>
  </tr>
  <tr>
    <td>callRouting(beta feature)</td>
    <td>default|traversal</td>
    <td>This is the media routing that should be used for SIP calls originating from this rule:default - calls using this rule will use normal, direct, media routingtraversal - media for calls using this rule will flow via a TURN serverif this parameter is not supplied in a create (POST) operation, it defaults to “default” .</td>
  </tr>
</table>

+ Attributes (outboundDialPlanRule)
+ Response 200
    + Headers

            Location:ID

## Retrieving information on an individual outbound dial plan rule [GET /outboundDialPlanRules/{outboundDialPlanRuleId}]
GET method on a `/outboundDialPlanRules/<outbound dial plan rule ID>` node. If the outbound dial plan rule ID supplied is valid, a "200 OK" response and a single `<outboundDialPlanRule id=<ID>>` object will be returned with data as per the previous section.
+ Parameters
    + outboundDialPlanRuleId (ID)
+ Response 200
    + Body

            TODO: outbound dial plan rule object goes here

## Incoming Call Matching Dial Plan API Methods [/inboundDialPlanRules/{?filter,offset,limit,tenantFilter}]
### Access to incoming domain matching rules

When an incoming SIP call is routed to the Meeting Server, the Call Bridge looks through the configured inbound dial plan rules first and tries to match the "domain" part of the destination URI "<user>@<domain>"against the rules. 

Use the POST method on API object `/inboundDialPlanRules` to create a new inbound dial plan rule to match against incoming SIP calls, or set it up via the Web Admin Interface (see note below)
---
**Note:** On the Web Admin Interface, the table of inbound rules is configured through the **Configuration > Incoming calls** page.

---
## Retrieving incoming dial plan rules [GET]
Response is a collection of `<inboundDialPlanRuleId=<ID>>` objects contained within an `<inboundDialPlanRules>` object `<inboundDialPlanRule>` elements follow the general form on the left.


<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td> </td>
    <td> </td>
    <td>Response is a collection of "&lt;inboundDialPlanRule id=&lt;ID&gt;&gt;" objects contained within an "&lt;inboundDialPlanRules&gt;" object&lt;inboundDialPlanRule&gt; elements follow the general form on the left.</td>
  </tr>
  <tr>
    <td>inboundDialPlanRule id</td>
    <td>ID</td>
    <td> </td>
  </tr>
  <tr>
    <td>domain</td>
    <td>Text</td>
    <td>The domain to match in order to apply the dial plan rule. Must be a complete value (e.g. "example.com")</td>
  </tr>
  <tr>
    <td>priority</td>
    <td>Number</td>
    <td>Determines the priority of the inbound dial plan rule where multiple rules are applicable</td>
  </tr>
  <tr>
    <td>resolveToUsers</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain will be matched against user JIDs (if a match is then found, that incoming call leg causes a "point to point" call to that user's Meeting App.</td>
  </tr>
  <tr>
    <td>resolveTocoSpaces</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain are matched against coSpace URIs (if a match is then found, the incoming call leg becomes a participant in the coSpace).</td>
  </tr>
  <tr>
    <td>resolveToIvrs</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain are matched against configured IVR URIs (if a match is then found, the incoming call leg connects to that IVR).</td>
  </tr>
  <tr>
    <td>resolveToLyncConferences</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain are resolved to a Lync conference URL; if the resolution is successful, the incoming call leg becomes a participant in the Lync conference.If this parameter is not supplied in a create (POST) operation, it defaults to “false”.</td>
  </tr>
  <tr>
    <td>resolveToLyncSimplejoin</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain are resolved by an HTTPS lookup to the given URL. If the resolution is successful, the incoming call leg becomes a participant in the Lync conference. (From version 2.2).</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>If specified, calls to this inbound domain are only matched against user JIDs and coSpace URIs for the specified tenant</td>
  </tr>
</table>

+ Parameters
    + filter (optional) - Supply filter=`<string`> in the URI to return just those incoming dial plan rules that match the filter
    + offset (optional) - An "offset" and "limit" can be supplied to retrieve incoming dial plan rules other than the first "page" in the notional list (see above)
    + limit (optional) - An "offset" and "limit" can be supplied to retrieve incoming dial plan rules other than the first "page" in the notional list (see above)
    + tenantFilter (ID, optional) - If supplied, this filter only those inbound dial plan rules associated with the specified tenant
+ Response 200
    + Body

            TODO: Need a inboundDialPlanRule object for this area

## Creating and modifying incoming dial plan rules [POST]
* Creating: POST method to the `/inboundDialPlanRules` node. If the incoming dial plan rule is created successfully, a “200 OK” response will be received, and the `Location` header in the response will contain the new incoming dial plan rule ID
* Modifying: PUT method on an `/inboundDialPlanRules/<inbound dial plan rule ID>` node

<table>
  <tr>
    <th>Parameters</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>domain *</td>
    <td>String</td>
    <td>The domain to match in order to apply the dial plan rule. Must be a complete value (e.g. "example.com")</td>
  </tr>
  <tr>
    <td>priority</td>
    <td>numeric</td>
    <td>inbound dial plan rules' configured domain values are always exactly matched against incoming calls. For the purposes of generating full URIs to advertise for incoming calls (especially cases where multiple rules are applicable) you can also set a numeric priority value - higher values will be preferred</td>
  </tr>
  <tr>
    <td>resolveToUsers</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain will be matched against user JIDs (if a match is then found, that incoming call leg causes a "point to point" call to that user's Meeting App.</td>
  </tr>
  <tr>
    <td>resolveTocoSpaces</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain will be matched against coSpace URIs (if a match is then found, the incoming call leg becomes a participant in the coSpace).</td>
  </tr>
  <tr>
    <td>resolveToIvrs</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain will be matched against configured IVR URIs (if a match is then found, the incoming call leg connects to that IVR).</td>
  </tr>
  <tr>
    <td>resolveToLyncConferences</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain will be resolved to a Lync conference URL; if the resolution is successful, the incoming call leg becomes a participant in the Lync conference.If this parameter is not supplied in a create (POST) operation, it defaults to “false”.</td>
  </tr>
  <tr>
    <td>resolveToLyncSimplejoin</td>
    <td>true|false</td>
    <td>If set to true, calls to this domain will be resolved by an HTTPS lookup to the given URL. If the resolution is successful, the incoming call leg becomes a participant in the Lync conference.If this parameter is not supplied in a create (POST) operation, it defaults to “false”. (From version 2.2).</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>If specified, calls to this inbound domain will only be matched against user JIDs and coSpace URIs for the specified tenant</td>
  </tr>
</table>

+ Attributes (inboundDialPlanRule)
+ Response 200
    + Headers

            Location:ID

## Retrieving information on an individual incoming dial plan rule [GET /inboundDialPlanRules/{inboundDialPlanRuleId}]
GET method on a `/inboundDialPlanRules/<inbound dial plan rule ID>` node. If the incoming dial plan rule ID supplied is valid, a "200 OK" response and a single `<inboundDialPlanRule id=<ID>>` object will be returned with data as per the previous section.
+ Parameters
    + inboundDialPlanRuleId (ID)
+ Response 200
    + Body

            TODO: Need inboundDialPlanRuleId object here...

## Incoming Call Forwarding Dial Plan API Methods [/forwardingDialPlanRules{?filter,offset,limit,tenantFilter}]
### Access to incoming call forwarding rules
If the "domain" part of the destination URI of an incoming SIP call fails to match any of the inbound dial plan rules, the call will be handled according to the rules in the call forwarding dial plan. The rules decide whether to reject the call outright or to forward the call in bridge mode.

Call forwarding rules can overlap, and include wildcards. You order rules using the Priority value; higher numbered rules are tried first. By defining rules, you decide whether to forward the call or not. It might be appropriate to “catch” certain calls and reject them.

For calls that will be forwarded, you can rewrite the destination domain, a new call is created to the specified domain.

The call forwarding dial plan sits in the API object tree under a `/forwardingDialPlanRules` node. Use the POST method to create the forwarding rules or set them up via the Web Admin Interface (see note below)

---
**Note:** On the Web Admin Interface, the Incoming Call Forwarding rules are configured through the Call Forwarding section of the **Configuration > Incoming calls** page.

---
## Retrieving incoming call forwarding dial plan rules [GET]
Response is a collection of `<forwardingDialPlanRule id=<ID>>` objects contained within an `<forwardingDialPlanRules>` object `<forwardingDialPlanRule>` elements follow the general form on the left. The matchPattern and priority are described in the next section

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>forwardingDialPlanRule id</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>matchPattern</td>
        <td>Text</td>
        <td>The domain to match in order to apply the dial plan rule. Must be a complete domain name (e.g. "example.com") or a “wildcarded” one (e.g. *.com)</td>
    </tr>
    <tr>
        <td>priority</td>
        <td>Number</td>
        <td>Numeric value used when determining the order in which to apply forwarding dial plan rules; higher values will be applied first</td>
    </tr>
    <tr>
        <td>tenant</td>
        <td>ID</td>
        <td>If specified, calls using this forwardingDialPlanRule will only be matched against the specified tenant</td>
    </tr>
</table>

+ Parameters
    + filter (optional) - Supply filter=`<string`> in the URI to return just those incoming call forwarding rules that match the filter
    + offset (optional) - An "offset" and "limit" can be supplied to retrieve coSpaces other than the first "page" in the notional list (see Section 4.1.2)
    + limit (optional) - An "offset" and "limit" can be supplied to retrieve coSpaces other than the first "page" in the notional list (see Section 4.1.2)
    + tenantFilter (ID, optional) - If supplied, this filter restricts the results returned to those forwarding dial plan rules that are associated with the specified tenant. This parameter is present from version 1.8 onwards
+ Response 200
    + Body

            TODO: forwardingDialPlanRules objects go here!

## Creating and modifying incoming call forwarding dial plan rules [POST]
* Creating: POST method to the `/forwardingDialPlanRules` node. If the forwarding dial plan rule is created successfully, a “200 OK” response will be received, and the `Location` header in the response will contain the new forwarding dial plan rule ID
* Modifying a forwarding dial plan rule is a PUT method on a `/forwardingDialPlanRules/<forwarding dial plan rule ID>` node

<table>
  <tr>
    <th>Parameters</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>matchPattern</td>
    <td>String</td>
    <td>The domain to match in order to apply the dial plan rule. Must be a complete domain name (e.g. "example.com") or a “wildcarded” one (e.g. exa*.com). Wildcards are permitted in any part of a domain matching pattern, but do not use “matchPattern=*” as a match all, otherwise you will create call loops.</td>
  </tr>
  <tr>
    <td>destinationDomain</td>
    <td>String</td>
    <td>Calls that are forwarded with this rule will have their destination domain rewritten to be this value</td>
  </tr>
  <tr>
    <td>action</td>
    <td>forward|reject</td>
    <td>If set to "forward" causes matching call legs to become point-to-point calls with a new destination. "reject" causes the incoming call leg to be rejected</td>
  </tr>
  <tr>
    <td>callerIdMode</td>
    <td>regenerate|preserve</td>
    <td>When forwarding an incoming call to a new destination address, whether to preserve the original calling party's ID or to generate a new one. If this parameter is not supplied in a create (POST) operation, it defaults to "regenerate"</td>
  </tr>
  <tr>
    <td>priority</td>
    <td>Number</td>
    <td>Numeric value used when determining the order in which to apply forwarding dial plan rules; higher values will be applied first</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>If a tenant is specified, calls using this rule will be associated with the specified tenant. </td>
  </tr>
  <tr>
    <td>uriParameters</td>
    <td>discard|forward</td>
    <td>When forwarding an incoming call to a new destination address, this parameter determines whether to discard any additional parameters that are present in the destination URI of the incoming call, or to forward them on to the destination URI of the outbound call. If this parameter is not supplied in a create (POST) operation, it defaults to "discard”. This parameter is present from version 2.0 onwards</td>
  </tr>
</table>

+ Attributes (forwardingDialPlanRule)
+ Response 200
    + Headers

            Location:ID
            
## Retrieving information on an individual incoming call forwarding dial plan rule [GET /forwardingDialPlanRules/{forwardingDialPlanRuleId}]
GET method on a `/forwardingDialPlanRules/<forwarding dial plan rule ID>` node. If the forwarding dial plan rule ID supplied is valid, a "200 OK" response and a single `<forwardingDialPlanRule id=<ID>>` object will be returned with data as per the previous section.

+ Parameters
    + forwardingDialPlanRuleId
+ Response 200
    + Body

            TODO: Need forwardingDialPlanRule object


# Group Call Related Methods
This chapter details the API methods for:
* active calls
* call profiles
* call legs
* call leg profiles
* dial transforms
* call branding profiles
* dtmf profiles
* ivr methods
* ivr branding profiles
* participants

## Call Methods [/calls{?offset,limit,coSpaceFilter,tenantFilter}]

## Retrieving Information on Active Calls [GET]
GET method performed on the `/calls` node.

Response is structured as a top-level `<calls total=”N”>` tag with potentially multiple `<call>` elements within it. `<call>` elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>callCorrelator</td>
        <td>ID</td>
        <td>An id that is the same across all distributed instances of this call. This parameter is present from R1.7 onwards</td>
    </tr>
    <tr>
        <td>name</td>
        <td>String</td>
        <td>The associated (human-readable) name for the call</td>
    </tr>
    <tr>
        <td>coSpace</td>
        <td>ID</td>
        <td>If the call represents the instantiation of a coSpace, this value will be present and hold the id of the coSpace</td>
    </tr>
    <tr>
        <td>tenant</td>
        <td>ID</td>
        <td>The specific tenant that the call belongs to</td>
    </tr>
</table>

+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see Section 4.1.2)
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see Section 4.1.2)
    + coSpaceFilter (optional) - Supply an ID to return just those calls that match the filter
    + tenantFilter (optional) - Supply an ID to return just those calls that belong to the specified tenant


+ Response 200
    + Body

            TODO: call object goes hereabouts

## Creating a New Call and Modifying an Active call [POST]
POST method performed on the `/calls` node or PUT method to `/calls/<callId>`

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>coSpace *</td>
    <td>ID</td>
    <td>Specifies the coSpace for which the call is being instantiated</td>
  </tr>
  <tr>
    <td>name</td>
    <td>String</td>
    <td>The name of the new call</td>
  </tr>
  <tr>
    <td>locked</td>
    <td>true|false</td>
    <td>Allows the locking/unlocking of a meeting lobby in order to control the process of activating participants. Participants requiring activation are typically guests to a coSpace that have not yet been ‘activated’. Members of a coSpace are not affected, and can join the coSpace at any time. When a meeting is locked, the guests requiring activation wait in the meeting lobby until the host unlocks the coSpace, at which point they are activated and join the coSpace. Participants that are already activated are NOT deactivated when the conference goes from the unlocked state to the locked state.If set to true, new participants that need activation are not activated even if there are activators in the call. </td>
  </tr>
  <tr>
    <td>recording</td>
    <td>true|false</td>
    <td>If true, this call is currently being recorded.</td>
  </tr>
  <tr>
    <td>streaming</td>
    <td> true|false</td>
    <td>If true, this call is currently being streamed. (From version 2.1)</td>
  </tr>
  <tr>
    <td>allowAllMuteSelf</td>
    <td>true|false</td>
    <td>If true, participants have the permission to mute and unmute themselves.</td>
  </tr>
  <tr>
    <td>allowAllPresentationContribution</td>
    <td>true|false</td>
    <td>If true, participants have the permission to present.  If false, this permission is dependent on presentationContributionAllowed in the call leg profile. Default is false. </td>
  </tr>
  <tr>
    <td>joinAudioMuteOverride</td>
    <td>true|false</td>
    <td>If true, new participants will be muted when joining the call. </td>
  </tr>
  <tr>
    <td>messageText</td>
    <td>String</td>
    <td>Text to display to every participant in the call (only displayed if configured messageDuration is non zero). (From version 2.1)</td>
  </tr>
  <tr>
    <td>messagePosition</td>
    <td>top|middle|bottom</td>
    <td>Position to display configured messageText on screen (for SIP endpoints).(From version 2.1)<
    /td>
  </tr>
  <tr>
    <td>messageDuration</td>
    <td>Number|permanent</td>
    <td>Time in seconds to display configured messageText on screen . Typing the string “permanent” will result in the string being permanently shown 
    until it is reconfigured. (From version 2.1)</td>
  </tr>
  <tr>
    <td>activeWhenEmpty</td>
    <td>true|false</td>
    <td>If true, this call is considered “active for load balancing” when no participants are present,. This means that the first call to the empty conference is preferentially load balanced. You can prevent the load balancing preferentially using the empty conferences by setting this parameter to false. If this parameter is not supplied in a create (POST) operation, it defaults to “true”.  (From version 2.2)</td>
  </tr>
</table>

If a call is instantiated for the coSpace successfully, that call’s ID is returned in the `Location` field of the response header. You can now add call legs to this call as described below.



+ Attributes (call)

+ Response 200
    + Headers

            Location:ID

## Retrieving Information on an Individual Active Call [GET /call/{callId}]
GET method performed on a `/calls/<callId>` node. If the call ID supplied is valid, a “200 OK” response is received, with XML content of the form:

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>coSpace</td>
    <td>ID</td>
    <td>If the call represents the instantiation of a coSpace, this value will be present and hold the id of the coSpace</td>
  </tr>
  <tr>
    <td>callCorrelator</td>
    <td>ID</td>
    <td>An id that is the same across all distributed instances of this call.</td>
  </tr>
  <tr>
    <td>callType</td>
    <td>coSpace|forwarding|adHoc|lyncConferencing</td>
    <td>Indicates the call type:coSpace - this call is the instantiation of a spaceforwarding - this is a forwarded or “gateway” calladHoc - this is an ad hoc multiparty calllyncConferencing - this call leg is participating in a Lync conference(From version 2.3)</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>The ID of the tenant that owns the call</td>
  </tr>
  <tr>
    <td>durationSeconds</td>
    <td>Number</td>
    <td>The duration of the call, as the number of seconds since the call started</td>
  </tr>
  <tr>
    <td>name</td>
    <td>String</td>
    <td>The associated human-readable name for the call. (From version 2.3)</td>
  </tr>
  <tr>
    <td>numCallLegs</td>
    <td>Number</td>
    <td>The number of call legs currently active within this call</td>
  </tr>
  <tr>
    <td>maxCallLegs</td>
    <td>Number</td>
    <td>The highest number of call legs that have been simultaneously present within this call</td>
  </tr>
  <tr>
    <td>numParticipantsLocal</td>
    <td>Number</td>
    <td>The number of participants within this call locally hosted by the Call Bridge to which the request is being made</td>
  </tr>
  <tr>
    <td>numParticipantsRemote</td>
    <td>Number</td>
    <td>The number of participants  in this call hosted by other Call Bridges </td>
  </tr>
  <tr>
    <td>numDistributedInstances</td>
    <td>Number</td>
    <td>The number of other Call Bridges hosting participants in this call</td>
  </tr>
  <tr>
    <td>presenterCallLeg</td>
    <td>ID</td>
    <td>The presenterCallLeg value is only present if a call leg is actively presenting within this call </td>
  </tr>
  <tr>
    <td>locked</td>
    <td> true|false</td>
    <td>Indicates whether the call is locked (true) or unlocked (false). </td>
  </tr>
  <tr>
    <td>recording</td>
    <td> true|false</td>
    <td>If true, this call is currently being recorded. </td>
  </tr>
  <tr>
    <td>streaming</td>
    <td> true|false</td>
    <td>If true, this call is currently being streamed. (From version 2.1)</td>
  </tr>
  <tr>
    <td>allowAllMuteSelf</td>
    <td>true|false</td>
    <td>If true, participants have the permission to mute and unmute themselves. If false, this permission is dependent on muteSelfAllowed in the call leg profile. </td>
  </tr>
  <tr>
    <td>allowAllPresentationContribution</td>
    <td>true|false</td>
    <td>If true, participants have the permission to present. . If false, this permission is dependent on presentationContributionAllowed in the call leg profile. Default is false. </td>
  </tr>
  <tr>
    <td>joinAudioMuteOverride</td>
    <td>true|false</td>
    <td>If true, new participants will be muted when joining the call. </td>
  </tr>
  <tr>
    <td>messageText</td>
    <td>String</td>
    <td>Text to display to every participant in the call (only displayed if configured messageDuration is non zero). (From version 2.1)</td>
  </tr>
  <tr>
    <td>messagePosition</td>
    <td>top|middle|bottom</td>
    <td>Position to display configured messageText on screen (for SIP endpoints).(From version 2.1)</td>
  </tr>
  <tr>
    <td>messageDuration</td>
    <td>Number</td>
    <td>Time in seconds to display configured messageText on screen (can also be "permanent" to cause the message to be displayed until it is reconfigured). (From version 2.1)</td>
  </tr>
  <tr>
    <td>messageTimeRemaining</td>
    <td>Number</td>
    <td>Time remaining in  seconds for configured messageText to be displayed on screen.(From version 2.1)</td>
  </tr>
  <tr>
    <td>ownerName</td>
    <td>String</td>
    <td>If set,  displays the owner of this call. This can be the meetingScheduler of the coSpace of this call, or the name of the owner of this call or the Jid of the owner. (From version 2.2)                    </td>
  </tr>
  <tr>
    <td>activeWhenEmpty</td>
    <td>true|false</td>
    <td>If true, this call is considered active for load balancing when no participants are present.If this parameter is not supplied in a create (POST) operation, it defaults to “true”.  (From version 2.2)</td>
  </tr>
</table>

+ Parameters
    + callId (ID)
    
+ Response 200
    + Body

            TODO: need call object

## Generating diagnostics for an individual call [POST /calls/{callId}/diagnostics]
POST method performed on `/calls/<callId>/diagnostics` generates call diagnostics for the call in question.

+ Parameters
    + callId (ID)
+ Response 200
    + Body

            TODO: No idea what gets returned for these things.

## Retrieve participants in a conference [GET /calls/{callId}/participants/{?offset,limit,filter,tenantFilter,callBridgeFilter}]
GET method performed on the `/calls/<call id>/participants` node. Retrieves a list of all of the participants associated with the specified call.

Response is structured as a top-level <participants total=”N”> tag with potentially multiple <participant> elements within it.
<participant> elements follow the general form on the left.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>name</td>
    <td>String</td>
    <td>The associated (human-readable) name associated with this participant</td>
  </tr>
  <tr>
    <td>call</td>
    <td>ID</td>
    <td>The call that this participant is part of</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td>The specific tenant with which this participant is associated</td>
  </tr>
  <tr>
    <td>callBridge</td>
    <td>ID</td>
    <td>The remote, clustered Call Bridge to which this participant is connected</td>
  </tr>
</table>

+ Parameters
    + offset (number, optional)
        An "offset" and "limit" can be supplied to retrieve coSpaces other than the first “page" in the notional list (see Section 4.1.2).
    + limit (number, optional)
        An "offset" and "limit" can be supplied to retrieve coSpaces other than the first “page" in the notional list (see Section 4.1.2).
    + filter (string, optional)
        Supply “filter=`<string`>” in the URI to return just those coSpaces that match the filter
    + tenantFilter (ID, optional) - Supply tenantFilter=<tenant id> to return just those coSpaces associated with that tenant
    + callBridgeFilter (ID, optional)
        Supply callBridgeFilter=`<callBridgeFilter>` to return just those active participants located on the specified Call Bridge.

+ Request
    + Headers

            Authorization: Basic Ym9iOmJ1aWxkZXI=

+ Response 200 (text/xml)
    + Headers

            Connection: close
    
    + Body
    
            <?xml version="1.0"?>
            <TODO conference details>

## Creating a new participant for a specified call [POST /calls/{callId}/participants]
POST method on the `/calls/<callId>/participants` node.

---
***Note:***: This may result in the call leg instantiation ("owned" by the participant object) occurring
on a remote clustered Call Bridge.

---
---
***Note***: See also the section on participant related methods.

---
+ Parameters
    + callId (ID)
    
+ Attributes (CreateParticipantforspecifiedcall)

+ Response 200
    + Headers

            Location:ID

## Set properties for all participants in a conference [PUT /calls/{callId}/participants/]

PUT to `/calls/<callId>/participants/*` node. Set properties for all participants associated with
the specified call.

TODO table of parameters

+ Parameters
    + callId (ID)

+ Attributes (ParticipantProperties)

+ Response 200
    + Headers

            TODO: something

## Call Profile Methods [/callProfiles{?offset,limit,usageFilter}]
Call profiles control the maximum number of active simultaneous participants and the in-call experience for SIP (including Lync) calls. For more information see also Section 14.

## Retrieving call profiles [GET]
GET method performed on the `/callProfiles` node.

Response is structured as a top-level `<callProfiles total="N">` tag with potentially multiple `<callProfile>` elements within it.
Each `<callProfile>` tag may include the following elements:

See the next section

+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see Section 4.1.2)
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see Section 4.1.2)
    + usageFilter (enum, optional)
        + unreferenced `Supply "usageFilter=unreferenced" in the request to retrieve only those call profiles that are not referenced by global settings or any other object. This is a useful check before deleting the profile.`
        + referenced `To retrieve just those call profiles which are referenced in at least one place, you can supply "usageFilter=referenced"`
+ Response 200

## Setting up and modifying call profiles [POST]

+ Attributes (callProfile)
+ Response 200
    + Body

            TODO: Need callProfile response

## Retrieving detailed information about an individual call profile [GET /callProfiles/{callProfileId}]
GET method performed on a `/callProfiles/<call profile id>` node. If the call profile id ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.
+ Response 200
    + Body

            TODO: Need detailed callProfile object here

## Call Leg Methods [/callLegs{?offset,limit,filter,participantFilter,tenantFilter,activeLayoutFilter,availableVideoStreamsLowerBound,availableVideoStreamsUpperBound,ownerIdSet,alarms}]

## Retrieving Information on Active Call Legs [GET]
GET method performed on the `/callLeg` node (to retrieve information on all active call legs within the system).
Alternatively, a GET method performed on the `/calls/<call id>/callLegs` node (to retrieve information on active call legs for a specific call).

Response is structured as a top-level `<callLegs total=”N”>` tag with potentially multiple `<callLeg>` elements within it.
`<callLeg>` elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>callLeg id</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>name</td>
        <td>String</td>
        <td></td>
    </tr>
    <tr>
        <td>remoteParty</td>
        <td>String</td>
        <td></td>
    </tr>
    <tr>
        <td>call</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>tenant</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>alarms</td>
        <td>Object</td>
        <td>For call legs which have active alarm conditions, there will be an additional "alarms" tag under the encompassing "callLeg" which details the currently active alarms. Within this “alarms” tag there will be one or more subsidiary indications—also see the note below:</td>
    </tr>
    <tr>
        <td>packetLoss</td>
        <td>String</td>
        <td>Present if packet loss is being experienced on one or more of the call leg’s active media streams</td>
    </tr>
    <tr>
        <td>excessiveJitter</td>
        <td>String</td>
        <td>Present if there is a high level of jitter on one or more of the call leg’s active media streams</td>
    </tr>
    <tr>
        <td>highRoundTripTime</td>
        <td>String</td>
        <td>Present if a high round trip time has been detected for one or more of the call leg’s media streams</td>
    </tr>
</table>

---
**Note on alarms:**

Call leg alarms provide information that may be useful in raising alarms or troubleshooting issues after they have occurred but they should not necessarily be treated as if they are alarm conditions in themselves—unlike system level alarms.

A call leg alarm may be triggered by a number of factors, not necessarily a set percentage packet loss for example. An alarm condition is attached to a call leg when the Acano solution believes that the call leg may be being degraded. These "conditions" may include a simple threshold, but potentially other things too such as a more adaptive threshold and taking other factors into account. This does not necessarily mean that the user’s experience was poor but it provides information to troubleshoot in the event that it was. Therefore you could consider adding filters to this alarm information and deciding when to flag an event as an alarm to the operator (i.e. setting your own thresholds) and/or storing call leg alarm information alongside CDRs so that if a user reports a poor quality call you can retrieve this information after the event to determine what the cause might have been.

---

+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + filter (optional) - Supply filter=`<string`> in the URI to return just those call legs that match the filter
    + participantFilter (ID, optional) - Supply participantFilter to return only those call legs associated with the specified participant
    + tenantFilter (ID, optional) - Supply tenantFilter to return only those call legs associated with the specified tenant
    + activeLayoutFilter (optional) - If supplied, this filter will restrict results returned to those call legs using the specified layout. This parameter is present from version 1.8 onwards
    + availableVideoStreamsLowerBound (number, optional) - If supplied, this filter will restrict results returned to those call legs with this many or more available video streams. This parameter is present from version 1.8 onwards
    + availableVideoStreamsUpperBound (number, optional) - If supplied, this filter will restrict results returned to those call legs with many or fewer available video streams. This parameter is present from version 1.8 onwards
    + ownerIdSet (boolean, optional) - Used to return those call legs that have an owner Id set, or those that do not
    + alarms (enum, optional) - Used to return just those call legs for which the specified alarm names are currently active. Either “all”, which covers all supported alarm conditions, or one or more specific alarm conditions to filter on, separated by the ‘|’ character
        + packetLoss – packet loss is currently affecting this call leg
        + excessiveJitter - there is currently a high level of jitter on one or more of this call leg’s active media streams
        + highRoundTripTime -  the Meeting Server measures the round trip time between itself and the call leg destination; if a media stream is detected to have a high round trip time (which might impact call quality), then this alarm condition is set for the call leg
        + all
    
    
    
+ Response 200
    + Body

            TODO: List of callLeg objects

## Adding and Modifying Call Legs [POST]
* Adding: POST method to a `/calls/<call ID>/callLegs` node. The `<call ID>` is learnt from a GET on `/calls` or from a newly created call (see Creating a new call above). If a profile has been applied to this call leg, it starts with the values set in the profile
* Modifying: PUT method performed on a `/callLegs/<callLeg ID>` node. It makes live, dynamic, changes to an in-progress connection to a remote party.

---
**Note:** You cannot modify the remoteParty, bandwidth or confirmation.

---

+ Attributes (callLeg)

+ Response 200
    + Body

            TODO: callleg object

## Retrieving Information on an Individual Call Leg [GET /callLegs/{callLegId}]
GET method performed on a `/callLegs/<callLegId>` node.

If the call leg ID supplied is valid, a “200 OK” response is received, with XML content:

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>callLeg id</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>name</td>
        <td>String</td>
        <td></td>
    </tr>
    <tr>
        <td>remoteParty</td>
        <td>String</td>
        <td></td>
    </tr>
    <tr>
        <td>originalRemoteParty</td>
        <td>String</td>
        <td>For outbound calls this is the original destination address . For inbound calls this is the remote address first signaled to the Call Bridge. From version 2.3.
    </tr>
    <tr>
        <td>localAddress</td>
        <td>String</td>
        <td></td>
    </tr>
    <tr>
        <td>call</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>tenant</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>type</td>
        <td>Enum</td>
        <td>sip | acano</td>
    </tr>
    <tr>
        <td>subtype</td>
        <td>Enum</td>
        <td>lync | avaya | distributionLink| lyncDistribution</td>
    </tr>
    <tr>
        <td>lyncSubType</td>
        <td>Enum</td>
        <td>audioVideo | applicationSharing | instantMessaging A further specialization of the call leg type if the call leg sub type is "lync".
audioVideo - this is a Lync call leg used for exchange of audio and video between the Call Bridge and Lync
applicationSharing - this is a Lync call leg used for application or desktop sharing between Lync and the Call Bridge
instantMessaging - this is a Lync call leg used for the exchange of instant messages between Lync and the Call Bridge
If present in the reply, these parameters are overrides currently active specifically for this call leg (i.e. not those values in force because of a “higher level” such as the call leg's associated tenant)</td>
    </tr>
    <tr>
        <td>direction</td>
        <td>Enum</td>
        <td>incoming | outgoing</td>
    </tr>
    <tr>
        <td>configuration</td>
        <td></td>
        <td>see Appendix A</td>
    </tr>
    <tr>
        <td>status</td>
        <td></td>
        <td>see Appendix A</td>
    </tr>
</table>


+ Response 200
    + Body

            TODO: work...

## Creating a new participant for a specified call [POST /calls/{callId}/participants]
---
**Note:** Also see the section on participant related methods.

---
POST method on the `/calls/<call id>/participants` node.

The parameters are as per the call leg create operation described above, but may result in the call leg instantiation ("owned" by the participant object) occurring on a remote clustered Call Bridge.

+ Response 200
    + Body

            TODO: something awesome goes here

## Call Leg Profile Methods [/callLegProfiles{?offset,limit,usageFilter}]

### General information
A call leg profile defines a set of in-call behaviors. coSpace, coSpaceUser, accessMethod, and tenant objects can optionally have a callLegProfile association – if so, call legs that correspond to those objects inherit the in-call behavior defined by the call leg profile.

## Retrieving call leg profiles [GET]
GET method on the `/callLegProfiles/` node.

Response is a collection of `<callLegProfile id=<call leg profile id>` objects contained within an `<callLegProfiles>` object

`<callLegProfile>` elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>needsActivation</td>
        <td>bool</td>
        <td>If set to "true", the participant is unable to receive or contribute audio and video until one or more “full/activator” participants join.</td>
    </tr>
    <tr>
        <td>defaultLayout</td>
        <td>allEqual | speakerOnly | telepresence| stacked | allEqualQuarters | allEqualNinths | allEqualSixteenths | allEqualTwentyFifths | onePlusFive | onePlusSeven | onePlusNine| automatic</td>
        <td>The default layout to be used for call legs using this call leg profile. Note: From R1.9, the "allEqual" layout reverts to the pre-1.7 arrangement where the layout expands from a 4 person view up to a 25 person view, with all participants shown at equal size. The "allEqual" layout that was introduced in R1.7 is renamed "automatic".</td>
    </tr>
    <tr>
        <td>changeLayoutAllowed</td>
        <td>bool</td>
        <td>If set to “true” all legs using this call leg profile are allowed to change their screen layout on a SIP endpoint. This parameter is present from version 1.8 onwards</td>
    </tr>
    <tr>
        <td>participantLabels</td>
        <td>bool</td>
        <td>If set to "true", call legs using this call leg profile will have participant pane labels shown on their video panes</td>
    </tr>
    <tr>
        <td>presentationDisplayMode</td>
        <td>dualStream | singleStream</td>
        <td>singleStream provides a single composited content+video BFCP stream rather than outgoing content being in a separate stream</td>
    </tr>
    <tr>
        <td>presentationContributionAllowed</td>
        <td>bool</td>
        <td>If true, the participant using the call leg can contribute content</td>
    </tr>
    <tr>
        <td>allowAllPresentationContributionAllowed</td>
        <td>bool</td>
        <td>Whether call legs using this call leg profile are allowed to change the permission to present of all call legs. Present from version 1.8 onwards</td>
    </tr>
    <tr>
        <td>presentationViewingAllowed</td>
        <td>bool</td>
        <td>If true, the participant using the call leg can view content con- tributed by others</td>
    </tr>
    <tr>
        <td>endCallAllowed</td>
        <td>bool</td>
        <td>If true, the participant using the call leg profile can end the meeting for everyone</td>
    </tr>
    <tr>
        <td>muteOthersAllowed</td>
        <td>bool</td>
        <td>If true, the participant using the call leg profile can mute other participants</td>
    </tr>
    <tr>
        <td>changeJoinAudioMuteOverrideAllowed</td>
        <td>bool</td>
        <td>Whether call legs using this call leg profile are allowed to set the initial mute state of new par- ticipants. Present from version 1.8 onwards</td>
    </tr>
    <tr>
        <td>videoMuteOthersAllowed</td>
        <td>bool</td>
        <td>Whether call legs using this call leg profile are allowed to mute or unmute their own audio</td>
    </tr>
    <tr>
        <td>muteSelfAllowed</td>
        <td>bool</td>
        <td>Whether call legs using this call leg profile are allowed to mute or unmute (block/unblock) the video of other participants</td>
    </tr>
    <tr>
        <td>allowAllMuteSelfAllowed</td>
        <td>bool</td>
        <td>Whether or not call legs using this call leg profile are allowed to change the permission of all call legs to mute and unmute them- selves. Present from version 1.9 onwards</td>
    </tr>
    <tr>
        <td>videoMuteSelfAllowed</td>
        <td>bool</td>
        <td>Whether call legs using this call leg profile are allowed to mute or unmute (block/unblock) their own video</td>
    </tr>
    <tr>
        <td>joinToneParticipantThreshold</td>
        <td>Number</td>
        <td>Number of participants up to which a "join tone" will be played (a value of 0 “disables” the feature)</td>
    </tr>
    <tr>
        <td>leaveToneParticipantThreshold</td>
        <td>Number</td>
        <td>Number of participants up to which a "leave tone" will be played out (a value of 0 “dis- ables” the feature)</td>
    </tr>
    <tr>
        <td>videoMode</td>
        <td>auto | disabled</td>
        <td>If disabled is set then call legs using this call leg profile will be audio-only, or audio and content – depending on the values for presentationViewingAllowed and txAudioMute. No main stream video will be shown. For devices which show content in the main video stream, content but no participant video will be shown in the main video stream when appropriate.</td>
    </tr>
    <tr>
        <td>rxAudioMute</td>
        <td>bool</td>
        <td>If true, other participants will not hear audio from call legs using this call leg profile.</td>
    </tr>
    <tr>
        <td>txAudioMute</td>
        <td>bool</td>
        <td>If true, audio to call legs using this call leg profile will be muted.</td>
    </tr>
    <tr>
        <td>rxVideoMute</td>
        <td>bool</td>
        <td>If true, contributing ("camera") video from call legs using this call leg profile will not be seen by other participants</td>
    </tr>
    <tr>
        <td>txVideoMute</td>
        <td>bool</td>
        <td>If true, video streams to call legs using this call leg profile will be muted (a SIP endpoint's screen just shows the logo, for example, and an Acano client will be sent no video at all)</td>
    </tr>
    <tr>
        <td>sipMediaEncryption</td>
        <td>optional | required | prohibited</td>
        <td>Same as Web Admin Interface setting</td>
    </tr>
    <tr>
        <td>audioPacketSizeMs</td>
        <td>Number</td>
        <td>Numeric value for preferred packet size for outgoing audio streams (in milliseconds, the default value is 20ms)</td>
    </tr>
    <tr>
        <td>deactivationMode</td>
        <td>deactivate | disconnect | remainActivated</td>
        <td>Action for "needsActivation" call legs when the last "activator" leaves</td>
    </tr>
    <tr>
        <td>deactivationModeTime</td>
        <td>Number</td>
        <td>Number of seconds after the last "activator" leaves before which the deactivationMode action is taken</td>
    </tr>
    <tr>
        <td>telepresenceCallsAllowed</td>
        <td>bool</td>
        <td>If true, a call leg using this call leg profile is allowed to make TIP (Telepresence Interoperability Protocol) calls</td>
    </tr>
    <tr>
        <td>sipPresentationChannelEnabled</td>
        <td>bool</td>
        <td>If true, a call leg using this call leg profile is permitted to perform presentation video channel operations</td>
    </tr>
    <tr>
        <td>bfcpMode</td>
        <td>serverOnly | serverAndClient</td>
        <td>If presentation video channel operations are enabled for SIP calls, this setting determines the Acano Call Bridge's BFCP behaviour. serverOnly - this is the normal setting for a conferencing device, and is intended for use with BFCP client mode devices (for instance, SIP endpoints). serverAndClient - this setting allows the Acano Call Bridge to operate in either BFCP client or BFCP server mode in calls with remote devices. This can allow improved presentation video sharing with a remote conference- hosting device such as a third party MCU</td>
    </tr>
    <tr>
        <td>callLockAllowed</td>
        <td>bool</td>
        <td>Determines whether or not call legs using this call leg profile are allowed to lock the call. Present from version 1.8 onwards</td>
    </tr>
    <tr>
        <td>recordingControlAllowed</td>
        <td>bool</td>
        <td>Whether call legs using this call leg profile are allowed to start/stop recording the call. Present from version 1.9 onwards</td>
    </tr>
</table>

+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" on the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" on the notional list
    + usageFilter (enum, optional) - Using unreferenced retrieves only those call leg profiles that are not referenced by global settings or any other object. This is a useful check before deleting a call Leg profile.
        + unreferenced
        + referenced
+ Response 200
    + Body

            TODO: callLeg Profile object/list

## Creating and modifying a call leg profile [POST]
* Creating: POST method to the `/callLegProfiles` node. If the call leg profile is created successfully, a “200 OK” response will be received, and the `Location` header in the response will contain the ID of the new call leg profile
* Modifying a call leg profile is a PUT method on a `/callLegProfiles/<call leg profile id>` node

In all cases, if you explicitly set a parameter to an empty value in the POST or PUT, that parameter is "unset" for that profile. Those call legs then "inherit" the value for that parameter from the level above's call leg profile.

+ Attributes (callLegProfile)
+ Response 200
    + Body

            TODO: Put a callLegProfile here <

## Retrieving information on an individual call leg profile [GET /callLegProfiles/{callLegProfileId}]
### Example call leg profile & access method use

The main use for being able to associate call leg profiles with access methods is to be able to construct separate URI / call ID / passcode combinations giving different in- call behaviors. For example, one call leg profile whose “needsActivation” value is “true” could be associated with one access method, and another call leg profile whose “needsActivation” value is “false” could be associated with a different access method.

Effectively this sets up separate “activator” and “guest” access methods for that coSpace, with callers to the “needsActivation=true” access method needing to wait until a successful call in to the other access method before their conference audio and video become active. For the multiple access methods linked to different call leg profiles in this way, you can choose to distinguish between them only by passcode; essentially, activator and guest users dial the same URI but enter a different PIN depending on whether they’re an activator or guest participant.
+ Response 200
    + Body

            TODO: More callLegProfile stuff here

## usage object method [GET /callLegProfiles/{callLegProfileId}/usage]
From R1.7 there is a `/callLegs/<callLegId>/usage` object in the hierarchy. Performing a GET on this object retrieves, for the queried call leg, a list of where the specified call leg profile is used: whether it is set to be the global call leg profile or any associations it has with tenants, coSpaces, coSpace users, coSpace access methods.
+ Response 200

## callLegProfileTrace object method [GET /callLegProfiles/{callLegProfileId}/callLegProfileTrace]
There is a `/callLegs/<callLegId>/callLegProfileTrace` object in the hierarchy. Performing a GET on this object retrieves, for the call leg that you queried, how its in- force call leg profile has been arrived at; that is, the hierarchy of overrides that have contributed to the currently "in force" call leg profile. Specifically, the response includes a section for each level in the profile hierarchy, and details which call leg profile elements have been applied at which level.

The end result for each parameter is the lowest level’s override for that parameter; for example, if the tenant-level call leg profile has set “participantLabels” to true but the coSpace call leg profile has it set to false, then call legs in that coSpace will not display participant labels.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>scope</td>
        <td>global | tenant | coSpace | accessMethod | coSpaceUser | callOut | callLeg</td>
        <td>Indicates at which level the set of profile parameters have been applied</td>
    </tr>
    <tr>
        <td>id</td>
        <td>ID</td>
        <td>If present, the callLegProfile applicable to the scope of this entry</td>
    </tr>
    <tr>
        <td>userId</td>
        <td>ID</td>
        <td>Identifies the user with no relationship to any coSpace association, and may or may not be the same as the ID of the “coSpaceUser” object.</td>
    </tr>
    <tr>
        <td>needsActivation</td>
        <td></td>
        <td>Parameters that show which call leg profile values have been overridden at this level</td>
    </tr>
    <tr>
        <td>defaultLayout</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>changeLayoutAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>participantLabels</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>presentationDisplayMode</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>presentationContributionAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>presentationViewingAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>endCallAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>muteOthersAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>videoMuteOthersAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>muteSelfAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>videoMuteSelfAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>joinToneParticipantThreshold</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>leaveToneParticipantThreshold</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>videoMode</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>rxAudioMute</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>txAudioMute</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>rxVideoMute</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>txVideoMute</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>sipMediaEncryption</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>audioPacketSizeMs</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>deactivationMode</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>deactivationModeTime</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>telepresenceCallsAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>sipPresentationChannelEnabled</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>bfcpMode</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>disconnectOthersAllowed</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>addParticipantAllowed (from version 2.3)</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>qualityMain (from version 2.2)</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>qualityPresentation (from version 2.2)</td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td>participantCounter (from version 2.2)</td>
        <td></td>
        <td></td>
    </tr>
</table>




+ Response 200
    + Body

            TODO: Figure out what this thing looks like
            
## GenerateKeyFrame [POST /callLegs/{callLegId}/generateKeyframe]
POST to /callLegs/<callLegId>/generateKeyframe to trigger the generation of a new keyframe in outgoing video streams for the call leg in question. This is a debug facility, and Cisco Support may ask you to use the feature when diagnosing an issue.


+ Parameters
    + callLegId (ID)

+ Response 200
    + Headers

            new: key frame
            
## Group Dial Transform Methods

When dial transforms are applied to all outbound calls, then the outbound dial plan rules are applied to the transformed number.

You can use the Web Admin Interface Configuration > Outbound Calls page to control how dialed numbers are transformed. For example, the dial plan in the screen shot below ensures that outbound "+1" (US) calls use one Call Bridge and +44 (UK) calls use another.

---
**Note:** Any dialTransforms defined on a Call Bridge before R1.6 are kept and placed in the coSpace database in R1.7 (or later). They appear on the Configuration > Outbound Calls page but in the format above.

---
However, you need to use the API for dialTransforms if you use Call Bridge clustering, because the shared coSpace database is a single configuration location for all Call Bridges. In a cluster you do not need to configure the dialTransforms separately on each Call Bridge. The dialTransforms for the cluster are those defined on the Call Bridge host server (Meeting Server or virtualized deployment) that is co-located with the first coSpace database in the database cluster. Although the same dialTransforms are applied to all Call Bridge in the cluster, the outbound dial plan rules can be configured per-Call Bridge as described previously.

There are three stages to the transform
* A “type” is applied, which breaks the input number/string into components $1, $2 etc.
* The components are matched using regular expressions to see if the rule is valid
* An output string is created from the components according to the defined transform

---
**Note:** A phone URI is recognized as a purely numeric string (optionally prefixed by a ‘+’) when it begins with a valid international dial code (e.g. 44 for UK or 1 for US) followed by the correct number of digits for a phone number for that region.

---

## Dial Transforms [/dialTransforms{?offset,limit,filter}]

### Examples
<table>
    <tr>
        <th>Example</th>
        <th>Type</th>
        <th>Match</th>
        <th>Transform</th>
    </tr>
    <tr>
        <td>For US numbers, use 'vcs1' directly</td>
        <td>Phone</td>
        <td>($1/01/)</td>
        <td>$2@vcs1</td>
    </tr>
    <tr>
        <td>For UK numbers, add a prefix and use 'vcs2'</td>
        <td>Phone</td>
        <td>($1/44/)</td>
        <td>90044$2@vcs2</td>
    </tr>
    <tr>
        <td>For UK numbers starting with a 7, add '90044' as a prefix, add '123@mobilevcs' as a suffix</td>
        <td>Phone</td>
        <td>($1/44/)($2/^7/)</td>
        <td>90044$2{}123@mobilevcs</td>
    </tr>
    <tr>
        <td>For unrecognized all-digit strings, use '@vcs3' as a suffix</td>
        <td>Strip</td>
        <td>($1/(\d){6,}/)</td>
        <td>$1@vcs3</td>
    </tr>
    <tr>
        <td>Replace + with 00</td>
        <td>Strip</td>
        <td>($1/\+(\d)+/)</td>
        <td>$1{/\+/00/}</td>
    </tr>
    <tr>
        <td>Replace an alphanumeric regex e.g. (.*)@example.com and replace with \1.endpoint@vc.example.com</td>
        <td>Raw</td>
        <td>($1/(.*)@example.com/)</td>
        <td>$1{/@example.com$/.endpoint@vc.example.com/}</td>
    </tr>
</table>




## Retrieving dial transforms [GET]
GET method performed on the `/dialTransforms` node.

Response is structured as a top-level `<dialTransforms total="N">` tag with potentially multiple `<dialTransform>` elements within it.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>Type</td>
        <td>raw | strip | phone</td>
        <td><p>The type of pre-processing to apply to this transform</p><p>Raw: produces one component $1</p><p>Strip: removes dots, dashes, spaces and produces one component $1</p><p>Phone: An international phone number produces two components $1 county code and $2 number</p></td>
    </tr>
</table>


+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + filter (string, optional) - Enter a filter to retrieve only those dial transforms that match the string.


+ Response 200
    + Body

            TODO: DialTransform object here

## Setting up and modifying dial transforms [POST]
* Creating: POST method to the `/dialTransforms` node
* Modifying: PUT to `/dialTransforms/<dialTransform id>`

#### match
If provided, the regular expression describing whether this rule will be applied. An empty string means “match all”.

This is a logically AND'd combination of regular expressions, each applied to a component of the pre-processed expression. The format is:

`($<componentnum_1>/<regex_1>/)($<componentnum_2>/<regex_2>/) ($<componentnum_3>/<regex_3>/)...`

For example:
* `($2/abc/)` Component2 must contain 'abc'
* `($1/^0/)($1/9$/)` Component1 must start with a 0 and end with a 9
* `($1/^44$/)($2/^7/)` Component1 must be '44' and component2 must start with a 7


#### transform
The replacement transform to be applied. This allows references to the pre-processed components, as well as one or more regular expression substitutions encased in curly braces with the following special strings replaced as described.

`$<componentnum>` Replace with component

`$<componentnum>{}` Replace with component

`$<componentnum>{/<matchregex1>/<replaceregex1/} {/<matchregex2>/<replaceregex2/}{/<matchregex3>/<replaceregex3/}...`

Replace with component, with all instances of matchregex1 replaced by replaceregex1, and subsequently matchregex2 replaced by replaceregex2, etc. Capture groups are supported.

Examples are:
* `abc` Replace everything with 'abc'
* `$1$2@t.com` Component1 followed by component2 followed by "@t.com"
* `$1{}123@t.com` Component1 followed by "123@t.com"
* `$1{/999/123/}@t.com` Component1 with all instances of '999' replaced by '123', followed by "@t.com"
* `$1{/\D//}{/^9//}@example.com` Component1 with all non-digits removed and leading 9 removed, followed by "@example.com"


+ Attributes (dialTransform)

+ Response 200
    + Body

            TODO: dialTransform needed

## Retrieving detailed information about an individual dial transform [GET /dialTransform/{dialTransformId}]
GET method performed on a `/dialTransform/<dialTransform id>` node. If the call branding profile id ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.

#### Examples

<table>
  <tr>
    <th>Example</th>
    <th>Type</th>
    <th>Match</th>
    <th>Transform</th>
  </tr>
  <tr>
    <td>For US numbers, use 'vcs1' directly</td>
    <td>Phone</td>
    <td>($1/01/)</td>
    <td>$2@vcs1</td>
  </tr>
  <tr>
    <td>For UK numbers, add a prefix and use 'vcs2'</td>
    <td>Phone</td>
    <td>($1/44/)</td>
    <td>90044$2@vcs2</td>
  </tr>
  <tr>
    <td>For UK numbers starting with a 7, add '90044' as a prefix, add '123@mobilevcs' as a suffix</td>
    <td>Phone</td>
    <td>($1/44/)($2/^7/)</td>
    <td>90044$2{}123@mobilevcs</td>
  </tr>
  <tr>
    <td>For unrecognized all-digit strings, use '@vcs3' as a suffix</td>
    <td>Strip</td>
    <td>($1/(\d){6,}/)</td>
    <td>$1@vcs3</td>
  </tr>
  <tr>
    <td>Replace + with 00</td>
    <td>Strip</td>
    <td>($1/\+(\d)+/)</td>
    <td>$1{/\+/00/}</td>
  </tr>
  <tr>
    <td>Replace an alphanumeric regex e.g. (.*)@example.com and replace with \1.endpoint@vc.example.com</td>
    <td>Raw</td>
    <td>($1/ (.*)@example.com/)</td>
    <td>$1{/@example.com$/.endpoint@vc.example.com/}</td>
  </tr>
</table>

+ Response 200
    + Body

            TODO: detailed dialTransform object goes here

# Group Setting Individual Features for a Call Leg

You can set, modify and retrieve on a per active call leg basis, these settings include whether a presentation should be restricted to single screen mode (i.e. one combined main and presentation video stream), or allowed to use separate video streams if this is supported by the receiving party.
---
**Note:** Setting individual parameters for a call leg overrides the values of the call leg profile.

---


# Group Call Branding Profile Methods
Call branding profiles were introduced in R1.6. They control the in- call experience for SIP (including Lync) calls, and the ability to customize text within invitations.

---
**Note:** that the use of callBrandingProfiles requires a branding license.

---

## Call Branding Profiles [/callBrandingProfiles{?offset,limit,usageFilter}]

## Retrieving Call Branding Profiles [GET]
Response is structured as a top-level `<callBrandingProfiles total="N">` tag with potentially multiple `<callBrandingProfiles>` elements within it.

+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + usageFilter (enum, optional) - Using unreferenced retrieves only those call branding profiles that are not referenced by global settings or any other object. This is a useful check before deleting a call branding profile
        + referenced
        + unreferenced

+ Response 200
    + Body

            TODO: List of callBrandingProfiles?

## Setting up and modifying call branding profiles [POST]
* Creating: POST method to the `/callBrandingProfiles` node
* Modifying: PUT to `/callBrandingProfiles/<call branding profile id>`

+ Attributes (callBrandingProfile)
+ Response 200
    + Body

            TODO: callBrandingProfile object, right about here <

## Retrieving detailed information about an individual call branding profile [GET /callBrandingProfiles/{callBrandingProfileId}]
GET method performed on a `/callBrandingProfiles/<call branding profile id>` node. If the call branding profile ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.

+ Response 200
    + Body

            TODO: callBrandingProfile object, right about here <


# Group DTMF Profile Methods
dtmfProfiles can be used to define a number of DTMF sequences that can be used to control audio – as explained in this section. The dtmfProfile does not define the ability to perform the actions, it defines the DTMF string that will invoke action. The definition for who has the authority to invoke that action within the coSpace is defined at the callLegProfile level.

If you are using the Meeting Server alongside third party solutions, or to replace an existing solution, then set the values to match the values that solution uses e.g. Lync conferencing uses *6 for both mute and unmute, so set toggleMuteSelfAudio to *6.

## DTMF Profiles [/dtmfProfiles{?offset,limit,usageFilter}]

## Retrieving DTMF Profiles [GET]
Response is structured as a top-level `<dtmfProfiles total="N">` tag with potentially multiple `<dtmfProfile>` elements within it.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>muteSelfAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to mute the audio being contributed to their call</td>
    </tr>
    <tr>
        <td>unmuteSelfAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to unmute their audio</td>
    </tr>
    <tr>
        <td>toggleMuteSelfAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to toggle between mute and unmute audio from themselves</td>
    </tr>
    <tr>
        <td>muteAllExceptSelfAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to mute all other participants in the call</td>
    </tr>
    <tr>
        <td>unmuteAllExceptSelfAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to unmute all other participants in the call.</td>
    </tr>
    <tr>
        <td>startRecording</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to start recording the active call. Present from version 1.9 onwards</td>
    </tr>
    <tr>
        <td>stopRecording</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to stop recording the active call. Present from version 1.9 onwards</td>
    </tr>
    <tr>
        <td>muteAllNewAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to mute all new participants. Sets joinAudioMuteOverride Call object to true. Present from version 1.9 onwards</td>
    </tr>
    <tr>
        <td>unmuteAllNewAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to unmute all new participants. . Sets joinAu- dioMuteOverride Call object to false. Present from version 1.9 onwards</td>
    </tr>
    <tr>
        <td>defaultMuteAllNewAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to use the audio mute value from the call leg profile for new participants. Present from version 1.9 onwards</td>
    </tr>
    <tr>
        <td>muteAllNewAndAllExceptSelfAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to mute all new participants and all other participants in the call. Sets joinAudioMuteOverride in the call object to `true` and mutes all call legs except for the issuer. This requires ‘muteOthersAllowed’ to be ‘true’ in the call leg profile of the issuer. Present from version 1.9 onwards</td>
    </tr>
    <tr>
        <td>unmuteAllNewAndAllExceptSelfAudio</td>
        <td>String</td>
        <td>DTMF sequence to be used by a participant to unmute all new participants and all other participants in the call. Sets joinAudioMuteOverride in the call object to `false` and unmutes all call legs except for the issuer. This requires ‘muteOthersAllowed’ to be ‘true’ in the call leg profile of the issuer. Present from version 1.9 onwards</td>
    </tr>
</table>

+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + usageFilter (eunm, optional)  - This is a useful check before deleting the profile
        + referenced - retrieves just those DTMF profiles which are referenced in at least one place
        + unreferenced - retrieves only those DTMF profiles that are not referenced by global settings or any other object. 

+ Response 200
    + Body

            TODO: List of dtmf profiles

## Setting up and modifying DTMF Profiles [POST]
* Creating: POST method to the `/dtmfProfiles` node
* Modifying: PUT to `/dtmfProfiles/<dtmfProfileId>`

+ Attributes (dtmfProfile)
+ Response 200
    + Body

            TODO: dtmfProfile object

## Retrieving detailed information about an individual dtmfProfile [GET /dtmfProfiles/{dtmfProfileId}]
GET method performed on a `/dtmfProfiles/<dtmfProfileId>` node. If the dtmfProfile ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.

+ Response 200
    + Body

            TODO: detailed dtmfProfile should go here


# Group IVR Related Methods

## IVR Methods [/ivrs{?filter,offset,limit,tenantFilter}]

## Retrieving IVRs [GET]
Response is structured as a top-level `<ivrs total="N">` tag with potentially mutiple `<ivr>` elements within it.

Each `<ivr>` tag may include the following elements:

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>uri</td>
        <td>URI user part</td>
        <td>The URI to be used for this IVR</td>
    </tr>
</table>

+ Parameters
    + filter (string, optional) - Supply filter=`<string`> in the URI to return just those IVRs that match the filter
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + tenantFilter (ID, optional) - Supply tenantFilter to return only those IVRs associated with the specified tenant

+ Response 200
    + Body

            TODO: ivr something list

## Setting up and modifying IVRs [POST]
* Creating: POST method to the `/ivrs` node
* Modifying: PUT to `/ivrs/<ivrId>`

+ Attributes (ivr)
+ Response 200
    + Headers

            Location:ID

## Retrieving detailed information about an individual IVR [GET /ivrs/{ivrId}]
GET method performed on a `/ivrs/<ivr id>` node. If the IVR ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.

+ Response 200
    + Body

            TODO: ivr object needed

## IVR Branding Profile Methods [/ivrBrandingProfiles{?offset,limit,usageFilter}]
IVR branding profiles were introduced in R1.6. They can define the experience when dialing into an IVR.

## Retrieving IVR branding profiles [GET]
Response is structured as a top-level `<ivrBrandingProfiles total="N">` tag with potentially multiple `<ivrBrandingProfile>` elements within it.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>resourceLocation</td>
        <td>URL</td>
        <td>The HTTP or HTTPS URL that the IVR branding files will be retrieved from. This should be the "directory" in which the individual audio and graphic files reside. Details of these files are in the Acano solution Customization Guide</td>
    </tr>
</table>

+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + usageFilter (enum, optional) - This is a useful check before deleting an ivr branding profile
        + referenced
        + unreferenced - retrieves only those ivr branding profiles that are not referenced by global settings or any other object

+ Response 200
    + Body

            TODO: list of ivr branding profiles

## Setting up and modifying an IVR branding profile [POST]
* Creating: POST method to the `/ivrBrandingProfiles` node
* Modifying: PUT to `/ivrBrandingProfiles/<ivr branding profile id>`

+ Attributes (ivrBrandingProfile)
+ Response 200
    + Headers

            Location:ID

## Retrieving detailed information about an individual IVR branding profile [GET /ivrBrandingProfiles/{ivrBrandingProfileId}]
GET method performed on a `/ivrBrandingProfiles/<ivr branding profile id>` node. If the IVR branding profile ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.

+ Response 200
    + Body

            TODO: ivr branding profile object


# Group Participant Related Methods
Release 1.6 introduced the new object type or concept of a "participant" alongside the existing "callLeg" objects. The two should not be confused: for example, a "participant" can be a user's Lync session in which there might be separate call legs for audio and video, application sharing and IM.

Each Call Bridge involved in a distributed call has an overall picture of the "participant" list for that call, including participants hosted on other Call Bridges. For participants hosted on the Call Bridge being queried, you can enumerate the constituent call legs but for participants hosted on another Call Bridge, querying those participants yields the ID of the Call Bridge on which they are hosted. (You can then query the "owning" Call Bridge using the same participant ID in order to retrieve call leg-level detail.)

---
**Note:** Also see the section on `/call/callLegId/participants`

---

## Limiting a call’s participants
You can set a limit on the number of participants that are permitted to be in a call. You can set:
* A per-tenant participantLimit value, which imposes a limit on the total number of participants that are allowed to be active for that tenant.
* A `participantLimit` value within a `callProfile` object; this means that calls (e.g. coSpace instantiations) for whom that `callProfile` is in force will have the limit enforced

The callProfiles can be attached at the system, tenant or coSpace level, with the most specific taking effect

Therefore a call’s participantLimit depends on a number of factors.

If a call's `participantLimit` has been reached:
* No new participants can be added to it
* However:
    * A participant on an Acano client can use any combination of chat, use video, audio and show/receive a presentation. These elements comprise one callLeg, and count as one participant. Using a slaved endpoint does not increase the participant count.
    * A participant in a meeting on a SIP endpoint can use video, audio and receive a presentation. These elements comprise one callLeg, and count as one participant
    * A participant on a Lync client can use any combination of chat, use video, audio and send a presentation. Any combination of these elements counts as one participant but each element is a separate callLeg. (A received presentation is displayed in the main video stream.)
    * New call legs for existing participants can still be added; for example, a Lync presentation call leg to go with a Lync audio/video call leg

If creation of a call leg or participant via an API method fails because a limit has been reached, you see the appropriate `failureReason`. If an incoming connection attempt is unsuccessful because a limit has been reached, you also see an error message (with a separate callLegEnd reason for whether the call's own limit has been reached or that of its owning tenant).

## Participant Methods [/participants{?filter,offset,limit,tenantFilter,callBridgeFilter}]

## Retrieving participants [GET]
Response is structured as a top-level `<participants total=”N”>` tag with potentially multiple `<participant>` elements within it.

`<participant>` elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>name</td>
        <td>String</td>
        <td>The human-readable display name associated with this participant</td>
    </tr>
        <tr>
        <td>call</td>
        <td>ID</td>
        <td>The call that this participant is part of</td>
    </tr>
        <tr>
        <td>tenant</td>
        <td>ID</td>
        <td>If present, the id of the tenant that this participant is associated with</td>
    </tr>
    <tr>
        <td>callBridge</td>
        <td>ID</td>
        <td>If present, the remote, clustered, Call Bridge that this participant is connected to</td>
    </tr>
    <tr>
        <td>uri</td>
        <td>String</td>
        <td>The URI associated with this participant</td>
    </tr>
    <tr>
        <td>originalUri</td>
        <td>String</td>
        <td>The remote address first used by or signaled to the Call Bridge. From version 2.3.</td>
    </tr>
    <tr>
        <td>numCallLegs</td>
        <td>Number</td>
        <td>The current number of active call legs associated with this participant. This value will only be present for those participants local to the Call Bridge to which the request is made</td>
    </tr>
     <tr>
        <td>numCallLegs</td>
        <td>Number</td>
        <td>The current number of active call legs associated with this participant. This value will only be present for those participants local to the Call Bridge to which the request is made</td>
    </tr>
    <tr>
    <td>userJid</td>
    <td>String</td>
    <td>The userJid associated with this participant</td>
    </tr>
    <tr>
    <td>isActivator</td>
    <td>true|false</td>
    <td>Whether this participant is considered to be an "activator"
        <ul>
        <li>true - this participant is an activator - it is itself "activated" and that it will cause any currently-connected "de-activated" participants to become activated</li>
        <li>false - this participant is not an activator - it needs to wait for one or more "activator" participants to be present before it is fully "activated"</li>
        </ul>
        </td>
    </tr>
</table>

#### status (from version 2.2)
<table>
<tr>
<td>Name</td>
<td>Type</td>
<td>Description</td>
</tr>
<tr>
<td>state</td>
<td>initial|ringing|connected|onHold</td>
<td>The call state of this participant.</td>
</tr>
</table>


#### configuration (from version 2.2)
<table>
<tr>
<td>Name</td>
<td>Type</td>
<td>Description</td>
</tr>
<tr>
<td>importance</td>
<td>Number</td>
<td>The importance of this participant.</td>
</tr>
</table>

+ Parameters
    + filter (string, optional) - Supply filter=`<string`> in the URI to return just those active participants that match the filter
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + tenantFilter (ID, optional) - Supply the tenantFilter to return only those participants belonging to that tenant
    + callBridgeFilter (ID, optional) - Supply the callBridgeFilter to return only those participants located on that tenant

+ Response 200
    + Body

            TODO: List of participants


## Making a participant important if they are already in a conference [PUT /participants/{participantId}]
* Modifying: PUT to `/participants/<participantId>`
 
+ Parameters
    + participantId (ID)

+ Attributes (important)

+ Response 200
    + Headers

            Partcipantid: something to indicate importance assigned


## Retrieving detailed information on an individual participant [GET /participants/{participantId}]
GET method performed on a `/participants/<participantId>` node

If the participant ID supplied is valid, a “200 OK” response is received, with XML content of the form:

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>name</td>
        <td>String</td>
        <td>The human-readable display name associated with this participant</td>
    </tr>
        <tr>
        <td>call</td>
        <td>ID</td>
        <td>The call that this participant is part of</td>
    </tr>
        <tr>
        <td>tenant</td>
        <td>ID</td>
        <td>If present, the id of the tenant that this participant is associated with</td>
    </tr>
        <tr>
        <td>callBridge</td>
        <td>ID</td>
        <td>If present, the remote, clustered, Call Bridge that this participant is connected to</td>
    </tr>
    </tr>
        <tr>
        <td>uri</td>
        <td>String</td>
        <td>The URI associated with this participant</td>
    </tr>
    </tr>
        <tr>
        <td>numCallLegs</td>
        <td>Number</td>
        <td>The current number of active call legs associated with this participant. This value will only be present for those participants local to the Call Bridge to which the request is made</td>
    </tr>
    </tr>
        <tr>
        <td>userJid</td>
        <td>String</td>
        <td>The userJid associated with this participant</td>
    </tr>
    </tr>
    <tr>
        <td>isActivator</td>
        <td>bool</td>
        <td>Whether this participant is considered to be an "activator". true - this participant is an activator - it is itself "activated" and that it will cause any currently-connected "de-activated" participants to become activated. false - this participant is not an activator - it needs to wait for one or more "activator" participants to be present before it is fully "activated"</td>
    </tr>
</table>

+ Response 200
    + Body

            TODO: participant object here

## Retrieving a participant’s call legs [GET /participant/{participantId}/callLegs]
GET method performed on a `/participant/<participant ID>/callLegs` node retrieves the participant’s active call legs. If successful, the parameters described above for call legs are returned.

---
**Note:** that if this call leg is part of a distributed meeting (one hosted by more than one Call Bridge) then these details are only returned for local participants. If the participant’s call legs are hosted by another call Bridge the id of that Call Bridge is returned.

---
+ Response 200
    + Body

            TODO: participants call legs stuff <<


# Group User Related Methods
Users are created by synchronizing against LDAP servers (as discussed later); however, there are a number of methods for retrieving user information. This section covers:
* retrieving information on users
* retrieving detailed information on an individual user
* configuring user profiles

## User Methods [/users{?filter,offset,limit,tenantFilter,emailFilter,cdrTagFilter}]

## Retrieving Users [GET]
GET method performed on the `/users` node.

Response is structured as a top-level `<users total=”N”>` tag with potentially multiple `<user>` elements within it.

`<user>` elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>user id</td>
        <td>ID</td>
        <td></td>
    </tr>
        <tr>
        <td>userJid</td>
        <td>String</td>
        <td></td>
    </tr>
    <tr>
        <td>tenant</td>
        <td>ID</td>
        <td>The id of the tenant with which this user is associated, if applicable</td>
    </tr>
</table>

+ Parameters
    + filter (string, optional) - Supply filter=`<string`> in the URI to return just those users that match the filter
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + tenantFilter (ID, optional) - Supply tenantFilter to return only those users associated with the specified tenant
    + emailFilter (String) - Supply emailFilter to restrict results returned to those users whose email value exactly matches the specified email address(from version 2.1).
    + cdrTagFilter (String) - Supply cdrTagFilter to restrict results returned to those users whose cdrTag value exactly matches the specified cdrTag (from version 2.1).

+ Response 200
    + Body

            TODO: List of user objects would be nice here

## Retrieving Detailed Information on an Individual User [GET /users/{userId}]
GET method performed on a `/users/<userId>` node

If the user ID supplied is valid, a “200 OK” response is received, with XML content of the form:

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>user id</td>
        <td>ID</td>
        <td></td>
    </tr>
    <tr>
        <td>userJid</td>
        <td>String</td>
        <td></td>
    </tr>
    <tr>
        <td>tenant</td>
        <td>ID</td>
        <td>The id of the tenant with which this user is associated, if applicable</td>
    </tr>
    <tr>
        <td>name</td>
        <td>String</td>
        <td>User's display name</td>
    </tr>
    <tr>
        <td>email</td>
        <td>String</td>
        <td>e.g. first.last@mail.example.com</td>
    </tr>
    <tr>
        <td>authenticationId</td>
        <td>String</td>
        <td>The id used for authentication; this value is checked against values from the certificate that the user presents during certificate-based authentication. Present from version 1.8 onwards</td>
    </tr>
    <tr>
        <td>userProfile</td>
        <td>ID</td>
        <td>If present, this is the ID of the user profile associated with this user. This parameter is present from version 2.0 onwards.</td>
    </tr>
</table>

+ Response 200
    + Body

            TODO: user object <

## Retrieving a User’s coSpace Associations [GET /users/{userId}/usercoSpaces]
GET method performed on a `/users/<userId>/usercoSpaces` node retrieves the coSpaces that the user is a member of. (Also see the note on coSpace member permissions for auto-generated members.)

Response is structured as a top-level `<usercoSpaces total=”N”>` tag with potentially multiple `<usercoSpace>` elements within it.

`<usercoSpace>` elements follow the general form on the left.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>coSpace</td>
        <td>ID</td>
        <td></td>
    </tr>
</table>

+ Response 200
    + Body

            TODO: need user cospace node list

## User Profile Methods [/userProfiles{?offset,limit,usageFilter}]
User profiles control the facilities provided to the users in the profile, for instance whether they can create new coSpaces, create new calls, make phone calls, slave SIP endpoints, allowed to send and receive chat messages when in a point to point call with another user. For more information see also Section 14.

## Retrieving user profiles [GET]
GET method performed on the `/userProfiles` node.

Response is structured as a top-level `<userProfiles total="N">` tag with potentially multiple `<userProfile>` elements within it.
<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>canCreateCoSpaces</td>
    <td>true|false</td>
    <td>Whether a user associated with this user profile is permitted to create new coSpaces</td>
  </tr>
  <tr>
    <td>canCreateCalls</td>
    <td>true|false</td>
    <td>Whether a user associated with this user profile is permitted to create new calls</td>
  </tr>
  <tr>
    <td>canUseExternalDevices</td>
    <td>true|false</td>
    <td>Whether a user associated with this user profile is permitted to use slave SIP devices</td>
  </tr>
  <tr>
    <td>canMakePhoneCalls</td>
    <td>true|false</td>
    <td>Whether a user associated with this user profile will be displayed the option to make phone calls in the client</td>
  </tr>
  <tr>
    <td>userToUserMessagingAllowed</td>
    <td>true|false</td>
    <td>Whether a user associated with this user profile will be allowed to send and receive messages when in a point to point call with another user</td>
  </tr>
  <tr>
    <td>audioParticipationAllowed</td>
    <td>true|false</td>
    <td>Whether or not a user associated with this user profile and using the Cisco Meeting App will be allowed to send or receive live audio when in a call. This restriction does not apply to dialing directly into the call via SIP, or slaving to a SIP endpoint.This parameter is present from version 2.0 onwards.</td>
  </tr>
  <tr>
    <td>videoParticipationAllowed</td>
    <td>true|false</td>
    <td>Whether or not a user associated with this user profile will be allowed to send or receive live video when in a call. This restriction does not apply to dialing directly into the call via SIP, or slaving to a SIP endpoint.This parameter is present from version 2.0 onwards.</td>
  </tr>
  <tr>
    <td>presentationParticipationAllowed</td>
    <td>true|false</td>
    <td>Whether or not a user associated with this user profile will be allowed to send or receive presentation media when in a call. This restriction does not apply to dialing directly into the call via SIP, or slaving to a SIP endpoint.This parameter is present from version 2.0 onwards.</td>
  </tr>
  <tr>
    <td>hasLicense</td>
    <td>true|false</td>
    <td>Whether or not a user associated with this user profile has a Cisco user license.This parameter is present from version 2.0 onwards.</td>
  </tr>
  <tr>
    <td>canReceiveCalls</td>
    <td>true|false</td>
    <td>Determines whether or not a user associated with this user profile can receive incoming calls using the Cisco Meeting App. This parameter is present from version 2.1 onwards</td>
  </tr>
  <tr>
    <td>canSendEmailInvite</td>
    <td>true|false</td>
    <td>Determines whether or not a Cisco Meeting App user associated with this user profile can email invitations to a meeting space. This parameter is present from version 2.3 onwards</td>
  </tr>
</table>


+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + usageFilter (enum, optional) - This is a useful check before deleting a user profile
        + referenced - to retrieve just those user profiles which are referenced in at least one place
        + unreferenced - retrieves only those user profiles that are not referenced by global settings or any other object

+ Response 200
    + Body

            TODO: List of user profiles

## Setting up and modifying user profiles [POST]
* Creating: POST method to the `/userProfiles` node
* Modifying: PUT to `/userProfiles/<user profile id>`

+ Attributes (userProfile)
+ Response 200
    + Headers

            Location:ID

## Retrieving detailed information about an individual user profile [GET /userProfiles/{userProfileId}]
GET method performed on a `/userProfiles/<user profile id >` node. If the user profile ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.

+ Response 200
    + Body

            TODO: detailed user profile object goes here


# Group System Related Methods
This chapter details the API methods related to management of the system. The chapter covers:
* retrieving system status
* retrieving system alarm status
* retrieving system database status
* retrieving and setting the URI of the CDR receivers
* retrieving and setting the global profile
* retrieving licensing information
* configuring the TURN server
* configuring the Web Bridge
* configuring the Call Bridge
* configuring Call Bridge groups
* configuring the XMPP server
* configuring Call Bridge clustering
* configuring the Recorder
* configuring the Streamer
* configuring the SIP Endpoint Registrar
* system load
* system diagnostics

## System Methods [/system]

## Retrieving System Status [GET /system/status]
GET method performed on the `/system/status` node.

Returns the elements on the left within a `<status>` element

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>softwareVersion</td>
        <td>String</td>
        <td>The software version currently running on the Call Bridge</td>
    </tr>
    <tr>
        <td>uptimeSeconds</td>
        <td>Number</td>
        <td>The length of time that the unit has been running</td>
    </tr>
    <tr>
        <td>activated</td>
        <td>bool</td>
        <td>Whether the Call Bridge is currently activated (licensed); if not, it will have a reduced call capacity. Currently always true for a Meeting Server.</td>
    </tr>
    <tr>
        <td>clusterEnabled</td>
        <td>bool</td>
        <td>If set to true then the Call Bridge is currently running with clustering enabled. This parameter is present from version 2.0 onwards</td>
    </tr>
    <tr>
        <td>cdrTime</td>
        <td>Number</td>
        <td>The current timestamp as would be written to a CDR generated at the time the request is received. This will be in the same format as the "time" field in CDRs themselves (see RFC 3339, for instance "2014-02-11T12:10:47Z").</td>
    </tr>
    <tr>
        <td>callLegsActive</td>
        <td>Number</td>
        <td>The number of active call legs at the time of the request</td>
    </tr>
    <tr>
        <td>callLegsMaxActive</td>
        <td>Number</td>
        <td>The highest number of call legs simultaneously active on this Acano solution</td>
    </tr>
    <tr>
        <td>callLegsCompleted</td>
        <td>Number</td>
        <td>The total number of call legs that have been active but are no longer connected / present</td>
    </tr>
    <tr>
        <td>audioBitRateOutgoing</td>
        <td>Number</td>
        <td>The current total bit rate (in bits per second) summed over all outgoing audio streams (audio media sent from the Acano solution to a remote party)</td>
    </tr>
    <tr>
        <td>audioBitRateIncoming</td>
        <td>Number</td>
        <td>The current total bit rate for incoming audio streams</td>
    </tr>
    <tr>
        <td>videoBitRateOutgoing</td>
        <td>Number</td>
        <td>The current total bit rate for outgoing video streams</td>
    </tr>
    <tr>
        <td>videoBitRateIncoming</td>
        <td>Number</td>
        <td>The current total bit rate for incoming video streams</td>
    </tr>
    <tr>
        <td>cdrCorrelatorIndex</td>
        <td>Number</td>
        <td>The correlator index of the next CDR record that will be sent. When no CDR records have been sent, this will have the value of 0. (From version 2.2).</td>
    </tr>
</table>

+ Response 200
    + Body

            TODO: System status object

## Retrieving System Alarm Status [GET /system/alarms]
GET method performed on the `/system/alarms` node. An offset and limit can be supplied to retrieve alarm conditions other than those in the first page of the notional list. This method returns a table detailing the currently active system-wide alarm conditions.

Returns a list of individual `<alarm>` elements. If there are no currently active alarm conditions, this list will be empty. Each active alarm condition will have an “alarm” tag, which contains:

#### type
* callBrandingResourceInvalid - the supplied resource has an invalid format; the call branding profile is specified by the accompanying "callBrandingProfiles" GUID parameter and the problematic file is specified by the accompanying "fileName" text parameter
* callBridgeConnectionFailure - the CallBridge has failed to establish a connection to one of its peer clustered Call Bridges which specified by the accompanying "callBridge" GUID parameter
* callDistributionFailure - the CallBridge has failed to establish a distributed link for one of its active calls; the Call Bridge that the link should have been to is identified by the accompanying "callBridgeName" text parameter, and the call is present as the "call" GUID parameter
* cdrConnectionFailure - the Acano solution has failed to establish a connection to its configured CDR receiver, and therefore may be unable to push out new call detail records
* databaseClusternodeOutofSync - a node in the database cluster is out of sync and is not syncing
* databaseConnectionError - the Acano solution has failed to establish a connection to its database
* guestAccountConnectionFailure - the Acano solution has been unable to establish a connection to the configured Web Bridge in order to allow guest logins
* ivrBrandingResourceInvalid - the supplied resource has an invalid format; the IVR branding profile is specified by the accompanying "ivrBrandingProfile" GUID parameter and the problematic file is specified by the accompanying "fileName" text parameter
* recorderLowDiskSpace (1.9 onwards) - a recorder has limited disk space; the recorder is specified by the accompanying "recorder" GUID parameter
* recorderUnavailable (1.9 onwards) - the Acano callbridge has not managed to successfully contact a configured recorder; the recorder is specified by the accompanying "recorder" GUID parameter
* turnServerUnavailable - the Acano CallBridge has not managed to contact a configured TURN server; this TURN server is specified by the accompanying "turnServer" GUID parameter
* webBridgeArchivePushFailure - the Acano CallBridge has not been able to push a required customization archive to a Web Bridge
* webBridgeArchiveRetrievalFailure - the Acano CallBridge has not been able to retrieve a required Web Bridge customization archive
* webBridgeBackgroundImagePushFailure - the Acano CallBridge has not been able to push a required customized background image file to a Web Bridge
* webBridgeBackgroundImageRetrievalFailure - the Acano CallBridge has not been able to retrieve a required customized background image file
* webBridgeLoginLogoImagePushFailure — the Acano CallBridge has not been able to push a required customized login logo image to a Web Bridge
* webBridgeLoginLogoImageRetrievalFailure - the Acano CallBridge has not been able to retrieve a required customized login logo image file
* xmppAuthenticationRegistrationFailure - the Acano solution has not been able to register successfully with the named XMPP authentication component
* xmppRegistrationFailure - the Acano solution has not been able to register successfully with its configured XMPP server

#### failureReason
* authenticationFailure
* connectFailure - a failure to connect to a remote destination;for example, a TCP or TLS connection was not able to be established
* dataFormatInvalid - the Acano CallBridge is configured to use a particular data set (for example, a remotely-hosted resource file) that it then found was not in a useable format
* destinationReadOnly - a critical resource, for example the database, was found by the Acano Call Bridge to be read only when write access was needed
* dnsFailure - a failure to resolve the hostname of a remote destination; for example, as part of the process of establishing a connection to a remote system
* error
* fileNotFound - the alarm condition was raised because the Acano call bridge failed to load a required file; for instance, if the resourceArchive needed for a web bridge was not able to be retrieved from a remote server
* fileSizeLimitExceeded - the Acano CallBridge is configured to use a resource, for example, a remotely-hosted resource file, that was not able to be retrieved because it exceeded an internal file size limit
* internalServerError - the Acano CallBridge was not able to perform an operation, for example the upload or download of a resource file, because the remote party returned "internal server error" when the operation was attempted
* serviceUnavailable

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>Id</td>
        <td>ID</td>
        <td>A unique ID for this instance of this fault condition</td>
    </tr>
    <tr>
        <td>activeTimeSeconds</td>
        <td>Number</td>
        <td>The amount of time that this alarm condition has been active.</td>
    </tr>
    <tr>
        <td>type</td>
        <td>String</td>
        <td>see type</td>
    </tr>
    <tr>
        <td>failureReason</td>
        <td>String</td>
        <td>For some of the alarm types, additional information is provided about the cause of that particular failure: see failureReason</td>
    </tr>
</table>

+ Response 200
    + Body

            TOTO: alarm object goes here 

## Retrieving System Database Status [GET /system/database]
GET method performed on the `/system/database` node.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>clustered</td>
        <td>enabled | disabled</td>
        <td>Whether database clustering is enabled.</td>
    </tr>
    <tr>
        <td>Cluster</td>
        <td></td>
        <td>If clustering is enabled then the "cluster" element includes the elements on the left</td>
    </tr>
    <tr>
        <td>Error</td>
        <td>String</td>
        <td>Error description</td>
    </tr>
    <tr>
        <td>totalNodes</td>
        <td>Number</td>
        <td>Number of database nodes in the cluster</td>
    </tr>
    <tr>
        <td>nodeInUse</td>
        <td>String</td>
        <td>Which database node is currently in use (the master)</td>
    </tr>
    <tr>
        <td>node</td>
        <td></td>
        <td>
            <table>
                <tr>
                    <th>Attribue</th>
                    <th>Description</th>
                <tr>
                <tr>
                    <td>hostname</td>
                    <td>the hostname or IP address of the node</td>
                <tr>
                <tr>
                    <td>up</td>
                    <td>if the node is visible from this CallBridge (true|false)</td>
                <tr>
                <tr>
                    <td>syncBehind</td>
                    <td>approximate number of bytes that this node is behind the current state of the master. 0 means in sync, and -1 means the calculation is unavailable</td>
                <tr>
                <tr>
                    <td>master</td>
                    <td>whether this node is the master database (true|false), if set to false it is a host standby (slave)</td>
                <tr>
            </table>
        </td>
    </tr>
</table>

+ Response 200
    + Body

            TODO: system database object



## CDR Receiver URI Methods [/system/cdrReceivers{?offset,limit}]
You can find the URIs of the CDR receivers through the API (as well as the Web Admin Interface). Issue a GET on the `/system/cdrReceivers` node to retrieve the URIs that are the full URLs of the configured CDR receivers.

---
**Note:** To support multiple CDR receivers in R1.8, `/system/cdrReceiver` is deprecated, use the new `/system/cdrReceivers`

---

This method accesses the URIs of the CDR receivers using the Web Admin Interface **Configuration > CDR settings** page.

## Retrieving the CDR Receivers URI [GET]
GET method performed on the `/system/cdrReceivers` node.

Response is structured as a top-level `<cdrReceivers total="N">` tag with potentially multiple `<cdrReceiver>` elements within it.

Each `<cdrReceiver>` tag may include the following element:

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>uri</td>
        <td>String</td>
        <td>Full URL of the configured CDR receiver address</td>
    </tr>
</table>

---
**Note:** GET of `/system/cdrReceivers/<cdr receiver id>` allows you to retrieve the configuration for a single specified CDR receiver.

---

+ Parameters
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list

+ Response 200
    + Body

            TODO: cdr receiver object list

## Setting the CDR Receivers URI [POST]
Set the CDR receiver URI through the API (as well as the Web Admin Interface). You can issue a PUT or a POST on the `/system/cdrReceivers node`

Use POST and specify a "url" value to create and configure the CDR receiver in one operation, or use PUT to initially create the CDR receiver but configure the “url” separately later.

If the creation is successful, you should receive a “200 OK” response and a `Location: /api/v1/system/cdrReceivers/<cdr receiver id>` object reference; if too many CDR receivers are already configured, you will receive a "tooManyCdrReceivers" error (in a "failureDetails" section).

---
**Note:** To support multiple CDR receivers in R1.8, `/system/cdrReceiver` is deprecated, use the new `/system/cdrReceivers`

**Note:** If you perform a PUT with an empty "url" to the legacy `/system/cdrReceiver` node, any GUID associated with that CDR receiver is removed, and effectively that CDR receiver is no longer present. If you later PUT a non-empty "url" value to the same (legacy) node, a new GUID will be generated for that CDR receiver.

If you perform a PUT with an empty "url" to a non-legacy CDR receiver `/system/cdrReceivers/<cdr receiver id>` then that CDR receiver remains with the same GUID, but no "url" value. It will continue to show up in GET operations. This is because there is an explicit "DELETE" method for the new CDR receiver objects, whereas for the legacy CDR receiver the only deconfiguration method is to set its location to the empty value.

---

To set or update the URIs of the CDR receivers via the Web Admin Interface use the **Configuration > CDR settings** page.

+ Attributes (cdrReceiver)

+ Response 200
    + Headers

            Location:ID

## Global Profile Methods [/system/profiles]

## Retrieving the Global Profile [GET]
GET to `/system/profiles` returns the values described in the following section.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>callLegProfile</td>
        <td>ID</td>
        <td>Sets the top level call leg profile to the one with the specified ID</td>
    </tr>
    <tr>
        <td>callProfile</td>
        <td>ID</td>
        <td>Sets the top level call profile to the one specified</td>
    </tr>
    <tr>
        <td>dtmfProfile</td>
        <td>ID</td>
        <td>Sets the top level DTMF profile to the one specified</td>
    </tr>
    <tr>
        <td>userProfile</td>
        <td>ID</td>
        <td>Sets the top level user profile to the one specified</td>
    </tr>
    <tr>
        <td>ivrBrandingProfile</td>
        <td>ID</td>
        <td>Sets the top level IVR branding profile to the one specified</td>
    </tr>
    <tr>
        <td>callBrandingProfile</td>
        <td>ID</td>
        <td>Sets the top level call branding profile to the one specified</td>
    </tr>
</table>

+ Response 200
    + Body

            TODO: get system profile stuff for dis right here <

## Setting the Global Profile [POST]
You can set (or unset) the callLegProfile ID value under `/system/profiles` to impose (or remove) a top-level profile.

PUT or POST to `/system/profiles`. Supplying an empty value unsets the top-level profile.

+ Attributes (systemProfile)
+ Response 200



# Group TURN Server Methods [/turnServers{?filter,offset,limit}]
---
**Note**: The TURN Server is not available on the Cisco Meeting Server 2000.

---

## Retrieving Information on TURN Servers [GET]
GET method performed on the `/turnServers` node.

Response is structured as a top-level `<turnServers total="N">` tag with potentially multiple `<turnServer>` elements within it.
Each `<turnServer>` tag may include the following elements.

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>serverAddress</td>
        <td>String</td>
        <td>The address for the Call Bridge to use to reach this TURN server</td>
    </tr>
    <tr>
        <td>clientAddress</td>
        <td>String</td>
        <td>The address that Cisco Meeitng Apps should use to reach this TURN server</td>
    </tr>
</table>

+ Parameters
    + filter (string, optional) - Supply filter=`<string`> in the URI to return just those TURN servers that match the filter
    + offset (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list

+ Response 200
    + Body


            TODO: List of turn servers

## Setting up and modifying TURN servers [POST]
* Creating: POST method to the `/turnServers` node
* Modifying: PUT to `/turnServers/<turn server id>`

+ Attributes (turnServer)

+ Response 200
    + Headers

            Location:ID

## Retrieving detailed information about an individual TURN server [GET /turnServers/{turnServerId}]
GET method performed on a `/turnServers/<turn server id>` node. If the turn server ID supplied is valid, a “200 OK” response is received, with XML content:

<table>
    <tr>
        <th>Response elements</th>
        <th>Type/Value</th>
        <th>Description/Notes</th>
    </tr>
    <tr>
        <td>address</td>
        <td>String</td>
        <td></td>
    </tr>
    <tr>
        <td>portNumber</td>
        <td>Number</td>
        <td></td>
    </tr>
    <tr>
        <td>reachable</td>
        <td>bool</td>
        <td>true if this TURN server is currently reachable, false if it is not</td>
    </tr>
    <tr>
        <td>roundTripTimeMs</td>
        <td>Number</td>
        <td>If this TURN server is reachable, the round trip time (in milliseconds) of the Call Bridge's path to it.</td>
    </tr>
    <tr>
        <td>mappedAddress</td>
        <td>String</td>
        <td>if populated, indicates the source IP and source port that the TURN server saw the STUN binding request coming from when the Acano Call Bridge performed TURN server reachability checks. This can be different to the IP address of the Acano Call Bridge in deployments where there is a NAT between the Call Bridge and the TURN server</td>
    </tr>
    <tr>
        <td>mappedPortNumber</td>
        <td>Number</td>
        <td></td>
    </tr>
    <tr>
        <td>numAllocations</td>
        <td>Number</td>
        <td>Number of active TURN allocations on the Acano TURN server</td>
    </tr>
</table>

+ Response 200
    + Body

            TODO: TURN Server object


# Group Web Bridge Methods [/webBridges{?filter,offset,limit,tenantFilter}]

## Retrieving Information on Web Bridges [GET]

Response is structured as a top-level <webBridges total="N"> tag with potentially multiple <webBridge> elements within it. Each <webBridge> tag may include the following elements.

+ Parameters
    + filter (string, optional) - Supply filter=`<string`> in the URI to return just those Web Bridges that match the filter
    + offset (number, optional) - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number, optional) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list
    + tenantFilter (ID, optional) - Supply tenantFilter to return only those Web Bridges associated with the specified tenant

+ Response 200
    + Body

            TODO: Web Bridge
            
## Setting Up and Modifying a Web Bridge [POST]

* Creating: POST method to the `/webBridges` node
* Modifying: PUT to `/webBridges/<web bridge id>`

+ Attributes (WebBridge)

+ Response 200
    + Headers

            Location:ID
            
## Retrieving detailed information about an individual Web Bridge [GET /webBridges/{webbridgeId}]

GET method performed on a `/webBridges/<webbridgeId>` node. If the web bridge ID supplied is valid, a “200 OK” response is received, with XML content described in the previous section.

+ Parameters
    
    + webbridgeId (ID)
    
+ Response 200
    + Headers

            Location:ID
            
## Updating the Web Bridge customization [POST /webBridges/<webbridgeId>/updateCustomization]
A POST to `/webBridges/<webbridgeId>/updateCustomization` node causes any configured customization archive for the specified Web Bridge to be re-retrieved and pushed to that Web Bridge. For example, this allows the contents of a customization archive to be changed, and for those changes to take effect without needing to restart either the Call Bridge or the Web Bridge. 

+ Attributes ()

+ Response 200
    + Headers

            Location:ID

## Retrieving diagnostics on a Web Bridge - from version 2.2 [GET /webBridges/{webbridgeId}/status]

GET method performed on a `/webBridges/<webbridgeId>/status` node. If the web bridge ID supplied is valid, a “200 OK” response is received, with XML content matching the table below.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>status</td>
    <td>unused|</td>
    <td>The Web Bridge is not used by the queried Call Bridge</td>
  </tr>
  <tr>
    <td> </td>
    <td>success|</td>
    <td>The Web Bridge is connected to the queried Call Bridge</td>
  </tr>
  <tr>
    <td> </td>
    <td>connectionFailure</td>
    <td>The Web Bridge could not connect to the queried Call Bridge</td>
  </tr>
</table>


+ Response 200
    + Body

            TODO: something
            
# Group Call Bridge Methods [/callBridges{?offset,limit}]

## Retrieving Information on Call Bridges [GET]

GET method performed on the `/callBridges` node. 

Response is structured as a top-level <callBridges total="N"> tag with potentially multiple <callBridge> elements within it. Each <callBridge> tag may include the following elements:

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>name</td>
    <td>String</td>
    <td>The unique name for this configured clustered Call Bridge</td>
  </tr>
</table>

+ Parameters
    + offset (number) - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list

+ Response 200
    + Body

            TODO: Call Bridge
            
## Setting Up and Modifying a Call Bridge [POST]

* Creating: POST method to the `/callBridges` node
* Modifying: PUT to `/callBridges/<callbridgeId>`

+ Attributes (call bridge)

+ Response 200
    + Headers

            Location:ID
            
## Retrieving detailed information about an individual Call Bridge [GET /callBridges/{callbridgeId}]

GET method performed on a “/callBridges/<call bridge id>” node. If the call bridge ID supplied is valid, a “200 OK” response is received, with XML content described in the previous section.

+ Response 200
    + Body

            TODO: something
            
# Group Call Bridge Group Methods [/callBridgeGroups{?offset,limit}]

## Retrieving Information on Call Bridge Groups [GET]

GET method performed on the `/callBridgeGroups` node. Response is structured as a top-level <callBridges total="N"> tag with potentially multiple <callBridgeGroup> elements within it.
Each <callBridgeGroup> tag may include the following elements:

name (string) - Name of Call Bridge group. 

+ Parameters
    + offset (number) - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list
    + limit (number) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list

+ Response 200
    + Body

            TODO: Call Bridge
            
## Setting Up and Modifying a Call Bridge Group[POST]

* Creating: POST method to the `/callBridgeGroups` node
* Modifying: PUT to `/callBridgeGroups/<call bridge groupId>`


+ Attributes (call bridge group)

+ Response 200
    + Headers

            Status:call bridge

## Retrieving detailed information about an individual Call Bridge Group [GET /callBridgeGroups/{call bridge groupId}]

GET method performed on a `/callBridgeGroups/<call bridge groupId>` node. If the Call Bridge group ID supplied is valid, a “200 OK” response is received, with XML content described in the previous section.

+ Response 200
    + Headers

            Status:call bridge group


# Group XMPP Methods [/system/configuration/xmpp node]

## Retrieving the XMPP server details [GET]

Issue a GET on the new `/system/configuration/xmpp node` to retrieve the information below.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>uniqueName</td>
    <td>String</td>
    <td>The name by which this Call Bridge is known by the XMPP server</td>
  </tr>
  <tr>
    <td>domain</td>
    <td>String</td>
    <td>The domain that the Call Bridge is using for XMPP</td>
  </tr>
  <tr>
    <td>sharedSecret</td>
    <td>String</td>
    <td>The password value set by the XMPP server for this Call Bridge when it was configured</td>
  </tr>
  <tr>
    <td>serverAddressOverride</td>
    <td>String</td>
    <td>If supplied, the Call Bridge is connecting to an XMPP server at the specified address rather than using the "domain" to discover it (via DNS).</td>
  </tr>
</table>

+ Response 200
    + Body

            TODO: something

## Setting Up and Modifying an XMPP server [POST]

Issue a PUT or a POST on the new `/system/configuration/xmpp` node

+ Attributes (xmpp)

+ Response 200
    + Headers

            Location:ID

# Group Call Bridge Cluster Methods [/system/configuration/cluster node]

## Retrieving the Call Bridge Cluster details [GET]

Issue a GET on the `/system/configuration/cluster node` to retrieve the information below.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>uniqueName</td>
    <td>String</td>
    <td>The name by which this call bridge is known within the call bridge cluster; this should match the "name" value for its entry in the /callBridges table</td>
  </tr>
  <tr>
    <td>peerLinkBitRate</td>
    <td>Number</td>
    <td>The maximum media bit rate specified to use for call distribution connections between call bridges</td>
  </tr>
  <tr>
    <td>participantLimit</td>
    <td>Number</td>
    <td>If supplied, the maximum number of participants allowed to be active on this Call Bridge; when this limit is reached, new incoming SIP calls will be rejected</td>
  </tr>
  <tr>
    <td>loadLimit</td>
    <td>Number</td>
    <td>If supplied, the maximum number of load units to be used on this Call Bridge (from version 2.1)</td>
  </tr>
  <tr>
    <td>newConferenceLoadLimitBasisPoints</td>
    <td>Number</td>
    <td>Basis points (1 in 10,000) of the load limit at which incoming calls to non-active conferences will be disfavored, ranges from 0 to 10000, defaults to 5000 (50% load). Value is scaled relative to load limit. (From version 2.1)</td>
  </tr>
  <tr>
    <td>existingConferenceLoadLimitBasisPoints</td>
    <td>Number</td>
    <td>Basis points of load limit at which incoming calls to this Call Bridge will be rejected, ranges from 0 to 10000, defaults to 8000 (from version 2.1)</td>
  </tr>
</table>

+ Response 200
    + Headers

            Name: Call bridge cluster details


## Setting Up and Modifying the Call Bridge Cluster [POST]

Issue a PUT or a POST on the '/system/configuration/cluster node`

+ Attributes (call bridge cluster)

+ Response 200
    + Headers

            Node: cluster bridge details

# Group Recorder Methods [/recorders/{?offset,limit}]

---
**Note**: The Recorder is not available on the Cisco Meeting Server 2000.

---

---
**Note**: At the end of recording a meeting, the recording is automatically converted to MP4. The converted file is suitable for placing within a document storage/distribution system, for example, in a network file system (NFS) they are stored in the NFS folder `spaces/<space Id>`; tenant spaces are stored in `tenants/<tenant ID>/spaces/<space Id>`.

---


## Retrieving recorder operations [GET]

GET method performed on the `/recorders` node. 

Response is structured as a top-level <recorders total="N"> tag with potentially multiple <recorder> elements within it. Each <recorder> tag may include these elements:

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>url</td>
    <td>URL</td>
    <td>The address that theCall Bridge uses to reach this recorder</td>
  </tr>
  <tr>
    <td>callBridge</td>
    <td>ID</td>
    <td>The ID of the Call Bridge associated with this recorder (from version 2.1)</td>
  </tr>
  <tr>
    <td>callBridgeGroup</td>
    <td>ID</td>
    <td>The ID of the Call Bridge group associated with this recorder (from version 2.1)</td>
  </tr>
</table>

+ Parameters
    + offset (number) - An "offset" can be supplied to retrieve recorders other than those in the first "page" of the notional list.
    + limit (number) - A "limit" can be supplied to retrieve recorders other than those in the first "page" of the notional list.
    
+ Response 200
    + Headers

            Info: recorder
    
## Setting up and modifying recording operations [POST]

* Creating: POST method to the /recorders " node
* Modifying: PUT to "/recorders/<recorder id>"

+ Attributes (recorder)

+ Response 200
    + Headers

            Location:ID



## Retrieving detailed information about an individual recording node[GET /recorders/{recorderId}]

GET method performed on a `/recorders/<recorderId>` node. If the recorder ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.

+ Parameters
    + recorderId (ID) - 
    
+ Response 200

    + Headers

            TODO: recorder details


## Retrieving diagnostics on a Recorder[GET /recorders/{recorder Id}/status]

GET method performed on a `/recorders/<recorderId>/status` node. If the recorder ID supplied is valid, a “200 OK” response is received, with XML content matching the table below.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>status</td>
    <td>unused|</td>
    <td>The Recorder is not used by the queried Call Bridge</td>
  </tr>
  <tr>
    <td> </td>
    <td>success|</td>
    <td>The Recorder is connected to the queried Call Bridge</td>
  </tr>
  <tr>
    <td> </td>
    <td>invalidAddress|</td>
    <td>The configured Recorder URL is invalid</td>
  </tr>
  <tr>
    <td> </td>
    <td>dnsFailure|</td>
    <td>The configured Recorder URL could not be resolved</td>
  </tr>
  <tr>
    <td> </td>
    <td>connectionFailure|</td>
    <td>The Recorder could not connect to the queried Call Bridge</td>
  </tr>
  <tr>
    <td> </td>
    <td>remoteFailure|</td>
    <td>A connection was established with the Recorder but received a failure response</td>
  </tr>
  <tr>
    <td> </td>
    <td>unknownFailure|</td>
    <td>An unknown failure occurred</td>
  </tr>
  <tr>
    <td> </td>
    <td>lowDiskSpace</td>
    <td>The Recorder has limited disk space available</td>
  </tr>
  <tr>
    <td>activeRecordings</td>
    <td>Number</td>
    <td>Total number of active recordings on this Recorder</td>
  </tr>
</table>

+ Response 200

    + Headers

            TODO: recorder diagnostics info

# Group Streamer methods [/streamers/{?offset,limit}]

---
**Note:**The Streamer is not available on the Cisco Meeting Server 2000.

---

## Retrieving streamer operations [GET]

GET method performed on the `/streamers` node.

Response is structured as a top-level <streamers total="N"> tag with potentially multiple <streamer> elements within it. Each <streamer> tag may include these elements: 

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>url</td>
    <td>URL</td>
    <td>The address that theCall Bridge uses to reach this streamer</td>
  </tr>
  <tr>
    <td>callBridge</td>
    <td>ID</td>
    <td>The ID of the Call Bridge associated with this streamer</td>
  </tr>
  <tr>
    <td>callBridgeGroup</td>
    <td>ID</td>
    <td>The ID of the Call Bridge group associated with this streamer</td>
  </tr>
</table>

+ Parameters
    + offset (number) - An "offset" can be supplied to retrieve recorders other than those in the first "page" of the notional list.
    + limit (number) - A "limit" can be supplied to retrieve recorders other than those in the first "page" of the notional list.
    
+ Response 200
    + Headers

            Info: recorder
            

## Setting up and modifying streaming operations [POST]

* Creating: POST method to the `/streamers` node
* Modifying: PUT to `/streamers/<streamerId>`

+ Attributes (streamer)

+ Response 200

    + Headers

            TODO: update streamer operation

## Retrieving detailed information about an individual streaming node [GET /streamers/{streamerId}]

GET method performed on a `/streamers/<streamerId>` node. If the streamer ID supplied is valid, a “200 OK” response is received, with XML content matching the section above.
    
+ Response 200
    + Headers

            Location:ID

# Group System Load Method [/system/load]

## System Load Method [GET]

GET method performed on the `/system/load` node.

### Response elements
mediaProcessingLoad(Number) - Current media processing load on the Call Bridge.

+ Response 200
    + Headers

            TODO: mediaProcessingLoadnumber

# Group Compatibility Profile Methods [/compatibilityProfiles/{?offset,limit,usageFilter}]

## Retrieving compatibility profile operations[GET]

GET method performed on the `/compatibilityProfiles` node.

Response is structured as a top-level <compatibilityProfiles total="N"> tag with potentially multiple <compatibilityProfile> elements within it. Each <compatibilityProfile> tag may include these elements:

#### Response elements

usageFilter (unreferenced/referenced) - Indicates whether the compatibility profile is referenced by another object.

+ Parameters
    + offset (number) - An "offset" can be supplied to retrieve compatibility profiles other than those in the first "page" of the notional list.
    + limit (number) - A "limit" can be supplied to retrieve compatibility profiles other than those in the first "page" of the notional list.
    + usageFilter (unreferenced/referenced) - Supply "usageFilter=unreferenced" in the request to retrieve only those compatibility profiles that are not referenced by another object. This is a useful check before deleting the profile. To retrieve just those compatibility profiles which are referenced in at least one place, you can supply "usageFilter=referenced".
    
+ Response 200
    + Headers

            Info: compatibility profiles

## Setting up and modifying compatibility profile operations [POST]

* Creating: POST method to the `/compatibilityProfiles` node
* Modifying: PUT to `/compatibilityProfiles/<compatibility profile id>`

+ Attributes (compatibility)

+ Response 200
    + Headers

            TODO: uppdate profile

# Group System Diagnostics Methods [/system/diagnostics{?offset,limit,coSpaceFilter,callCorrelatorFilter}]

## Retrieving system diagnostics [GET]

Issue a GET on the new '/system/diagnostics' node to retrieve the information below.

label (string) - Text description associated with the specified diagnostics log.

+ Parameters
    + offset (number) - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list.
    + limit (number) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list.
    + coSpaceFilter (ID) - If supplied, this filter restricts results returned to those diagnostics that correspond to the specified coSpace
    + callCorrelatorFilter (ID) - If supplied, this filter restricts results returned to those diagnostics that correspond to the specified callCorrelator

+ Response 200
    + Headers

            Label:string

## Retrieving an individual system diagnostic [GET /system/diagnostics/{diagnosticsId}]

Issue a GET on the /system/diagnostics/<diagnosticsId> node.

+ Parameters
    + diagnosticsId (ID)- 
    
+ Response 200
    + Headers

            Diagnostics:ID


## Retrieving the content of an individual system diagnostic [GET /system/diagnostics/{diagnosticsId}/contents] 

Issue a GET method on the `/system/diagnostics/<diagnosticsId>/contents` node to retrieve the data stored in the system diagnostic.

+ Response 200
    + Headers

            Diagnostics:contents


# Group LDAP Server Methods  [/ldapServers/{?filter,offset,limit}]

## Retrieving Information on LDAP Servers [GET]

GET method performed on the `/ldapServers` node.

Response is structured as a top-level <ldapServers total=”N”> tag with potentially multiple `<ldapServer>` elements within it. `<ldapServer>` elements returned follow the general form on the left.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>ldapServer id</td>
    <td>ID</td>
    <td> </td>
  </tr>
  <tr>
    <td>address</td>
    <td>String</td>
    <td> </td>
  </tr>
  <tr>
    <td>portNumber</td>
    <td>Number</td>
    <td> </td>
  </tr>
  <tr>
    <td>secure</td>
    <td>true|false</td>
    <td> </td>
  </tr>
</table>

+ Parameters
    + filter(string) - Supply filter=<string> in the URI to return just those LDAP servers that match the filter
    + offset(number) - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list (see above).
    + limit(number) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see above).

+ Response 200
    + Headers

            TODO:Ldap server info
            
## Adding and modifying an LDAP Server [POST]

* Create: POST method performed on the `/ldapServers` node. If the LDAP server is configured on the system successfully, its ID is returned in the “Location” field of the response header
* Modifying an LDAP server is a PUT method on a `/ldapServers/<ldapServer Id>` node

+ Attributes (ldap server)

+ Response 200
    
    + Headers
    
            TODO:update LDAP server.



# Group LDAP Mapping Methods [/ldapMappings/{?offset,limit,filter}]

## Adding and modifying an LDAP Mapping [POST]

* Creating: POST method to the `/ldapMappings` If the LDAP mapping is configured on the system successfully, its ID is returned in the “Location” field of the response header
* Modifying: PUT method on a `/ldapMappings/<ldapMapping Id>` node.

+ Attributes (ldap mapping)

+ Response 200
    + Headers

            Location:ID
            
## Retrieving information on LDAP Mappings [GET]

---
**Note** Secondary LDAP Mapping parameter            

Per LDAP mapping, there is a new optional `coSpaceSecondaryUriMapping` parameter so that the coSpaces that are created automatically have a secondary URI.

* When creating an LDAP mapping (see the previous section) or modifying the configuration of an existing LDAP mapping you can supply a `coSpaceSecondaryUriMapping` parameter
* When retrieving information on an individual LDAP mapping (a GET method on a `/ldapMappings/<LDAPmapping Id>` node) the `coSpaceSecondaryUriMapping` value will be returned if it is defined for that LDAP mapping

---  

GET method performed on the `/ldapMappings` node.

Response is structured as a top-level <ldapMappings total=”N”> tag with potentially multiple “<ldapMapping>” elements within it. “<ldapMapping>” elements returned follow the general form on the left.

+ Parameters
    + filter (string) - Supply filter=<string> in the URI to return just those LDAP mappings that match the filter.
    + offset (number) - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list (see above). 
    + limit (number) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see above).

+ Response 200
    + Headers

            TODO:Info

## Retrieving detailed Information about an individual LDAP Mapping [GET /ldapMappings/{ldapMapping Id}]

GET method performed on a `/ldapMappings/<ldapMapping Id>` node. If the ldapMapping ID supplied is valid, a “200 OK” response is received, with XML content described in the creating

+ Response 200
    + Headers

            TODO:info


# Group LDAP Source Methods [/ldapSources/{?filter,offset,limit,tenantFilter}]

## Retrieving Information on LDAP Sources [GET]

GET method performed on the `/ldapSources` node.

Response is structured as a top-level < ldapSources total=”N”> tag with potentially multiple “<ldapSource>” elements within it.

“<ldapSource>” elements returned follow the general form on the left.

All as per LDAP source creation described below:

* ldapSource id (ID)

* server (ID)

* mapping (ID)

* baseDn (string)

* filter (string) 

* tenant (ID)

+ Parameters
    + filter (string) - Supply filter=<string> in the URI to return just those LDAP sources that match the filter.
    + offset - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list (see above).
    + limit (number) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see above).
    + tenantFilter(ID) - Supply tenantFilter to return only those LDAP sources associated with the specified tenant. (ID)

+ Response 200
    + Headers

            TODO:info

## Adding and modifying an LDAP Source [POST]

* Creating: POST method to the `/ldapSources` node. If the LDAP source is configured on the system successfully, its ID is returned in the “Location” field of the response header
* Modifying: PUT method on a `/ldapSources/<ldapSource id>` node


+ Attributes (ldap source)

+ Response 200
    + Headers

            TODO:info


## Retrieving detailed information on a LDAP Source [GET /ldapSources/{ldapSource ID}]

GET method performed on a `/ldapSources/<ldapSource ID>` node. If the ldapSource ID supplied is valid, a “200 OK” response is received, with XML content as per LDAP source creation described above.

+ Response 200
    + Headers

            TODO:info

# Group LDAP Sync Methods [/ldapSyncs/{?offset,limit}]

API support for LDAP synchronization comprises the ability to:

* Trigger a new sync via the API
* Monitor pending and in-progress LDAP syncs

There is a top-level `/ldapSyncs` node in the object tree, and associated GET, DELETE, POST methods to use on objects underneath it.

## Retrieving scheduled LDAP sync methods [GET]

GET method on the `/ldapSyncs` node. Returns results in the form "<ldapSyncs total=N> ...</ldapSyncs>", with N being the total number of pending and in-progress LDAP sync methods. 
Within the encompassing "<ldapSyncs>" are one or more "<ldapSync id=ID>" nodes; each of the form on the left,
where: state is either: "inProgress" (happening now), "pending" (yet to be started), completed or failed.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>ldapSyncid</td>
    <td>ID</td>
    <td> </td>
  </tr>
  <tr>
    <td>state</td>
    <td>inProgress|pending|complete|failed</td>
    <td>The current status of this LDAP sync operation:<br>inProgress - this LDAP sync operation is happening now <br>pending - this LDAP sync operation has yet to start <br>complete - this LDAP sync operation has completed successfully <br>failed - this LDAP sync operation has failed</td>
  </tr>
  <tr>
    <td>failureReason</td>
    <td>tenantDoesNotExist| ldapSourceDoes NotExist| clashOccurred| ldapError</td>
    <td> </td>
  </tr>
  <tr>
    <td>numUsersImported</td>
    <td>Number</td>
    <td>The number of users imported so far for an in-progress LDAP sync</td>
  </tr>
  <tr>
    <td>numLdapSourcesComplete</td>
    <td>Number</td>
    <td>The number of LDAP sources for which the sync method has been completed for an in-progress LDAP sync of multiple LDAP sources. However if the first LDAP source synchronization is still in progress so that numLdapSourcesComplete=0, then the parameter is omitted</td>
  </tr>
</table>

+ Parameters
    + offset (number) - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list.
    + limit (number) -  A "limit" can be supplied to retrieve elements other than the first "page" in the notional list.
    
+ Response 200
    + Headers

            TODO:info    
            
## Initiating a new LDAP sync [POST]

POST method on the `/ldapSyncs` node. If neither parameter in the following table is included, the sync is equivalent to the Sync now button on the Web Admin Interface Configuration > Active Directory page.

+ Attributes (ldap sync)

+ Response 200
    + Headers

            LOCATION: Format `/api/v1/ldapSyncs/<LDAPsync Id>`

## Cancelling a scheduled LDAP sync [DELETE]

DELETE method on a `/ldapSyncs/<LDAP sync Id>` node. This method cancels a scheduled LDAP sync. This method will fail if the sync method has already started (or started and completed).

+ Response 200
    + Headers

            TODO:deleted

## Retrieving information on a single LDAP sync method [GET /ldapSyncs/{LDAP sync ID}]

GET method on an `/ldapSyncs/<LDAP sync ID>` node.

+ Response 200
    + Headers

            TODO:info


# Group External Directory Search Locations [/directorySearchLocations/{?offset,limit,tenantFilter}]

Via the API you can add to the Call Bridge, additional directory search locations to be consulted when users of Cisco Meeting Apps perform searches. External directory search locations can be added on a per-tenant level. Results from these locations will be added to the "normal" results (e.g. those from our LDAP-sourced user lists) and presented in the Cisco Meeting App. 

## Retrieving Information on external directory search locations [GET]

GET method performed on the `directorySearchLocations` node.

* <directorySearchLocations total="N"> tag with potentially multiple
* <directorySearchLocation> elements within it. .
* <directorySearchLocation> elements returned follow the general form on the left.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>ldapServer</td>
    <td>ID</td>
    <td>All as per external directory search location creation described below</td>
  </tr>
  <tr>
    <td>tenant</td>
    <td>ID</td>
    <td></td>
  </tr>
  <tr>
    <td>baseDn</td>
    <td>String</td>
    <td></td>
  </tr>
  <tr>
    <td>filterFormat</td>
    <td>String</td>
    <td></td>
  </tr>
  <tr>
    <td>label</td>
    <td>String</td>
    <td></td>
  </tr>
  <tr>
    <td>priority</td>
    <td>Number</td>
    <td></td>
  </tr>
</table>


+ Parameters
    + offset(Number) - An "offset" can be supplied to retrieve elements other than the first "page" in the notional list.
    + limit(Number) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list.
    + tenantFilter(ID) - Supply tenantFilter to return only those external directory search locations associated with the specified tenant.

+ Response 200
    
    + Headers

            TODO:info
            
## Adding and modifying external directory search locations [POST]

* Creating: POST method to the `/directorySearchLocations` node. If the LDAP source is configured on the system successfully, its ID is returned in the “Location” field of the response header.
* Modifying: PUT method on a `/directorySearchLocations/<directory search location id>` node.

+ Attributes (directory)

+ Response 200
    + Headers

            TODO:info

## Retrieving detailed information on external directory search locations [GET /directorySearchLocations/{directory search location id}]

GET method performed on a '/directorySearchLocations/<directory search location id>' node. If the directory search location ID supplied is valid, a “200 OK” response is received, with XML content as per directory search location creation described above.

+ Response 200

    + Headers

            Location:info

# Group Multi-tenancy

# Group Tenants [/tenants/{?filter,offset,limit,callLegProfileFillter}]

## Retrieving Tenants [GET]

GET method performed on a '/tenants' node.

Response is structured as a top-level <tenants total=”N”> tag with potentially multiple <tenant> elements within it. <tenant> elements follow the general form on the left.

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>tenant id</td>
    <td>ID</td>
    <td></td>
  </tr>
  <tr>
    <td>name</td>
    <td>Text</td>
    <td></td>
  </tr>
  <tr>
    <td>tenantGroup</td>
    <td>ID</td>
    <td>If specified, associate this tenant with the supplied tenant group; the IDs of coSpaces in tenants within the same tenant group must be unique.</td>
  </tr>
</table>

+ Parameters
    + filter (Text) - Supply filter=<tenant> in the URI to return just those tenants that match the filter
    + offset (number) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see above).
    + limit (number) - An "offset" and "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see above).
    + callLegProfileFillter (ID) - Supply callLegProfileFilter=<call leg profile id> to return just those coSpaces using that call leg profile

+ Response 200
 
    + Headers

            TODO:info

## Creating and Modifying a Tenant [POST]

* Creating: POST method to the `/tenants` node. If the tenant is created successfully, an ID for the new tenant is returned in the “Location” field of the response header
* Modifying: PUT method performed on a `/tenants/<tenant id>` node

+ Attributes (tenant)

+ Response 200
    + Headers

            TODO:info

# Group Tenant group operations [/tenantGroups/{?offset,limit,tenantGroups,tenantGroupId}]

## Retrieving Tenant Groups [GET]

GET method performed on a `/tenantGroups` node.
Response is structured as a top-level <tenantGroups total=”N”> tag with potentially multiple <tenantGroup> elements within it. 

+ Parameters
    + offset(Number) - An "offset"can be supplied to retrieve elements other than the first "page" in the notional list (see above).
    + limit(Number) - A "limit" can be supplied to retrieve elements other than the first "page" in the notional list (see above).
    + tenantGroups(Number) - Number of tenant groups
    + tenantGroupId(ID) - ID for each tenant group
    
+ Response 200
    + Headers

            TODO:info    

## Creating and Modifying a Tenant Group [POST]

* Creating: POST method to the `/tenantGroups` node. If the tenant group is created successfully, an ID for the new tenant group is returned in the “Location” field of the response header
* Modifying: PUT method performed on a `/tenantGroups/<tenantGroupId>` node

+ Response 200
    + Headers

            TODO:info

## Retrieving Detailed Information about an Individual Tenant Group [GET /tenantGroups/{tenantGroupId}]
GET method performed on a `/tenantGroups/<tenant group id>` node. If the tenant ID supplied is valid, a “200 OK” response is received.

+ Response 200
    + Headers

            TODO:info

# Group accessQuery Method [/accessQuery/{?uri,callId,tenant}]

## accessQuery Method [POST]

The accessQuery method finds details of how a given URI or call ID (for example, one that could be associated with a coSpace) might be reached. One use is an external system discovering that a coSpace with URI "sales.meeting" would be reached via the SIP URI "sales.meeting@example.com". 

Response format: The response includes one or more of the elements on the left within an "<accessQuery>" tag

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>uri</td>
    <td>String</td>
    <td>The full URI corresponding to the  uri supplied in the request</td>
  </tr>
  <tr>
    <td>webAddress</td>
    <td>String</td>
    <td>An HTTPS URI for web access to the callId supplied in the request</td>
  </tr>
  <tr>
    <td>ivr</td>
    <td>String</td>
    <td>A telephone number to reach an IVR that can be supplied with the callId  supplied in the request</td>
  </tr>
</table>


POST performed on the `/api/v1/accessQuery` node.

+ Attributes (accessQuery)

+ Response 200
    + Headers

            TODO:info

# Group conversationIdQuery Method [/conversationIdQuery]

## conversationIdQuery Method [GET]

GET performed on the /api/v1/conversationIdQuery node.

The conversationIdQuery method finds whether a conversation with a specified ID has been found. Response format is follows:

<table>
  <tr>
    <th>Response elements</th>
    <th>Type/Value</th>
    <th>Description/Notes</th>
  </tr>
  <tr>
    <td>conversationId</td>
    <td>String</td>
    <td>The conversation id searched for</td>
  </tr>
  <tr>
    <td>found</td>
    <td>true|false</td>
    <td>Whether or not a conversation with the specified id has been found.</td>
  </tr>
</table>

+ Response 200
    + Headers

            TODO:info    

# Group uriUsageQuery Method [/uriUsageQuery]

## uriUsageQuery Method [POST]

The uriUsageQuery method finds the coSpace, user and/or IVR using the specified URI within the specified tenant.

POST performed on the `/api/v1/uriUsageQuery` node.

+ Attributes (uriusagequery)

+ Response 200
    + Headers

            TODO:info



# Data Structures

## URI user part (string)
## URL (string)
## ID (string)

## defaultLayout (enum)
+ allEqual
+ speakerOnly
+ telepresence
+ stacked
+ allEqualQuarters - present from R1.7 onwards
+ allEqualNinths - present from R1.7 onwards
+ allEqualSixteenths - present from R1.7 onwards
+ allEqualTwentyFifths - present from R1.7 onwards
+ onePlusFive - present from R1.8 onwards
+ onePlusSeven - present from R1.8 onwards
+ onePlusNine - present from R1.8 onwards
+ automatic - From R1.9, the "allEqual" layout reverts to the pre-1.7 arrangement where the layout expands from a 4 person view up to a 25 person view, with all participants shown at equal size. The "allEqual" layout that was introduced in R1.7 is renamed "automatic"

## coSpaceMember
+ userJid (ID) - JID of the user to be added as a member
+ callLegProfile (ID) - If provided, associates the specified call leg profile with this coSpace user
+ canDestroy: `false` (boolean) - Whether this user is allowed to delete the coSpace
+ canAddRemoveMember: `false` (boolean) - Whether this user is allowed to add or remove other members of the coSpace
+ canChangeName: `false` (boolean) - Whether this user is allowed to change the name of the coSpace
+ canChangeUri: `false` (boolean) - Whether this user is allowed to change the URI of the coSpace
+ canChangeCallId: `false` (boolean) - Whether this user is allowed to change the Call ID of the coSpace
+ canChangePasscode: `false` (boolean) - Whether this user is allowed to change the passcode of the coSpace
+ canPostMessage: `false` (boolean) - Whether this user is allowed to write messages in the coSpace
+ canRemoveSelf: `false` (boolean) - Whether this user is allowed to remove himself from the coSpace
+ canDeleteAllMessages: `false` (boolean) - Whether this user is allowed to delete all messages from the coSpace message board
+ canChangeNonMemberAccessAllowed `true` (boolean) - Whether this user is allowed to change the “nonmember access allowed setting” of the coSpace. From version 2.3.

## coSpaceBulkParameterSets1
+ startIndex (number) - Index that coSpace mappings start from (inclusive)
+ endIndex (number) - Index that coSpace mappings end at (inclusive)
+ coSpaceBulkParameterSet (ID) - Parameter set GUID that is going to be synchronised.
+ status - Status of the sync operation:
    + pending - the sync operation is in a queue waiting to execute
    + running - the sync operation is currently running
    + complete - the sync operation has successfully completed
    + failedCoSpaceUriConflict - the sync failed because it would involve creating a URI that conflicts with one that already exists
    + failedCallIdConflict - the sync failed because it would involve creating a call ID that conflicts with one that already exists
    + failedIndexRangeInvalid - the sync failed because the "startIndex" was greater than the "endIndex"
    + failedIndexRangeTooGreat - the sync failed because the difference between "endIndex" and "startIndex" was too large
    + failedNoSuchParameterSet - the "coSpaceBulkParameterSet" refered to in the sync command did not exist
    + failed - the sync operation failed
+ removeAll (boolean) - If supplied, determines whether the sync will remove all entries that were created using the parameter set. Used only if you need to remove all spaces that were created previously. If set to true then no spaces will be created. If set to false, or omitted, then all spaces previously created using this parameter set will be removed and new spaces based on the new mappings will be created. If this parameter is not supplied in a create (POST) operation, it defaults to "false".

## coSpaceBulkParameterSets
+ startIndex (number) - Index that coSpace mappings start from (inclusive)
+ endIndex (number) - Index that coSpace mappings end at (inclusive)
+ coSpaceBulkParameterSet (ID) - Parameter set GUID that is going to be synchronised.
+ removeAll (boolean) - If supplied, determines whether the sync will remove all entries that were created using the parameter set. Used only if you need to remove all spaces that were created previously. If set to true then no spaces will be created. If set to false, or omitted, then all spaces previously created using this parameter set will be removed and new spaces based on the new mappings will be created. If this parameter is not supplied in a create (POST) operation, it defaults to "false".

## message
+ message (required) - The message string to be posted to the message board
+ from - A “from” name to be shown to message board viewers as the originator of the message

## accessMethod
+ uri (URI user part) - The URI to be used for dialing in via this access method
+ callID (ID) - The "call ID" to be used for connecting via this access method (using the IVR or Web Bridge login)
+ passcode - A passcode required for this access method
+ callLegProfile (ID) - The ID of a call leg profile to apply to calls in via this access method
+ secret - If provided, sets the security string for this coSpace access method. If absent, a security string is chosen automatically if the coSpace access method has a callId value. This is the security value associated with the coSpace access method that needs to be supplied with the callId for guest access to the coSpace via this access method. 
This parameter is present from R1.7 onwards
+ regenerateSecret (boolean) - If provided as true - a new security value is generated for this coSpace access method and the former value is no longer valid (for instance, any hyperlinks including it will cease to work)
If provided as false - do not generate a new secret value for this coSpace access method; this has no effect. This parameter is only valid for the modify (PUT) case. This parameter is present from R1.7 onwards
+ scope (enum) - The visibility of this coSpace access method to users of Acano clients who are members of the coSpace
    + public - details of this coSpace access method can be made available to members of the coSpace
    + private - details of this coSpace access method will not be made available to members of the coSpace

## outboundDialPlanRule
+ domain - The domain to match in order to apply the dial plan rule; either a complete value (e.g. "example.com") or a “wildcarded” one (e.g. "*.com")
+ priority (number) - A numeric value which determines the order in which dial plan rules (including rules with wildcarded domains) will be applied. Rules with higher priority values are applied first
+ localContactDomain (string) - Used when forming an explicit contact domain to be used: if you leave this field blank then the localContactDomain is derived from the local IP address (as in previous releases)
+ localFromDomain (string) - Used when forming the calling party for outgoing calls using this dial plan rule
+ sipProxy (string) - The address (IP address or hostname) of the proxy device through which to make the call
+ trunkType (enum) - Used to set up rules to route calls out to third party SIP control devices such as CiscoExpressway, Avaya Manager or Lync servers. If set to lync or avaya then outgoing calls established that use this rule will be made as Lync or Avaya calls with some specialized behavior. SIP means that calls using this rule will be standard SIP calls
    + sip
    + lync
    + avaya
+ failureAction (enum) - Whether or not to try the next outbound dial plan rule if the current one did not result in a connected call
    + stop
    + continue
+ sipControlEncryption (enum) - Whether to enforce use of encrypted control traffic on calls made via this rule
    + auto - attempt to use encrypted control connections first, but allow fall back to unencrypted control traffic in the event of failure
    + encrypted - allow only encrypted SIP control traffic (TLS connections)
    + unencrypted - use only unencrypted traffic (TCP or UDP)
+ scope (enum) - The entities for which this outbound dial plan rule is valid
    + global - all Call Bridges are able to use this outbound dial plan rule to reach a matching domain
    + callBridge - this outbound dial plan rule is only valid for a single nominated Call Bridge
+ callBridge (ID) - If the rule has a scope of callBridge, this is the id of the Call Bridge for which the rule is valid
+ tenant (ID) - If a tenant is specified, this rule will only be used to make outbound call legs from calls associated with that tenant; otherwise, this rule may be used from any call. This parameter is present from R1.8 onwards
+ callRouting (enum) - (beta feature) This is the media routing that should be used for SIP calls originating from this rule
    + default - calls using this rule will use normal, direct, media routing
    + traversal - media for calls using this rule will flow via a TURN server

## inboundDialPlanRule
+ domain - The domain to match in order to apply the dial plan rule. Must be a complete value (e.g. "example.com")
+ priority (number) - inbound dial plan rules' configured domain values are always exactly matched against incoming calls. For the purposes of generating full URIs to advertise for incoming calls (especially cases where multiple rules are applicable) you can also set a numeric priority value - higher values will be preferred
+ resolveToUsers (boolean) - If set to true, calls to this domain will be matched against user JIDs (if a match is then found, that incoming call leg causes a "point to point" call to that user's client
+ resolveTocoSpaces (boolean) - If set to true, calls to this domain will be matched against coSpace URIs (if a match is then found, the incoming call leg becomes a participant in the coSpace)
+ resolveToIvrs (boolean) - If set to true, calls to this domain will be matched against configured IVR URIs (if a match is then found, the incoming call leg connects to that IVR)
+ resolveToLyncConferences (boolean) - If set to true, calls to this domain will be resolved to a Lync conference URI; if the resolution is successful, the incoming call leg becomes a participant in the Lync conference. If this parameter is not supplied in a create (POST) operation, it defaults to "false".
+ tenant (ID) - If specified, calls to this inbound domain will only be matched against user JIDs and coSpace URIs for the specified tenant

## forwardingDialPlanRule
+ matchPattern - The domain to match in order to apply the dial plan rule. Must be a complete domain name (e.g. "example.com") or a “wildcarded” one (e.g. *.com)
+ destinationDomain - Calls that are forwarded with this rule will have their destination domain rewritten to be this value
+ action (enum)
    + forward - If set to "forward" causes matching call legs to become point-to- point calls with a new destination
    + reject - "reject" causes the incoming call leg to be rejected
+ callerIdMode (enum) - When forwarding an incoming call to a new destination address, whether to preserve the original calling party's ID or to generate a new one. If this parameter is not supplied in a create (POST) operation, it defaults to "regenerate"
    + regenerate - default
    + preserve
+ priority (number) - Numeric value used when determining the order in which to apply forwarding dial plan rules; higher values will be applied first
+ tenant (ID) - If a tenant is specified, calls using this rule will be associated with the specified tenant. This parameter is present from R1.8 onwards

## call
+ coSpace (ID) - Specifies the coSpace for which the call is being instantiated
+ name (string) - The name of the new call
+ locked (boolean) - Allows the locking/unlocking of a meeting lobby in order to control the process of activating participants. Par- ticipants requiring activation are typically guests to a coSpace that have not yet been ‘activated’. Members of a coSpace are not affected, and can join the coSpace at any time. When a meeting is locked, the guests requiring activ- ation wait in the meeting lobby until the host unlocks the coSpace, at which point they are activated and join the coSpace. Participants that are already activated are NOT deactivated when the conference goes from the unlocked state to the locked state.
If set to true, new participants that need activation are not activated even if there are activators in the call. This parameter is present from version 1.8 onwards
+ recording (boolean) - If true, this call is currently being recorded. Present from version 1.9 onwards.
+ streaming (boolean) - If true, this call is currently being streamed. (From version 2.1).
+ allowAllMuteSelf (boolean) - If true, participants have the permission to mute and unmute themselves. Present from version 1.9 onwards
+ allowAllPresentationContribution: `false`(boolean) - If true, participants have the permission to present. If false, this permission is dependent on present- ationContributionAllowed in the call leg profile. Default is false. Present from version 1.9 onwards
+ joinAudioMuteOverride (boolean) - If true, new participants will be muted when joining the call. Present from version 1.9 onwards.
+ messageText (string) - Text to display to every participant in the call (only displayed if configured `messageDuration` is non zero). (From version 2.1)
+ messagePosition  - Position to display configured messageText on screen (for SIP endpoints).(From version 2.1)
    + top
    + middle
    + bottom
+ messageDuration - Time in seconds to display configured messageText on screen . Typing the string “permanent” will result in the string being permanently shown until it is reconfigured. (From version 2.1)
    + Number
    + permanent
+ activeWhenEmpty (boolean) - If true, this call is considered “active for load balancing” when no participants are present,. This means that the first call to the empty conference is preferentially load balanced. You can prevent the load balancing preferentially using the empty conferences by setting this parameter to false. If this parameter is not supplied in a create (POST) operation, it defaults to “true”. (From version 2.2)     
    
## callProfile
+ participantLimit (number) - Sets the maximum number of participants for calls (coSpace instantiations or ad hoc calls) using this call profile that can be active simultaneously; new participants beyond this limit are not permitted
+ messageBoardEnabled (boolean) - If specified, sets whether a message board (chat) is allowed for this coSpace or ad hoc call
+ locked (boolean)
+ recordingMode (enum) - Controls how this coSpace or ad hoc call can be recorded. If this parameter is not supplied in a create (POST) operation, it defaults to "manual". Present from version 1.9 onwards
    + disabled - call is not recorded
    + manual - users can start/stop recording
    + automatic - call is automatically recorded and users cannot start/stop recording
+ streamingMode (enum) - Controls how this coSpace or ad hoc call can be streamed. If this parameter is not supplied in a create (POST) operation, it defaults to "manual".(From version 2.1)
    + disabled - call is not streamed
    + manual - users can start/stop streaming
    + automatic - call is automatically streamed and users cannot start/stop streaming
+ passcodeMode - Determines the behavior for passcode entry when a mixture of blank and set passcodes can be used to access a coSpace via the same URI/call Id.
    + required - requires passcode to be entered, with blank passcode needing to be explicitly entered
    + timeout - after an amount of time has elapsed with no passcode being entered, interpret this as a blank passcode. Amount of timeout is determined by value of "passcodeTimeout"
+ passcodeTimeout (number) - If specified, this is the amount of time, in seconds, that the Call Bridge will wait before before interpreting passcode as a blank passcode (if "passcodeMode" is set to "timeout"). Timeout time is measured from the end of the passcode prompt.
+ gatewayAudioCallOptimization (boolean) - If set to true, outgoing gateway call legs will be audio-only if the incoming call leg was audio-only. (From version 2.3)
+ lyncConferenceMode - Defines the behavior of the Call Bridge when connecting participants to Lync conferences.
    + dualHomeCluster - all the Call Bridges will share the same conference
    + dualHomeCallBridge - each Call Bridge will host their own conference and each will connect to the AVMCU
    + gateway - each participant will have dedicated connection to the Lync AVMCU server(From version 2.3).

## Layouts (enum)
+ allEqual
+ speakerOnly
+ telepresence
+ stacked
+ allEqualQuarters
+ allEqualNinths
+ allEqualSixteenths
+ allEqualTwentyFifths
+ onePlusFive
+ onePlusSeven
+ onePlusNine
+ automatic
+ onePlusN

## CreateParticipantforspecifiedcall
+ remoteParty (string) - For POST only, specifies the call leg’s address; this could be a SIP URI, a phone number, or a user JID to invite that user to the call
+ bandwidth (number) - For POST only, if supplied, sets the bandwidth for the call leg, in bits per second (e.g. 2000000 for 2Mbit/s). If not supplied, the Acano Call Bridge configured value will be used
+ confirmation (boolean) - For POST only, if supplied, this overrides the automatic choice of whether to require a confirmation from the remote party to join the call. true - always require a confirmation from the remote party; typically this takes the form of a voice prompt requiring them to hit a key to join. false - never require a confirmation from the remote party; the remote party will be joined into the coSpace when they accept the incoming call
+ ownerId (ID) - If supplied must be an ID for the Acano server to associate with this call leg. This will be returned by the Acano servern when the call leg is later queried and therefore should be a value that has meaning to the requestor
+ chosenLayout (Layouts) - This parameter overrides the prevailing default layout for this call leg. This parameter is present from version 1.8 onwards. Note: From R1.9, the "allEqual" layout reverts to the pre-1.7 arrangement where the layout expands from a 4 person view up to a 25 person view, with all participants shown at equal size. The "allEqual" layout that was introduced in R1.7 is renamed "automatic"
+ dtmfSequence - A sequence of DTMF key press commands to send to the far end either when the call leg initially connects, or during the call. In the supplied sequence, you can use the digits 0 to 9, * and #, as well as one or more comma characters (",") which add a pause between digits. this parameter is present from ver- sion 1.9 onwards
+ callLegProfile - If provided, associates the specified call leg profile with this call leg. You can also supply individual values for all parameters that can be part of a call leg profile to override this call leg profiles’ value. See below
+ needsActivation
+ defaultLayout (Layouts) - If provided changes the call leg to use the specified video stream layout. Setting this parameter will only have an effect on those call legs for which the user does not already have layout control: that is, SIP calls (including Lync). (The layout for call legs that correspond to Acano client connections will always be chosen by the user of that client.) Note: that the callLegProfile "defaultLayout" parameter replaces an equivalent "layout" parameter in early (pre- 1.2) Acano releases. If both are supplied, defaultLayout takes precedence. Note: From R1.9, the "allEqual" layout reverts to the pre-1.7 arrangement where the layout expands from a 4 person view up to a 25 person view, with all participants shown at equal size. The "allEqual" layout that was introduced in R1.7 is renamed "automatic".
+ participantLabels
+ presentationDisplayMode
+ presentationContributionAllowed (boolean)
+ presentationViewingAllowed (boolean)
+ endCallAllowed (boolean)
+ muteOthersAllowed: `false` (boolean)
+ videoMuteOthersAllowed: `false` (boolean)
+ muteSelfAllowed: `true` (boolean)
+ videoMuteSelfAllowed: `true` (boolean)
+ changeLayoutAllowed: `true` (boolean)
+ joinToneParticipantThreshold (number)
+ leaveToneParticipantThreshold
+ videoMode
+ rxAudioMute
+ txAudioMute
+ rxVideoMute
+ txVideoMute
+ sipMediaEncryption
+ audioPacketSizeMs
+ deactiviationMode
+ deactivationModeTime
+ telepresenceCallsAllowed
+ sipPresentationChannelEnabled (boolean)
+ bfcpMode (boolean)
+ layout (Layouts) - This parameter is provided for backward compatibility with early versions of Acano server - it has the equivalent functionality to changing "defaultLayout", and if both are supplied then "defaultLayout" will take precedence
+ disconnectOthersAllowed (boolean)
+ qualityMain - Restricts the maximum negotiated main video call quality for this call leg based on limiting transcoding resources. Specified using a typical resolution and framerate. Note that call legs may operate at lower resolutions or framerates due to endpoint limitations or overall Call Bridge load.
    + unrestricted - this is the default setting if not specified, and matches the behavior of older Call Bridge versions, where no restrictions are placed on resolution or frame rate
    + max1080p30 - restricts the bridge to negotiating at most 1920x1080 screen size at 30 frames per second or equivalent transcoding resources, for example 1280x720 screen size at 60 frames per second
    + max720p30 - restricts the bridge to negotiating at most 1280x720 screen size at 30 frames per second or equivalent transcoding resources
    + max480p30 - restricts the bridge to negotiating at most 868x480 screen size at 30 frames per second or equivalent transcoding resources.(From version 2.2)
+ qualityPresentation - Restrict the maximum negotiated presentation video call quality for this call leg based on limiting transcoding resources. Specified using a typical resolution and frame rate. This only affects legs which use a separate presentation stream.
    + unrestricted - this is the default setting if not specified, and matches the behavior of older Call Bridge versions, where no restrictions are placed on resolution or framerate
    + max1080p30 - restricts the Call Bridge to negotiating at most 1920x1080 screen size at 30 frames per second or equivalent transcoding resources
    + max720p5 - restricts the Call Bridge to negotiating at most 1280x720 screen size at 5 frames per second or equivalent transcoding resources. (From version 2.2)
+ participantCounter (number) - (From version 2.2)
+ callBridge (ID) - If supplied, attempt to add the participant from the specified Call Bridge (from version 2.2).
+ callBridgeGroup (ID) - If supplied, attempt to add the participant from the specified Call Bridge Group (from version 2.2).
+ importance (number) - The importance value of the participant to be created. (From version 2.2)

## callLeg
+ remoteParty (string) - For POST only, specifies the call leg’s address; this could be a SIP URI, a phone number, or a user JID to invite that user to the call
+ bandwidth (number) - For POST only, if supplied, sets the bandwidth for the call leg, in bits per second (e.g. 2000000 for 2Mbit/s). If not supplied, the Acano Call Bridge configured value will be used
+ confirmation (boolean) - For POST only, if supplied, this overrides the automatic choice of whether to require a confirmation from the remote party to join the call. true - always require a confirmation from the remote party; typically this takes the form of a voice prompt requiring them to hit a key to join. false - never require a confirmation from the remote party; the remote party will be joined into the coSpace when they accept the incoming call
+ ownerId (ID) - If supplied must be an ID for the Acano server to associate with this call leg. This will be returned by the Acano servern when the call leg is later queried and therefore should be a value that has meaning to the requestor
+ chosenLayout (Layouts) - This parameter overrides the prevailing default layout for this call leg. This parameter is present from version 1.8 onwards. Note: From R1.9, the "allEqual" layout reverts to the pre-1.7 arrangement where the layout expands from a 4 person view up to a 25 person view, with all participants shown at equal size. The "allEqual" layout that was introduced in R1.7 is renamed "automatic"
+ dtmfSequence - A sequence of DTMF key press commands to send to the far end either when the call leg initially connects, or during the call. In the supplied sequence, you can use the digits 0 to 9, * and #, as well as one or more comma characters (",") which add a pause between digits. this parameter is present from ver- sion 1.9 onwards
+ callLegProfile (ID) - If provided, associates the specified call leg profile with this call leg. You can also supply individual values for all parameters that can be part of a call leg profile to override this call leg profiles’ value. See below
+ needsActivation
+ defaultLayout (Layouts) - If provided changes the call leg to use the specified video stream layout. Setting this parameter will only have an effect on those call legs for which the user does not already have layout control: that is, SIP calls (including Lync). (The layout for call legs that correspond to Acano client connections will always be chosen by the user of that client.) Note: that the callLegProfile "defaultLayout" parameter replaces an equivalent "layout" parameter in early (pre- 1.2) Acano releases. If both are supplied, defaultLayout takes precedence. Note: From R1.9, the "allEqual" layout reverts to the pre-1.7 arrangement where the layout expands from a 4 person view up to a 25 person view, with all participants shown at equal size. The "allEqual" layout that was introduced in R1.7 is renamed "automatic".
+ participantLabels
+ presentationDisplayMode
+ presentationContributionAllowed (boolean)
+ presentationViewingAllowed (boolean)
+ endCallAllowed (boolean)
+ muteOthersAllowed: `false` (boolean)
+ videoMuteOthersAllowed: `false` (boolean)
+ muteSelfAllowed: `true` (boolean)
+ videoMuteSelfAllowed: `true` (boolean)
+ changeLayoutAllowed: `true` (boolean)
+ joinToneParticipantThreshold (number)
+ leaveToneParticipantThreshold
+ videoMode
+ rxAudioMute
+ txAudioMute
+ rxVideoMute
+ txVideoMute
+ sipMediaEncryption
+ audioPacketSizeMs
+ deactiviationMode
+ deactivationModeTime
+ telepresenceCallsAllowed (boolean)
+ sipPresentationChannelEnabled (boolean)
+ bfcpMode (boolean)
+ layout (Layouts) - This parameter is provided for backward compatibility with versions prior to 1.2 - it has the equivalent functionality to changing "defaultLayout", and if both are supplied then "defaultLayout" will take precedence
+ disconnectOthersAllowed (boolean)
+ qualityMain - Restricts the maximum negotiated main video call quality for this call leg based on limiting transcoding resources. Specified using a typical resolution and framerate. Note that call legs may operate at lower resolutions or framerates due to endpoint limitations or overall Call Bridge load.
    + unrestricted - this is the default setting if not specified, and matches the behavior of older Call Bridge versions, where no restrictions are placed on resolution or frame rate
    + max1080p30 - restricts the bridge to negotiating at most 1920x1080 screen size at 30 frames per second or equivalent transcoding resources, for example 1280x720 screen size at 60 frames per second
    + max720p30 - restricts the bridge to negotiating at most 1280x720 screen size at 30 frames per second or equivalent transcoding resources
    + max480p30 - restricts the bridge to negotiating at most 868x480 screen size at 30 frames per second or equivalent transcoding resources.(From version 2.2)
+ qualityPresentation - Restrict the maximum negotiated presentation video call quality for this call leg based on limiting transcoding resources. Specified using a typical resolution and frame rate. This only affects legs which use a separate presentation stream.
    + unrestricted - this is the default setting if not specified, and matches the behavior of older Call Bridge versions, where no restrictions are placed on resolution or framerate
    + max1080p30 - restricts the Call Bridge to negotiating at most 1920x1080 screen size at 30 frames per second or equivalent transcoding resources
    + max720p5 - restricts the Call Bridge to negotiating at most 1280x720 screen size at 5 frames per second or equivalent transcoding resources. (From version 2.2)
+ participantCounter - Controls the behavior of the onscreen participant counter. (From version 2.2)
    + never - never show an onscreen participant count value
    + auto - show the onscreen participant count value when appropriate. Typically this will be to indicate that there are additional participants present that you cannot currently see.
    + always - always show the onscreen participant count value

## ParticipantProperties
+ rxAudioMute (boolean) - If true, mute the receiving of audio from all endpoints.
+ txAudioMute (boolean) - If true, mute the transmission of audio from all endpoints.
+ rxVideoMute (boolean) - If true, mute (block) the receiving of video from all endpoints.
+ txVideoMute (boolean) - If true, mute (block)the transmission of video from all endpoints.
+ layout (Layouts)
+ importance (number) - Set importance of all participants.

## callLegProfile
+ needsActivation: `false` (boolean) - If set to "true", the participant is unable to receive or contribute audio and video until one or more “full/activator” participants join.
+ defaultLayout (Layouts) - The default layout to be used for call legs using this call leg profile. Note: From R1.9, the "allEqual" layout reverts to the pre-1.7 arrangement where the layout expands from a 4 person view up to a 25 person view, with all participants shown at equal size. The "allEqual" layout that was introduced in R1.7 is renamed "automatic".
+ changeLayoutAllowed (boolean) - If set to “true” all legs using this call leg profile are allowed to change their screen layout on a SIP endpoint. This parameter is present from version 1.8 onwards
+ participantLabels (boolean) - If set to "true", call legs using this call leg profile will have par- ticipant pane labels shown on their video panes.
+ presentationDisplayMode (enum) - singleStream provides a single composited content+video BFCP stream rather than outgoing content being in a separate stream
    + dualStream
    + singleStream
+ presentationContributionAllowed (boolean) - If true, the participant using the call leg can contribute content
+ allowAllPresentationContributionAllowed (boolean) - Whether call legs using this call leg profile are allowed to change the permission to present of all call legs. Present from version 1.8 onwards
+ presentationViewingAllowed (boolean) - If true, the participant using the call leg can view content contributed by others
+ endCallAllowed (boolean) - If true, the participant using the call leg profile can end the meeting for everyone
+ muteOthersAllowed: `false` (boolean) - If true, the participant using the call leg profile can mute other participants
+ changeJoinAudioMuteOverrideAllowed (boolean) - Whether call legs using this call leg profile are allowed to set the initial mute state of new par- ticipants. Present from version 1.8 onwards
+ videoMuteOthersAllowed: `false` (boolean) - Whether call legs using this call leg profile are allowed to mute or unmute their own audio
+ muteSelfAllowed: `true` (boolean) - Whether call legs using this call leg profile are allowed to mute or unmute (block/unblock) the video of other participants
+ allowAllMuteSelfAllowed (boolean) - Whether or not call legs using this call leg profile are allowed to change the permission of all call legs to mute and unmute them- selves. Present from version 1.9 onwards
+ videoMuteSelfAllowed: `true` (boolean) - Whether call legs using this call leg profile are allowed to mute or unmute (block/unblock) their own video
+ joinToneParticipantThreshold (number) - Number of participants up to which a "join tone" will be played (a value of 0 “disables” the feature)
+ leaveToneParticipantThreshold (number) - Number of participants up to which a "leave tone" will be played out (a value of 0 “disables” the feature)
+ videoMode (enum) - If disabled is set then call legs using this call leg profile will be audio-only, or audio and content – depending on the values for presentationViewingAllowed and txAudioMute. No main stream video will be shown. For devices which show content in the main video stream, content but no participant video will be shown in the main video stream when appropriate
    + auto
    + disabled
+ rxAudioMute (boolean) - If true, other participants will not hear audio from call legs using this call leg profile
+ txAudioMute (boolean) - If true, audio to call legs using this call leg profile will be muted
+ rxVideoMute (boolean) - If true, contributing ("camera") video from call legs using this call leg profile will not be seen by other participants
+ txVideoMute (boolean) - If true, video streams to call legs using this call leg profile will be muted (a SIP endpoint's screen just shows the logo, for example, and an Acano client will be sent no video at all)
+ sipMediaEncryption (enum) - Same as Web Admin Interface setting
    + optional
    + required
    + prohibited
+ audioPacketSizeMs (number) - Numeric value for preferred packet size for outgoing audio streams (in milliseconds, the default value is 20ms)
+ deactivationMode (enum) - Action for "needsActivation" call legs when the last "activator" leaves
    + deactivate
    + disconnect
    + remainActivated
+ deactivationModeTime (number) - Number of seconds after the last "activator" leaves before which the deactivationMode action is taken
+ telepresenceCallsAllowed (boolean) - If true, a call leg using this call leg profile is allowed to make TIP (Telepresence Interoperability Protocol) calls
+ sipPresentationChannelEnabled (boolean) - If true, a call leg using this call leg profile is permitted to perform presentation video channel operations
+ bfcpMode (enum) - If presentation video channel operations are enabled for SIP calls, this setting determines the Acano Call Bridge's BFCP behaviour
    + serverOnly - this is the normal setting for a conferencing device, and is intended for use with BFCP client mode devices (for instance, SIP endpoints)
    + serverAndClient - this setting allows the Acano Call Bridge to operate in either BFCP client or BFCP server mode in calls with remote devices. This can allow improved presentation video sharing with a remote conference- hosting device such as a third party MCU
+ callLockAllowed (boolean) - Determines whether or not call legs using this call leg profile are allowed to lock the call. Present from version 1.8 onwards
+ recordingControlAllowed (boolean) - Whether call legs using this call leg profile are allowed to start/stop recording the call. Present from version 1.9 onwards

## dialTransform
+ type (enum) - The type of preprocessing to apply to this transform
    + raw - produces one component - $1
    + strip - removes dots, dashes, spaces and produces one component - $1
    + phone - An international phone number - produces two components $1county code and $2number
+ match - see match in the documentation
+ transform - see transform in the documentation
+ priority (number) - The priority this transform rule should have. Rules with higher priorities are applied first
+ action (enum) - The action to take if this rule matches
    + accept
    + acceptPhone
    + deny

## callBrandingProfile
+ invitationTemplate (URL) - The HTTP or HTTPS URL of the invitation template text which clients will use when constructing textual invitations. Refer to the Acano solution Customization Guide for details on how to customize the text within the invitation. This parameter is present from version 1.8 onwards.
+ resourceLocation (URL) - The HTTP or HTTPS URL that the Call Bridge call branding files will be retrieved from. This is the "directory" in which the individual audio and graphic files reside. Details of these files are in the Acano solution Customization Guide.

## dtmfProfile
+ lockCall (string) - DTMF sequence to be used by a participant to lock the call; new call legs that require activation will not be activated even if an activator has joined the call. This parameter is present from version 1.8 onwards
+ unlockCall(string)  - DTMF sequence to be used by a participant to unlock the call; this will activate all call legs that need activation if there is an activator in the call. This parameter is present from version 1.8 onwards
+ nextLayout (string) - DTMF sequence to be used by a participant to change the participant's video layout to the next one in the list. This parameter is present from version 1.8 onwards
+ previousLayout (string) - DTMF sequence to be used by a participant to change the participant's video layout to the previous one in the list. This parameter is present from version 1.8 onwards
+ muteSelfAudio (string) - DTMF sequence to be used by a participant to mute the audio being contributed to their call
+ unmuteSelfAudio (string) - DTMF sequence to be used by a participant to unmute their audio
+ toggleMuteSelfAudio (string) - DTMF sequence to be used by a participant to toggle between mute and unmute audio from themselves
+ muteAllExceptSelfAudio (string) - DTMF sequence to be used by a participant to mute all other participants in the call
+ unmuteAllExceptSelfAudio (string)  - DTMF sequence to be used by a participant to unmute all other participants in the call
+ startRecording (string) - DTMF sequence to be used by a participant to start recording the active call. Present from version 1.9 onwards
+ stopRecording (string) - DTMF sequence to be used by a participant to stop recording the active call. Present from version 1.9 onwards
+ allowAllMuteSelf (string) - DTMF sequence to be used by a participant to allow all participants to mute and unmute them- selves. Sets allowAllMuteSelf in the Call object to true. Present from version 1.9 onwards
+ cancelAllowAllMuteSelf (string) - DTMF sequence to be used by a participant to can- cel the permission to allow all participants to mute and unmute themselves. Sets allowAllMuteSelf in the Call object to false. Present from version 1.9 onwards
+ allowAllPresentationContribution(string)  - DTMF sequence to be used by a participant to allow all participants to present. Present from ver- sion 1.9 onwards
+ cancelAllowAllPresentationContribution (string) - DTMF sequence to be used by a participant to can- cel the permission for all participants to present. Present from version 1.9 onwards
+ muteAllNewAudio(string)  - DTMF sequence to be used by a participant to mute all new participants. Sets joinAu- dioMuteOverride Call object to true. Present from version 1.9 onwards
+ unmuteAllNewAudio (string) - DTMF sequence to be used by a participant to unmute all new participants. . Sets joinAu- dioMuteOverride Call object to false. Present from version 1.9 onwards
+ defaultMuteAllNewAudio (string) - DTMF sequence to be used by a participant to use the audio mute value from the call leg profile for new participants. Present from version 1.9 onwards
+ muteAllNewAndAllExceptSelfAudio(string)  - DTMF sequence to be used by a participant to mute all new participants and all other participants in the call. Sets joinAudioMuteOverride in the call object to `true` and mutes all call legs except for the issuer. This requires ‘muteOthersAllowed’ to be ‘true’ in the call leg profile of the issuer. Present from version 1.9 onwards
+ unmuteAllNewAndAllExceptSelfAudio(string)  - DTMF sequence to be used by a participant to unmute all new participants and all other par- ticipants in the call. Sets joinAudioMuteOverride in the call object to `false` and unmutes all call legs except for the issuer. This requires ‘muteOth- ersAllowed’ to be ‘true’ in the call leg profile of the issuer. Present from version 1.9 onwards
+ endCall (string) - DTMF sequence to be used by a participant to end the call; this will disconnect all participants including the participant who initiated the operation

## ivr
+ uri (URI user part) - The URI to be used for this IVR
+ tenant (ID) - If specified, calls to this IVR will only be able to join coSpaces associated with the specified tenant. If no tenant is supplied, calls to this IVR will be able to join any call on the system that has a call ID configured
+ tenantGroup (ID) - Calls to this IVR will only be able to join coSpaces associated with tenants within the specified tenant group. If no tenant group is supplied, calls to this IVR will only be able to join coSpaces without a tenant, or associated with a tenant in no tenant group. This parameter is present from version 1.8 onwards
+ ivrBrandingProfile (ID) - If supplied, specifies an IVR branding profile to be used for calls to this IVR - an IVR branding profile supplied here will take precedence over any top-level or tenant-level IVR branding profile
+ resolveCoSpaceCallIds: `true` (boolean) - Whether calls to this IVR will accept coSpace and coSpace access method call IDs for the purpose of allowing callers to join Acano coSpaces
+ resolveLyncConferenceIds: `false` (boolean) - Whether calls to this IVR will accept IDs to be resolved to Lync scheduled conference IDs

## ivrBrandingProfile
+ resourceLocation (URL) - The HTTP or HTTPS URL that the IVR branding files will be retrieved from. This should be the "directory" in which the individual audio and graphic files reside. Details of these files are in the Acano solution Customization Guide

## important
+ importance (number) - Set the importance of this participant already in a conference. For example to 1. (From version 2.2)

## userProfile
+ cancreateCoSpaces (boolean) - Whether a user associated with this user profile is permitted to create new coSpaces
+ canCreateCalls (boolean) - Whether a user associated with this user profile is permitted to create new calls
+ canUseExternalDevices (boolean) - Whether a user associated with this user profile is permitted to use slave SIP devices
+ canMakePhoneCalls (boolean) - Whether a user associated with this user profile will be displayed the option to make phone calls in the client
+ userToUserMessagingAllowed (boolean) - Whether a user associated with this user profile will be allowed to send and receive messages when in a point to point call with another user

## cdrReceiver
+ uri

## systemProfile
+ callLegProfile (ID) - Sets the top level call leg profile to the one with the specified ID
+ callProfile (ID) - Sets the top level call profile to the one specified
+ dtmfProfile (ID) - Sets the top level DTMF profile to the one specified
+ userProfile (ID) - Sets the top level user profile to the one specified
+ ivrBrandingProfile (ID) - Sets the top level IVR branding profile to the one specified
+ callBrandingProfile (ID) - Sets the top level call branding profile to the one specified

## turnServer
+ serverAddress - The address for the Call Bridge to use to reach this TURN server
+ clientAddress - The address that Cisco Meeting Apps should use to reach this TURN server
+ username - The username to use when making allocations on this TURN server
+ password - The password to use when making allocations on this TURN server
+ type (enum) - The TURN server type
    + acano/cms - Select “cms” or “acano” if using the TURN server within the Meeting Server; uses UDP/TCP port 3478 to connect to the TURN server.
    + expressway - Select “expressway” if connecting to the Cisco Expressway rather than using the TURN server in the Meeting Server; uses UDP/TCP port 3478.
    + lyncEdge - Select “lyncEdge” if connecting to a Lync or Skype for Business deployment; uses port 443 to connect to the TURN server.
    + standard - If the “type” field is not set it defaults to “standard”; uses port 443 to connect to the TURN server.
+ numRegistrations (number) - The number of registrations that should be made to this TURN server. This parameter is only meaningful for configured Lync Edge servers
+ tcpPortNumberOverride (number) - An optional override for the port number to use when using this TURN server for TCP media (for example, Lync present- ation call legs). This parameter is not needed for configured Lync Edge servers, where the TCP port number can always be determined automatically.
+ callBridge (ID) - If specified, associate this TURN server with the supplied Call Bridge (from version 2.1)
+ callBridgeGroup (ID) - If specified, associate this TURN server with the supplied Call Bridge group (from version 2.1)

## WebBridge

+ url (URL) - The address for the Call Bridge to use to reach this Web Bridge
+ resourceArchive (URL) - The address of any customization archive file for the Call Bridge to use or the background image and logo branding on the login page for this Web Bridge Note: When specifying the path any port value other than :80 for http and :443 for https is considered invalid.
+ tenant (ID) - If you supply the ID for a tenant to associate with this Web Bridge, only call IDs for coSpaces owned by that tenant can be joined through it.
+ tenantGroup (ID) - Only coSpaces associated with tenants within the specified tenant group can be accessed by call ID through this web bridge. If no tenant group is supplied, only coSpaces without a tenant, or associated with a tenant in no tenant group, can be accessed by call ID.
+ idEntryMode - Controls coSpace access via call ID and passcode; If this parameter is not supplied in a create (POST) operation, it defaults to secure. Note: Legacy mode is deprecated from version 2.3. If upgrading a Web Bridge from a 2.2 or earlier release that is configured to use 'legacy' mode, the Web Bridge will default to 'secure' mode in 2.3.
    + disabled - access via call ID and passcode is disabled
    + secure - both the call ID and the passcode must be specified to look up and join a coSpace
    + legacy - only a call ID need be specified to look up a coSpace. (Deprecated in 2.3)
+ allowWeblinkAccess - Whether this Web Bridge will allow users to access coSpace (and coSpace access methods) as guests by following a weblink. If this parameter is not supplied in a create (POST) operation, it defaults to true.    
+ showSignIn (boolean) - Whether this Web Bridge will display the sign in tab on the index page. If this parameter is not supplied in a create (POST) operation, it defaults to true.
+ resolveCoSpace CallIds (boolean) - Whether this Web Bridge should accept coSpace and coSpace access method call IDs for the purpose of allowing visitors to join coSpaces. If this parameter is not supplied in a create (POST) operation, it defaults to true.
+ resolveLync ConferenceIds (boolean) - Whether this Web Bridge will accept IDs to be resolved to Lync scheduled conference IDs. If this parameter is not supplied in a create (POST) operation, it defaults to false.
+ callBridge (ID) - If specified, associate this Web bridge with the supplied Call Bridge (from version 2.1)
+ callBridgeGroup (ID) - If specified, associate this Web bridge with the supplied Call Bridge group (from version 2.1)

## call bridge
+ name (string) - The unique name for this configured clustered Call Bridge
+ address (string) - The address at which this Call Bridge in the cluster can be reached
+ sipDomain (string) - The SIP domain to use for establishing peer-to-peer links with this clustered Call Bridge
+ callBridgeGroup (ID) - If specified, associate this Call Bridge with the supplied Call Bridge group (from version 2.1)

## call bridge group
+ name (string) - Optional name of the Call Bridge group
+ loadBalancingEnabled: `false` (boolean) - Whether or not Call Bridges in this Call Bridge group will attempt to load balance calls within the group. If this parameter is not supplied in a create (POST) operation, it defaults to "false" (from version 2.1)
+ loadBalanceLyncCalls: `false` (boolean) - Whether or not incoming calls to coSpaces from Lync are load balanced within the Call Bridge Group. If this parameter is not supplied in a create (POST) operation, it defaults to "false" (from version 2.1)
+ loadBalanceOutgoingCalls: `false` (boolean) - Whether or not calls from coSpaces should be load balanced within the group. If this parameter is not supplied in a create (POST) operation, it defaults to "false" (from version 2.2)
+ loadBalanceUserCalls: `true` (boolean) - Whether or not Cisco Meeting App calls to coSpaces should be load balanced within the group. If this parameter is not supplied in a create (POST) operation, it defaults to "true" (from version 2.3)

## xmpp
+ uniqueName (string) - The name by which this Call Bridge should be known by the XMPP server
+ domain (string) - The domain that the Call Bridge should use for XMPP
+ sharedSecret (string) - The password value set by the XMPP server for this Call Bridge when it was configured
+ serverAddressOverride (string) - If supplied, the Call Bridge will connect to an XMPP server at the specified address rather than using the "domain" to discover it (via DNS).

## call bridge cluster
+ uniqueName (string) - The name by which this call bridge is known within the call bridge cluster; this should match the "name" value for its entry in the /callBridges table.
+ peerLinkBitRate (number) - If supplied. the maximum media bit rate to use for call distribution connections between call bridges.
+ participantLimit (number) - If supplied, the maximum number of participants allowed to be active on this Call Bridge; when this limit is reached, new incoming SIP calls will be rejected.
+ loadLimit (number) - If supplied, the maximum number of load units to be used on this Call Bridge (from version 2.1).
+ newConferenceLoadLimitBasisPoints (number) - Basis points (1 in 10,000) of the load limit at which incoming calls to non-active conferences will be disfavored, ranges from 0 to 10000, defaults to 5000 (50% load). Value is scaled relative to load limit. (From version 2.1).
+ existingConferenceLoadLimitBasisPoints (number) - Basis points of the load limit at which incoming calls to non-active conferences will be rejected, ranges from 0 to 10000, defaults to 5000 (from version 2.1).

## recorder
+ url (URL) - The HTTP or HTTPS URL address that theCall Bridge should use to reach this recorder.
+ callBridge (ID) - If specified, associate this recorder with the supplied Call Bridge (from version 2.1).
+ callBridgeGroup (ID) - If specified, associate this recorder with the supplied Call Bridge group (from version 2.1).

## streamer
+ url(URL) - The HTTP or HTTPS URL address that theCall Bridge should use to reach this streamer.
+ callBridge (ID) - If specified, associate this streamer with the supplied Call Bridge.
+ callBridgeGroup (ID) - If specified, associate this streamer with the supplied Call Bridge group.

## compatibility
+ sipUdt - Controls whether use of UDT is allowed within SIP calls. Active Control uses UDT transport for certain features, for example sending roster lists to endpoints, allowing users to disconnect other participants while in call, and inter-deployment participant lists. |(From version 2.1)
    + true - UDT is allowed within SIP calls
    + false - UDT is not allowed within SIP calls
+ sipMultistream - Controls whether use of Cisco multistream protocols is allowed within SIP calls. The dual video feature for Cisco dual endpoints uses this protocol. If this is disabled, then no calls will be able to use dual screen video. (From version 2.2.3)
    + true - Cisco multistream signalling is allowed within SIP calls (default from version 2.3)
    + false - Cisco multistream signalling is not allowed within SIP calls (default for version 2.2)
+ sipMediaPayloadTypeMode - Controls whether the default codec media payload types are used, or a special variant. (From version 2.2)
    + auto - the default mode, where the normal media payload type values are used.
    + broadsoft - a special exception mode, where the H.264 video codec is advertised with payload type 109.
 

    
## ldap server    
+ address*(string) - The address of the LDAP server to connect to.
+ portNumber *(number) - The TCP or TLS port number to connect to on the remote LDAP server.
+ username (string) - The username to use when retrieving information from the LDAP server.
+ password (string) - The password of the account associated with username.
+ secure* (boolean) - Whether to make a secure connection to the LDAP server. If “true” then TLS will be used; if “false”, TCP will be used.
+ usePagedResults (boolean) - Whether to use the LDAP paged results control in search operations during LDAP sync; if not set the paged results control will be used. Oracle Internet Directory requires this parameter to be set to “false” (from version 2.1).

## ldap mapping
+ jidMapping (string) - The template for generating user JIDs from the associated LDAP server’s entries, for instance $sAMAccountName$@example.com.
+ nameMapping (string) - The template for generating user names from the associated LDAP server’s entries; for instance “$cn$” to use the common name.
`+ cdrTagMapping (string) - The template for generating a users' cdrTag value. Can be set either to a fixed value or be constructed from other LDAP fields for that user. The user’s cdrTag is used in callLegStart CDRs. See the Cisco Meeting Server CDR Reference for details.
+ authenticationIdMapping (string) - The template for generating authentication IDs from the associated LDAP server"s entries, for instance "$userPrincipalName$".
+ coSpaceUriMapping (string) - If these parameters are supplied, they ensure that each user account generated by this LDAP mapping has an associated personal coSpace. The user is automatically added as a member of the coSpace, with permissions defined above. 
+ coSpaceSecondaryUriMapping (string) - In order for that coSpace to be set up as required, these parameters provide the template for setting the coSpaces’ URI, displayed name and configured Call ID. For example, setting coSpaceNameMapping to “$cn$ personal coSpace” ensures that each user’s coSpace is labelled with their name followed by “personal coSpace”.
+ coSpaceNameMapping (string) - Note that the generated coSpace will have its own cdrTag – and it will be the same as the user’s cdrTag and cannot be changed other than by changing the cdrTagMapping above and re-syncing. (The coSpace’s cdrTag is used in the callStart CDR. See the Cisco Meeting Server CDR Reference for details.)
+ coSpaceCallIdMapping (string) - Note that the normal uniqueness rules apply to the URI and Call IDs of coSpaces set up in this way: it is not valid to have the same URI or Call ID for more than one coSpace set up by a given LDAP mapping, nor is it valid for such a coSpace URI or Call ID to be the same as one currently in use elsewhere on the Meeting Server.

## ldap source

+ server*(ID) - The ID of a previously-configured LDAP server (see above)
+ mapping*(ID) - The ID of a previously-configured LDAP mapping (see above)
+ baseDn*(string) - The distinguished name of the node in the LDAP server’s tree from which users should be imported, for instance “cn=Users,dc=<companyname>,dc=com”
+ filter (string) - An LDAP filter string that records must satisfy in order to be imported as users, for instance “(objectClass=person)”
+ tenant(ID) - If supplied, the ID for the tenant to which the LDAP source should be associated. Users imported with this LDAP source will be associated with that tenant
+ userProfile(ID) - If supplied, this is the ID of the user profile to associate with users imported via this LDAP source. This parameter is present from version 2.0 onwards.

## ldap sync

+ tenant (string) - If supplied the sync will be restricted to that tenant.
+ ldapSource(ID) - If supplied the sync will be restricted to that LDAP Source.
+ removeWhenFinished `true` - If this parameter is not supplied in a create (POST) operation, it defaults to "true".
    + true - this LDAP sync will, when it has finished (either successfully or with an error), be removed from the system's tracked list, and so can no longer be queried
    + false - this LDAP sync will persist in the system's tracked list when it has finished, at which point its success or failure status may then be queried. To avoid it remaining permanently on the system's tracked list, it needs to be deleted explicitly.

## directory

+ ldapServer*(ID) - The ID of a previously-configured LDAP server (see above)
+ tenant (ID) - if supplied, the tenant to which this external directory applies; entries from the remote directory will only be supplied to users associated with this tenant
+ baseDn (string) - The distinguished name of the node in the LDAP server's tree within which to search
+ filterFormat(string) - The LDAP filter used to select directory search results; $1 should be used to represent the user-supplied search string
+ label (string) - The human-readable name that should be associated with search results from this directory when displayed by requesting clients.
+ priority (number) - Controls the order in which directorySearchLocations should be used in searching; entries with higher priorities will be used first
+ firstName - The following fields specify the name of a field from LDAP to be used when populating the contents of the search result. For example, displayName might be set to "cn" to use the canonical name.
+ lastName
+ displayName
+ phone
+ mobile
+ email
+ sip
+ organisation

## tenant
+ name*(string) - A label for the tenant.
+ tenantGroup(ID) - If specified, associate this tenant with the supplied tenant group; the IDs of coSpaces in tenants within the same tenant group must be unique.
+ callLegProfile(ID) - If specified, associates the specified call leg profile with this tenant
+ callProfile(ID) - If specified, associates the specified call profile with this tenant
+ dtmfProfile(ID) - If specified, associates the specified DTMF profile with this tenant
+ ivrBrandingProfile(ID) - If specified, associates the specified IVR branding profile with this tenant
+ callBrandingProfile (ID) - If specified, associates the specified call branding profile with this tenant
+ participantLimit(number) - f specified, sets a limit on the number of participants associated with this tenant that can be simultaneously active; new participants beyond this limit will not be permitted.
+ userProfile(ID) - If supplied, a user profile to associate with this tenant; unless otherwise overridden, all users associated with this tenant will use this user profile.

## accessQuery
+ uri(string) - The "user part" of the URI; that is, the part before any '@' character in a full URI
+ callId(string) - A numeric ID (typically 9 digits long)
+ tenant(ID) - If supplied, limits the search to the specific tenant.

## uriusagequery
+ uri(string) - The "user part" of the URI; that is, the part before any '@' character in a full URI.
+ tenant(ID) - If supplied, only those coSpaces, users and IVRs within the specified tenant will be returned. If omitted only entities without a tenant will be returned.